{"version":3,"sources":["../../src/js/Pickers/TimePickerHeader.js"],"names":["TimePickerHeader","_setHour","props","setTimeMode","_setMinute","timeMode","hours","minutes","timePeriod","setTempTime","tempTime","timePeriods","propTypes","instanceOf","Date","isRequired","oneOf","func","string"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;;;;;AAEA;;;;;IAKqBA,gB;;;;;;;;;;;;;;0MAyCnBC,Q,GAAW,YAAM;AACf,YAAKC,KAAL,CAAWC,WAAX,CAAuB,MAAvB;AACD,K,QAEDC,U,GAAa,YAAM;AACjB,YAAKF,KAAL,CAAWC,WAAX,CAAuB,QAAvB;AACD,K;;;;;6BAEQ;AAAA,mBACiE,KAAKD,KADtE;AAAA,UACCG,QADD,UACCA,QADD;AAAA,UACWC,KADX,UACWA,KADX;AAAA,UACkBC,OADlB,UACkBA,OADlB;AAAA,UAC2BC,UAD3B,UAC2BA,UAD3B;AAAA,UACuCC,WADvC,UACuCA,WADvC;AAAA,UACoDC,QADpD,UACoDA,QADpD;;AAEP,UAAIC,oBAAJ;AACA,UAAIH,UAAJ,EAAgB;AACdG,sBAAc,uDAAa,UAAUD,QAAvB,EAAiC,aAAaD,WAA9C,EAA2D,YAAYD,UAAvE,GAAd;AACD;;AAED,aACE;AAAA;AAAA,UAAQ,WAAU,gCAAlB;AACE;AAAA;AAAA,YAAe,SAAS,KAAKP,QAA7B,EAAuC,QAAQI,aAAa,MAA5D;AACE;AAAA;AAAA,cAAI,WAAU,cAAd;AACGC;AADH;AADF,SADF;AAME;AAAA;AAAA,YAAe,SAAS,KAAKF,UAA7B,EAAyC,QAAQC,aAAa,QAA9D;AACE;AAAA;AAAA,cAAI,WAAU,cAAd;AACGE;AADH;AADF,SANF;AAWGI;AAXH,OADF;AAeD;;;;;;AAvEkBX,gB,CACZY,S,GAAY;AACjB;;;AAGAF,YAAU,oBAAUG,UAAV,CAAqBC,IAArB,EAA2BC,UAJpB;;AAMjB;;;AAGAV,YAAU,oBAAUW,KAAV,CAAgB,CAAC,MAAD,EAAS,QAAT,CAAhB,EAAoCD,UAT7B;;AAWjB;;;AAGAZ,eAAa,oBAAUc,IAAV,CAAeF,UAdX;;AAgBjB;;;AAGAN,eAAa,oBAAUQ,IAAV,CAAeF,UAnBX;;AAqBjB;;;;AAIAT,SAAO,oBAAUY,MAAV,CAAiBH,UAzBP;;AA2BjB;;;;AAIAR,WAAS,oBAAUW,MAAV,CAAiBH,UA/BT;;AAiCjB;;;;AAIAP,cAAY,oBAAUU;AArCL,C;kBADAlB,gB","file":"TimePickerHeader.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport TimePeriods from './TimePeriods';\nimport PickerControl from './PickerControl';\n\n/**\n * The `TimePickerHeader` component is used for rendering the\n * current time for the `TimePicker` as well as switching between\n * the different views for the time picker.\n */\nexport default class TimePickerHeader extends PureComponent {\n  static propTypes = {\n    /**\n     * The current time of the time picker.\n     */\n    tempTime: PropTypes.instanceOf(Date).isRequired,\n\n    /**\n     * The current time type that is being changed.\n     */\n    timeMode: PropTypes.oneOf(['hour', 'minute']).isRequired,\n\n    /**\n     * A function to update the time mode.\n     */\n    setTimeMode: PropTypes.func.isRequired,\n\n    /**\n     * A function to update the time for the time picker.\n     */\n    setTempTime: PropTypes.func.isRequired,\n\n    /**\n     * A formatted hours string for the user's locale. This\n     * would be '3' for en-US if the time was '3:15'\n     */\n    hours: PropTypes.string.isRequired,\n\n    /**\n     * A formatted minutes string for the user's locale.\n     * This would be ':15' for en-US if the time was '3:15'.\n     */\n    minutes: PropTypes.string.isRequired,\n\n    /**\n     * An optional time period to use for locales that use\n     * 12 hour clocks and AM/PM.\n     */\n    timePeriod: PropTypes.string,\n  };\n\n  _setHour = () => {\n    this.props.setTimeMode('hour');\n  };\n\n  _setMinute = () => {\n    this.props.setTimeMode('minute');\n  };\n\n  render() {\n    const { timeMode, hours, minutes, timePeriod, setTempTime, tempTime } = this.props;\n    let timePeriods;\n    if (timePeriod) {\n      timePeriods = <TimePeriods tempTime={tempTime} setTempTime={setTempTime} timePeriod={timePeriod} />;\n    }\n\n    return (\n      <header className=\"md-picker-header md-text-right\">\n        <PickerControl onClick={this._setHour} active={timeMode === 'hour'}>\n          <h4 className=\"md-display-3\">\n            {hours}\n          </h4>\n        </PickerControl>\n        <PickerControl onClick={this._setMinute} active={timeMode === 'minute'}>\n          <h4 className=\"md-display-3\">\n            {minutes}\n          </h4>\n        </PickerControl>\n        {timePeriods}\n      </header>\n    );\n  }\n}\n"]}