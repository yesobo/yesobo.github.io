{"version":3,"sources":["../../src/js/Pickers/ClockTime.js"],"names":["CLOCK_PADDING","ClockTime","props","_handleKeyUp","e","which","keyCode","onKeyboardFocus","time","_setTime","_time","_setPosition","active","focus","radius","index","size","offsetWidth","timeRadians","Math","PI","innerCircle","outerRadius","innerRadius","setState","style","top","sin","left","cos","state","nextProps","text","propTypes","number","isRequired","bool","func"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;AACA;;;;;;;;;;;;AAEA,IAAMA,gBAAgB,CAAtB;;AAEA;;;;;;IAKqBC,S;;;AA0BnB,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA,sHACXA,KADW;;AAAA,UAenBC,YAfmB,GAeJ,UAACC,CAAD,EAAO;AACpB,UAAI,CAACA,EAAEC,KAAF,IAAWD,EAAEE,OAAd,mBAAJ,EAAoC;AAClC,cAAKJ,KAAL,CAAWK,eAAX,CAA2B,MAAKL,KAAL,CAAWM,IAAtC;AACD;AACF,KAnBkB;;AAAA,UAqBnBC,QArBmB,GAqBR,UAACD,IAAD,EAAU;AACnB,YAAKE,KAAL,GAAaF,IAAb;AACA,UAAIA,SAAS,IAAb,EAAmB;AACjB,cAAKG,YAAL,CAAkB,MAAKT,KAAvB,EAA8BM,IAA9B;;AAEA,YAAI,MAAKN,KAAL,CAAWU,MAAf,EAAuB;AACrBJ,eAAKK,KAAL;AACD;AACF;AACF,KA9BkB;;AAAA,UAgCnBF,YAhCmB,GAgCJ,gBAAoBH,IAApB,EAA6B;AAAA,UAA1BM,MAA0B,QAA1BA,MAA0B;AAAA,UAAlBC,KAAkB,QAAlBA,KAAkB;;AAC1C;AACA,UAAMC,OAAO,CAACR,KAAKS,WAAL,IAAoB,EAArB,IAA2B,CAAxC;AACA,UAAMC,cAAeC,KAAKC,EAAL,GAAU,CAAX,GAAgBL,SAASI,KAAKC,EAAL,GAAU,CAAnB,CAApC;AACA,UAAMC,cAAcN,QAAQ,EAA5B;;AAEA,UAAMO,cAAcR,SAASE,IAA7B;AACA,UAAMO,cAAcD,cAActB,aAAd,IAA+BqB,cAAcL,OAAO,CAArB,GAAyB,CAAxD,CAApB;;AAEA,YAAKQ,QAAL,CAAc;AACZC,eAAO;AACLC,eAAKJ,cAAcC,cAAcJ,KAAKQ,GAAL,CAAST,WAAT,CAD5B;AAELU,gBAAMN,cAAcC,cAAcJ,KAAKU,GAAL,CAASX,WAAT;AAF7B;AADK,OAAd;AAMD,KA/CkB;;AAGjB,UAAKY,KAAL,GAAa;AACX;AACAd,YAAM;AAFK,KAAb;AAHiB;AAOlB;;;;8CAEyBe,S,EAAW;AACnC,UAAI,KAAK7B,KAAL,CAAWY,MAAX,KAAsBiB,UAAUjB,MAAhC,IAA0C,KAAKZ,KAAL,CAAWa,KAAX,KAAqBgB,UAAUhB,KAA7E,EAAoF;AAClF,aAAKJ,YAAL,CAAkBoB,SAAlB,EAA6B,KAAKrB,KAAlC;AACD;AACF;;;6BAoCQ;AAAA,mBACkB,KAAKR,KADvB;AAAA,UACCM,IADD,UACCA,IADD;AAAA,UACOI,MADP,UACOA,MADP;;AAEP,aACE;AAAA;AAAA;AACE,eAAK,KAAKH,QADZ;AAEE,oBAAU,CAFZ;AAGE,qBAAW,0BAAG,kDAAH,EAAuD;AAChE,sCAA0BG;AADsC,WAAvD,EAER,2BAAY,EAAEoB,MAAM,CAACpB,MAAT,EAAZ,CAFQ,CAHb;AAME,iBAAO,KAAKkB,KAAL,CAAWL,KANpB;AAOE,mBAAS,KAAKtB;AAPhB;AASE;AAAA;AAAA,YAAM,WAAU,qBAAhB;AAAuCK;AAAvC;AATF,OADF;AAaD;;;;;;AA1FkBP,S,CACZgC,S,GAAY;AACjB;;;;AAIAlB,SAAO,oBAAUmB,MAAV,CAAiBC,UALP;;AAOjB;;;AAGA3B,QAAM,oBAAU0B,MAAV,CAAiBC,UAVN;;AAYjB;;;AAGAvB,UAAQ,oBAAUwB,IAAV,CAAeD,UAfN;;AAiBjB;;;AAGArB,UAAQ,oBAAUoB,MAAV,CAAiBC,UApBR;;AAsBjB5B,mBAAiB,oBAAU8B,IAAV,CAAeF;AAtBf,C;kBADAlC,S","file":"ClockTime.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nimport { TAB } from '../constants/keyCodes';\nimport themeColors from '../utils/themeColors';\n\nconst CLOCK_PADDING = 4;\n\n/**\n * The `ClockTime` component is used for positioning hours or minutes\n * in a clock. The time will be positioned based on it's given index\n * and the radius of the clock.\n */\nexport default class ClockTime extends PureComponent {\n  static propTypes = {\n    /**\n     * The index of the current time to be displayed. This\n     * should be a number between 1 and 24.\n     */\n    index: PropTypes.number.isRequired,\n\n    /**\n     * The time number to display.\n     */\n    time: PropTypes.number.isRequired,\n\n    /**\n     * Boolean if this time is currently selected.\n     */\n    active: PropTypes.bool.isRequired,\n\n    /**\n     * The radius of the clock.\n     */\n    radius: PropTypes.number.isRequired,\n\n    onKeyboardFocus: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // default size in scss\n      size: 18,\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.radius !== nextProps.radius || this.props.index !== nextProps.index) {\n      this._setPosition(nextProps, this._time);\n    }\n  }\n\n  _handleKeyUp = (e) => {\n    if ((e.which || e.keyCode) === TAB) {\n      this.props.onKeyboardFocus(this.props.time);\n    }\n  }\n\n  _setTime = (time) => {\n    this._time = time;\n    if (time !== null) {\n      this._setPosition(this.props, time);\n\n      if (this.props.active) {\n        time.focus();\n      }\n    }\n  };\n\n  _setPosition = ({ radius, index }, time) => {\n    // 36 is default size for the time\n    const size = (time.offsetWidth || 36) / 2;\n    const timeRadians = (Math.PI / 2) - index * (Math.PI / 6);\n    const innerCircle = index > 12;\n\n    const outerRadius = radius - size;\n    const innerRadius = outerRadius - CLOCK_PADDING - (innerCircle ? size * 2 : 0);\n\n    this.setState({\n      style: {\n        top: outerRadius - innerRadius * Math.sin(timeRadians),\n        left: outerRadius + innerRadius * Math.cos(timeRadians),\n      },\n    });\n  };\n\n  render() {\n    const { time, active } = this.props;\n    return (\n      <div\n        ref={this._setTime}\n        tabIndex={0}\n        className={cn('md-clock-time md-text-no-select md-pointer--none', {\n          'md-picker-text--active': active,\n        }, themeColors({ text: !active }))}\n        style={this.state.style}\n        onKeyUp={this._handleKeyUp}\n      >\n        <span className=\"md-clock-time-value\">{time}</span>\n      </div>\n    );\n  }\n}\n"]}