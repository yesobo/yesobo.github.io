{"version":3,"sources":["../../src/js/ExpansionPanels/ExpansionList.js"],"names":["ExpansionList","state","columnWidths","focusedIndex","overflown","_setContainer","container","_container","window","addEventListener","_determineTabFocus","_width","offsetWidth","_calcColumnWidths","e","which","keyCode","panels","Array","prototype","slice","call","querySelectorAll","setState","indexOf","target","_removeFocus","_isOverflown","widths","panel","querySelector","collapser","collapserWidth","styles","getComputedStyle","maxWidth","parseFloat","paddingLeft","paddingRight","totalWidth","reduce","total","w","_getColumnWidths","maxes","row","columns","i","length","col","style","width","minWidth","Math","max","nextWidths","some","_handleResize","recalculateThreshold","props","abs","animateContent","nextProps","children","prevProps","prevState","removeEventListener","className","Component","component","map","child","key","focused","propTypes","object","string","node","oneOfType","func","isRequired","bool","number","defaultProps","childContextTypes"],"mappings":"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","file":"ExpansionList.js","sourcesContent":["import React, { PureComponent, cloneElement, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport cn from 'classnames';\n\nimport { TAB } from '../constants/keyCodes';\nimport handleWindowClickListeners from '../utils/EventUtils/handleWindowClickListeners';\nimport ResizeObserver from '../Helpers/ResizeObserver';\n\n/**\n * The `ExpansionList` component is a wrapper for the `ExpansionPanel` that helps\n * determine which `ExpansionPanel` currently has tab focus and adjusts the column\n * sizes in the header of the `ExpansionPanel`.\n *\n * The `ExpansionList` and `ExpansionPanel` components should have probably been\n * implemented as a `table` instead of a `ul || ol` since it is more column based,\n * but it would complicate the API to have dynamic row generation for the expanded\n * panels. The expanded panels _might_ not follow the same column widths as their labels\n * so a singular row with a div for expanded content might not work correctly.\n */\nexport default class ExpansionList extends PureComponent {\n  static propTypes = {\n    /**\n     * An optional style object to apply to the list.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the list.\n     */\n    className: PropTypes.string,\n\n    /**\n     * The children should be a list or singular `ExpansionPanel` component\n     * to render with some additional props injected.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The component to render the list as.\n     */\n    component: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n    ]).isRequired,\n\n    /**\n     * Boolean if all the expansion panels in the list should animate when their content's visibility\n     * changes. This is just a quicker way to disable all animations instead of having to toggle it off\n     * on each panel.\n     *\n     * > The default value is really `true` since it gets passed down to the `Collapse` component.\n     */\n    animateContent: PropTypes.bool,\n\n    /**\n     * The threshold that should be used for when the list should recalculate the positioning of all\n     * the columns. This will only compare the difference between updates.\n     * So if the size changes from 80 -> 120 -> 160 -> 140. It will only update on the third resize (160)\n     */\n    recalculateThreshold: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    component: 'ul',\n    recalculateThreshold: 80,\n  };\n\n  static childContextTypes = {\n    animateContent: PropTypes.bool,\n  };\n\n  state = { columnWidths: [], focusedIndex: -1, overflown: false };\n\n  getChildContext() {\n    const { animateContent } = this.props;\n    return { animateContent };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.children !== nextProps.children) {\n      this._calcColumnWidths();\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { focusedIndex } = this.state;\n    if (prevState.focusedIndex === focusedIndex || (prevState.focusedIndex > -1 && focusedIndex > -1)) {\n      return;\n    }\n\n    handleWindowClickListeners(this._removeFocus, this.state.focusedIndex !== -1);\n  }\n\n  componentWillUnmount() {\n    if (this.state.focusedIndex === -1) {\n      handleWindowClickListeners(this._removeFocus, false);\n    }\n\n    window.removeEventListener('keyup', this._determineTabFocus);\n  }\n\n  _setContainer = (container) => {\n    if (container !== null) {\n      this._container = findDOMNode(container);\n      window.addEventListener('keyup', this._determineTabFocus);\n\n      this._width = this._container.offsetWidth;\n      this._calcColumnWidths();\n    }\n  };\n\n  _determineTabFocus = (e) => {\n    if ((e.which || e.keyCode) === TAB) {\n      const panels = Array.prototype.slice.call(findDOMNode(this).querySelectorAll('.md-panel-header'));\n      this.setState({ focusedIndex: panels.indexOf(e.target) });\n    }\n  };\n\n  _removeFocus = () => {\n    this.setState({ focusedIndex: -1 });\n  };\n\n  _isOverflown = (widths) => {\n    if (!this._container) {\n      return 0;\n    }\n\n    const panel = this._container.querySelector('.md-panel-header');\n    if (!panel) {\n      return 0;\n    }\n\n    const collapser = this._container.querySelector('.md-expansion-panel__collapser');\n    const collapserWidth = collapser ? collapser.offsetWidth : 0;\n    const styles = window.getComputedStyle(panel);\n    const maxWidth = panel.offsetWidth\n      - parseFloat(styles.paddingLeft)\n      - parseFloat(styles.paddingRight)\n      - collapserWidth;\n\n    const totalWidth = widths.reduce((total, w) => total + w, 0);\n    return totalWidth > maxWidth;\n  };\n\n  /**\n   * Since this should really be rendered as a table, need to calculate the max width for each _column_\n   * on the panel's header and apply that as a min width for the other panels.\n   */\n  _getColumnWidths = () => {\n    if (!this._container) {\n      return this.state.columnWidths;\n    }\n\n    return [].slice.call(this._container.querySelectorAll('.md-panel-header'))\n      .reduce((maxes, row) => {\n        const columns = row.querySelectorAll('.md-panel-column');\n        for (let i = 0; i < columns.length; i++) {\n          const col = columns[i];\n          // Need to reset the widths if it has already been calculated to get a more accurate measurement.\n          const { width, minWidth } = col.style;\n          col.style.width = 'auto';\n          col.style.minWidth = 'auto';\n\n          // Only need to include the offsetWidth of the column because the child will really\n          // determine the width of the column. Since it has already been defined at this point,\n          // no additional work needs to be done.\n          maxes[i] = Math.max(col.offsetWidth, maxes[i] || 0);\n          col.style.width = width;\n          col.style.minWidth = minWidth;\n        }\n\n        return maxes;\n      }, [0]);\n  };\n\n  _calcColumnWidths = () => {\n    const { columnWidths } = this.state;\n    const nextWidths = this._getColumnWidths();\n    const overflown = this._isOverflown(nextWidths);\n    if (this.state.overflown !== overflown\n      || columnWidths.length !== nextWidths.length\n      || nextWidths.some((w, i) => w !== columnWidths[i])\n    ) {\n      this.setState({ columnWidths: nextWidths, overflown });\n    }\n  };\n\n  _handleResize = ({ width }) => {\n    const { recalculateThreshold } = this.props;\n    if (this._width !== width && (Math.abs(width - this._width) >= recalculateThreshold)) {\n      this._width = width;\n      this._calcColumnWidths();\n    }\n  };\n\n  render() {\n    const { columnWidths, focusedIndex, overflown } = this.state;\n    const {\n      children,\n      className,\n      component: Component,\n      animateContent, // eslint-disable-line no-unused-vars\n      recalculateThreshold, // eslint-disable-line no-unused-vars\n      ...props\n    } = this.props;\n\n    const panels = Children.map(children, (child, i) => cloneElement(child, {\n      key: child.key || i,\n      overflown,\n      columnWidths,\n      focused: focusedIndex === i,\n    }));\n    return (\n      <Component\n        {...props}\n        ref={this._setContainer}\n        className={cn('md-expansion-panel-list', className)}\n      >\n        <ResizeObserver watchWidth onResize={this._handleResize} />\n        {panels}\n      </Component>\n    );\n  }\n}\n"]}