{"version":3,"sources":["../../src/js/ExpansionPanels/ExpansionPanel.js"],"names":["LABEL_FONT_SIZE","LINE_HEIGHT","SINGLE_LINE_HEIGHT","ExpansionPanel","props","context","_determineIfTwoLine","twoLine","Array","prototype","slice","call","querySelectorAll","some","el","offsetHeight","setState","_handleClick","expanded","_isExpanded","state","onExpandToggle","_handleSave","e","onSave","closeOnSave","_handleCancel","onCancel","closeOnCancel","received","defaultExpanded","nextProps","process","env","NODE_ENV","columnWidths","length","console","error","prevProps","label","secondaryLabel","className","expandedSecondaryLabel","children","focused","saveType","saveLabel","savePrimary","saveSecondary","saveProps","cancelType","cancelLabel","cancelPrimary","cancelSecondary","cancelProps","headerStyle","headerClassName","contentStyle","contentClassName","tabIndex","overflown","footer","footerChildren","footerStyle","footerClassName","expandIconChildren","expandIconClassName","propAnimateContent","animateContent","propExpanded","propExpanderIcon","expanderIcon","columns","map","panelLabel","i","text","isArray","unshift","minWidth","Children","only","cloneElement","flipped","propTypes","style","object","string","node","isRequired","component","oneOfType","func","bool","element","arrayOf","number","oneOf","defaultProps","contextTypes"],"mappings":"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","file":"ExpansionPanel.js","sourcesContent":["import React, { PureComponent, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\n\nimport getField from '../utils/getField';\nimport themeColors from '../utils/themeColors';\nimport getCollapserStyles from '../utils/getCollapserStyles';\nimport controlled from '../utils/PropTypes/controlled';\nimport Paper from '../Papers/Paper';\nimport AccessibleFakeButton from '../Helpers/AccessibleFakeButton';\nimport Collapse from '../Helpers/Collapse';\nimport FontIcon from '../FontIcons/FontIcon';\nimport getDeprecatedIcon from '../FontIcons/getDeprecatedIcon';\nimport PanelContent from './PanelContent';\n\nconst LABEL_FONT_SIZE = 15;\nconst LINE_HEIGHT = 1.42857;\nconst SINGLE_LINE_HEIGHT = LABEL_FONT_SIZE * LINE_HEIGHT;\n\n/**\n * The `ExpansionPanel` component needs to be used with the `ExpansionList`\n * component. The only reason is that the `ExpansionPanel` should really\n * be rendered as a table, but it was a bit hard to have a single component\n * dynamically rendering another row when expanded. It couldn't be in the\n * same row since the expanded content might not have the same columns.\n */\nexport default class ExpansionPanel extends PureComponent {\n  static propTypes = {\n    /**\n     * An optional style to apply to the panel.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the panel.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An options style to apply to the panel's header content. This is the\n     * section that toggles the children to be visible and label columns.\n     */\n    headerStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the panel's header content. This is the\n     * section that toggles the children to be visible and label columns.\n     */\n    headerClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the element surrounding the children when expanded.\n     */\n    contentStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the element surrounding the children when expanded.\n     */\n    contentClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the footer when the `footer` prop is `undefined`.\n     *\n     * @see {@link #footer}\n     */\n    footerStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the footer when the `footer` prop is `undefined`.\n     *\n     * @see {@link #footer}\n     */\n    footerClassName: PropTypes.string,\n\n    /**\n     * The main label to display in the unexpanded panel.\n     */\n    label: PropTypes.node.isRequired,\n\n    /**\n     * Any additional columns to display after the main label. If this is a `list`\n     * instead of a singular item, they will each be formatted as a column.\n     */\n    secondaryLabel: PropTypes.node,\n\n    /**\n     * Any additional columns to display after the main label when the panel is\n     * expanded. If this is omitted, the default `secondaryLabel` will be displayed\n     * instead.\n     */\n    expandedSecondaryLabel: PropTypes.node,\n\n    /**\n     * The component to render the panel as.\n     */\n    component: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n    ]).isRequired,\n\n    /**\n     * The content to display once the panel is toggled open.\n     */\n    children: PropTypes.node,\n\n    /**\n     * A boolean if the panel is currently expanded. This will force the component\n     * to be controlled and require's the `onExpandToggle` function to be defined.\n     */\n    expanded: controlled(PropTypes.bool, 'onExpandToggle', 'defaultExpanded'),\n\n    /**\n     * Boolean if an uncontrolled panel should be expanded by default.\n     */\n    defaultExpanded: PropTypes.bool.isRequired,\n\n    /**\n     * The icon to display for expanding the expansion panel.\n     */\n    expanderIcon: PropTypes.element,\n\n    /**\n     * Boolean if the `ExpansionPanel` is currently tab focused. This is injected\n     * and managed by the `ExpansionList` component. Do not set yourself.\n     */\n    focused: PropTypes.bool.isRequired,\n\n    /**\n     * A list of min-widths to apply to each column in the panel header. This is injected\n     * and managed by the `ExpansionList` component. Do not set yourself.\n     */\n    columnWidths: PropTypes.arrayOf(PropTypes.number).isRequired,\n\n    /**\n     * Boolean if the panel has too much content so that it overflowns. This is injected\n     * and managed by the `ExpansionList` component. Do not set yourself.\n     *\n     * When this is active, it will truncate all columns except for the main label and the\n     * toggle icon.\n     */\n    overflown: PropTypes.bool,\n\n    /**\n     * A function to call when the expansion panel's expanded state is toggled.\n     * The callback for this function will include the new expanded state.\n     *\n     * `onExpandToggle(expanded)`\n     */\n    onExpandToggle: PropTypes.func,\n\n    /**\n     * An optional function to call when the Save button is clicked on the expanded panel.\n     */\n    onSave: PropTypes.func,\n\n    /**\n     * An optional function to call when the Cancel button is clicked on the expanded panel.\n     */\n    onCancel: PropTypes.func,\n\n    /**\n     * Boolean if the panel should close when the Save button is clicked.\n     */\n    closeOnSave: PropTypes.bool,\n\n    /**\n     * Boolean if the panel should close when the Cancel button is clicked.\n     */\n    closeOnCancel: PropTypes.bool,\n\n    /**\n     * An optional button type to apply to the Save button. This will get\n     * passed to the `FlatButton`.\n     */\n    saveType: PropTypes.oneOf(['button', 'submit', 'reset']),\n\n    /**\n     * The label for the Save button.\n     */\n    saveLabel: PropTypes.node.isRequired,\n\n    /**\n     * Boolean if the Save button should be styled with the primary color.\n     */\n    savePrimary: PropTypes.bool,\n\n    /**\n     * Boolean if the Save button should be styled with the secondary color,\n     */\n    saveSecondary: PropTypes.bool,\n\n    /**\n     * Any additional props to provide/override for the save button in the\n     * footer of the panel.\n     */\n    saveProps: PropTypes.object,\n\n    /**\n     * An optional button type to apply to the Cancel button. This will get\n     * passed to the `FlatButton`.\n     */\n    cancelType: PropTypes.oneOf(['button', 'submit', 'reset']),\n\n    /**\n     * The label for the Cancel button.\n     */\n    cancelLabel: PropTypes.node.isRequired,\n\n    /**\n     * Boolean if the Cancel button should be styled with the primary color,\n     */\n    cancelPrimary: PropTypes.bool,\n\n    /**\n     * Boolean if the Cancel button should be styled with the secondary color,\n     */\n    cancelSecondary: PropTypes.bool,\n\n    /**\n     * Any additional props to provide/override for the cancel button in the\n     * footer of the panel.\n     */\n    cancelProps: PropTypes.object,\n\n    /**\n     * The tab index for the panel's header. This allows keyboard navigation.\n     */\n    tabIndex: PropTypes.number.isRequired,\n\n    /**\n     * Boolean if the panel's content should animate when the content's visibility changes. This\n     * can also be toggled from the `ExpansionList` component if all `ExpansionPanel` in the list\n     * should not animate. This only affects the height transition.\n     *\n     * > The default value is really `true` since it gets passed down to the `Collapse` component.\n     */\n    animateContent: PropTypes.bool,\n\n    /**\n     * This prop controls the footer for the expansion panel. If this prop is `undefined`, it will\n     * go with the default behavior of generating the save and cancel buttons with the save and cancel\n     * props.\n     *\n     * If this value is `null`, there will be no footer created.\n     *\n     * Finally, if this prop is defined as any renderable item, it will be displayed in place of the\n     * footer.\n     *\n     * @see {@link #footerChildren}\n     */\n    footer: PropTypes.node,\n\n    /**\n     * Any additional children that should be displayed in the footer of the panel. These children\n     * will be placed after the action buttons.\n     */\n    footerChildren: PropTypes.node,\n    expandIconChildren: deprecated(PropTypes.node, 'Use the `expanderIcon` instead'),\n    expandIconClassName: deprecated(PropTypes.string, 'Use the `expanderIcon` instead'),\n  };\n\n  static defaultProps = {\n    defaultExpanded: false,\n    expanderIcon: <FontIcon>keyboard_arrow_down</FontIcon>,\n    component: 'li',\n    saveLabel: 'Save',\n    cancelLabel: 'Cancel',\n    savePrimary: true,\n    tabIndex: 0,\n    closeOnSave: true,\n    closeOnCancel: true,\n    focused: false,\n    columnWidths: [],\n  };\n\n  static contextTypes = {\n    animateContent: PropTypes.bool,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      received: false,\n      twoLine: false,\n    };\n\n    if (typeof props.expanded === 'undefined') {\n      this.state.expanded = props.defaultExpanded;\n    }\n  }\n\n  componentDidMount() {\n    this._determineIfTwoLine();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (process.env.NODE_ENV === 'development' && !this.state.received) {\n      if (nextProps.columnWidths.length === 0) {\n        // Hopefully a nice warning about fixing the missing props injected from ExpansionList\n        /* eslint-disable no-console */\n        console.error(\n          'The `ExpansionPanel` component expects the `columnWidths` prop to be injected from the ' +\n          '`ExpansionList` component. It could be missing because:' +\n          '\\n - you have a wrapper component with extra functionality' +\n          '\\n - the `ExpansionPanel` is not a direct child of the `ExpansionList` component' +\n          '\\n\\nYou can fix this by making sure to pass `this.props.focused` and `this.props.columnWidths` ' +\n          'within your wrapper component and making the `ExpansionPanel` a direct child of `ExpansionList`.'\n        );\n      }\n\n      this.setState({ received: true });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.label === prevProps.label && this.props.secondaryLabel === prevProps.secondaryLabel) {\n      return;\n    }\n\n    this._determineIfTwoLine();\n  }\n\n  _isExpanded(props, state) {\n    return typeof props.expanded === 'undefined' ? state.expanded : props.expanded;\n  }\n\n  _determineIfTwoLine = () => {\n    let twoLine = false;\n    Array.prototype.slice.call(findDOMNode(this).querySelectorAll('.md-panel-column'))\n      .some(el => (twoLine = el.offsetHeight > SINGLE_LINE_HEIGHT));\n\n    this.setState({ twoLine });\n  };\n\n  _handleClick = () => {\n    const expanded = !this._isExpanded(this.props, this.state);\n    if (this.props.onExpandToggle) {\n      this.props.onExpandToggle(expanded);\n    }\n\n\n    if (typeof this.props.expanded === 'undefined') {\n      this.setState({ expanded });\n    }\n  };\n\n  _handleSave = (e) => {\n    const { onSave, onExpandToggle, closeOnSave } = this.props;\n    if (onSave) {\n      onSave(e);\n    }\n\n    if (closeOnSave) {\n      if (onExpandToggle) {\n        onExpandToggle(false);\n      }\n\n      if (typeof this.props.expanded === 'undefined') {\n        this.setState({ expanded: false });\n      }\n    }\n  };\n\n  _handleCancel = (e) => {\n    const { onCancel, onExpandToggle, closeOnCancel } = this.props;\n    if (onCancel) {\n      onCancel(e);\n    }\n\n    if (closeOnCancel) {\n      if (onExpandToggle) {\n        onExpandToggle(false);\n      }\n\n      if (typeof this.props.expanded === 'undefined') {\n        this.setState({ expanded: false });\n      }\n    }\n  };\n\n  render() {\n    const {\n      className,\n      label,\n      secondaryLabel,\n      expandedSecondaryLabel,\n      children,\n      focused,\n      columnWidths,\n      saveType,\n      saveLabel,\n      savePrimary,\n      saveSecondary,\n      saveProps,\n      cancelType,\n      cancelLabel,\n      cancelPrimary,\n      cancelSecondary,\n      cancelProps,\n      headerStyle,\n      headerClassName,\n      contentStyle,\n      contentClassName,\n      tabIndex,\n      overflown,\n      footer,\n      footerChildren,\n      footerStyle,\n      footerClassName,\n\n      // deprecated\n      expandIconChildren,\n      expandIconClassName,\n      /* eslint-disable no-unused-vars */\n      animateContent: propAnimateContent,\n      expanded: propExpanded,\n      expanderIcon: propExpanderIcon,\n      defaultExpanded,\n      closeOnSave,\n      closeOnCancel,\n      onSave,\n      onCancel,\n      onExpandToggle,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n    const { twoLine } = this.state;\n    const expanded = this._isExpanded(this.props, this.state);\n    const animateContent = getField(this.props, this.context, 'animateContent');\n\n    let columns = Children.map(expanded && expandedSecondaryLabel || secondaryLabel, (panelLabel, i) => (\n      <div\n        style={{ [`${overflown ? 'width' : 'minWidth'}`]: columnWidths[i + 1] }}\n        className={cn('md-panel-column', {\n          'md-panel-column--overflown': overflown,\n        }, themeColors({ text: true }))}\n      >\n        {panelLabel}\n      </div>\n    ));\n\n    if (!Array.isArray(columns)) {\n      columns = [columns];\n    }\n\n    columns.unshift((\n      <div\n        key=\"main-label\"\n        style={{ minWidth: columnWidths[0] }}\n        className={cn('md-panel-column', themeColors({ text: true }))}\n      >\n        {label}\n      </div>\n    ));\n\n    let expanderIcon = getDeprecatedIcon(expandIconClassName, expandIconChildren, this.props.expanderIcon);\n    expanderIcon = React.Children.only(expanderIcon);\n    expanderIcon = React.cloneElement(expanderIcon, {\n      className: getCollapserStyles({\n        flipped: expanded,\n      }, 'md-expansion-panel__collapser md-cell--right', expanderIcon.props.className),\n    });\n\n    return (\n      <Paper\n        {...props}\n        className={cn('md-expansion-panel', {\n          'md-expansion-panel--expanded': expanded,\n        }, className)}\n        aria-expanded={expanded}\n      >\n        <AccessibleFakeButton\n          onClick={this._handleClick}\n          style={headerStyle}\n          className={cn('md-panel-header', {\n            'md-panel-header--expanded': expanded || twoLine,\n            'md-panel-header--focused': focused,\n          }, headerClassName)}\n          tabIndex={tabIndex}\n        >\n          {columns}\n          {expanderIcon}\n        </AccessibleFakeButton>\n        <Collapse collapsed={!expanded} animate={animateContent}>\n          <PanelContent\n            style={contentStyle}\n            className={contentClassName}\n            footerStyle={footerStyle}\n            footerClassName={footerClassName}\n            onSave={this._handleSave}\n            onCancel={this._handleCancel}\n            saveType={saveType}\n            saveLabel={saveLabel}\n            savePrimary={savePrimary}\n            saveSecondary={saveSecondary}\n            saveProps={saveProps}\n            cancelType={cancelType}\n            cancelLabel={cancelLabel}\n            cancelPrimary={cancelPrimary}\n            cancelSecondary={cancelSecondary}\n            cancelProps={cancelProps}\n            footer={footer}\n            footerChildren={footerChildren}\n          >\n            {children}\n          </PanelContent>\n        </Collapse>\n      </Paper>\n    );\n  }\n}\n"]}