{"version":3,"sources":["../../src/js/Menus/DropdownMenu.js"],"names":["DropdownMenu","props","_handleClick","e","onVisibilityChange","children","visible","state","toggle","Children","only","onClick","setState","_handleClose","defaultVisible","id","listId","menuItems","propChildren","simplifiedMenu","propVisible","cloneElement","items","Array","isArray","map","Positions","HorizontalAnchors","VerticalAnchors","propTypes","oneOfType","number","string","style","object","className","listStyle","listClassName","listProps","listZDepth","listInline","bool","listHeightRestricted","isRequired","func","node","arrayOf","element","anchor","belowAnchor","fixedTo","position","cascading","cascadingZDepth","cascadingAnchor","fullWidth","block","centered","sameWidth","xThreshold","yThreshold","closeOnOutsideClick","transitionName","transitionEnterTimeout","transitionLeaveTimeout","repositionOnScroll","repositionOnResize","minLeft","minRight","minBottom","fillViewportWidth","fillViewportHeight","defaultProps"],"mappings":"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","file":"DropdownMenu.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport controlled from '../utils/PropTypes/controlled';\nimport mapToListParts from '../utils/mapToListParts';\nimport getField from '../utils/getField';\nimport anchorShape from '../Helpers/anchorShape';\nimport fixedToShape from '../Helpers/fixedToShape';\nimport positionShape from '../Helpers/positionShape';\nimport Menu from './Menu';\n\n/**\n * The `DropdownMenu` is just a simple wrapper to the `Menu` component. The main differences\n * is that the `toggle` component will now be the children and the list of items to display\n * will be the `menuItems` prop.\n *\n * The dropdown menu is mostly used to control the state of the menu and render a single element\n * as the toggle.\n */\nexport default class DropdownMenu extends PureComponent {\n  static Positions = Menu.Positions;\n  static HorizontalAnchors = Menu.HorizontalAnchors;\n  static VerticalAnchors = Menu.VerticalAnchors;\n  static propTypes = {\n    /**\n     * An id to use for the menu. This is required for accessibility.\n     *\n     * @see {@link Menus/Menu#id}\n     */\n    id: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional id to provide to the menu's list.\n     *\n     * @see {@link Menus/Menu#listId}\n     */\n    listId: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional style to apply to the menu.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the menu.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional style to apply to the list.\n     */\n    listStyle: PropTypes.object,\n\n    /**\n     * An optional class name to apply to the list.\n     */\n    listClassName: PropTypes.string,\n\n    /**\n     * Any additional props to provide to the list.\n     *\n     * @see {@link Menus/Menu#listProps}\n     */\n    listProps: PropTypes.object,\n\n    /**\n     * The z-depth to use for the list.\n     *\n     * @see {@link Menus/Menu/listZDepth}\n     */\n    listZDepth: PropTypes.number,\n\n    /**\n     * Boolean if the list should be displayed inline.\n     *\n     * @see {@link Lists/List#inline}\n     */\n    listInline: PropTypes.bool,\n\n    /**\n     * Boolean if the list's height should be restricted.\n     *\n     * @see {@link Menus/Menu#listHeightRestricted}\n     */\n    listHeightRestricted: PropTypes.bool,\n\n    /**\n     * Boolean if the menu's list is currently visible. If this is defined, it will\n     * require the `onVisibilityChange` function to be defined since it will become\n     * a controlled component.\n     */\n    visible: controlled(PropTypes.bool, 'onVisibilityChange', 'defaultVisible'),\n\n    /**\n     * Boolean if the menu's list should be visible by default.\n     */\n    defaultVisible: PropTypes.bool.isRequired,\n\n    /**\n     * An optional function to call when the button is clicked.\n     */\n    onClick: PropTypes.func,\n\n    /**\n     * An optional function to call when the visibility changes for the menu. The callback will\n     * include the next visibility state and the event that triggered the change.\n     *\n     * ```js\n     * onVisibilityChange(visible, event);\n     * ```\n     */\n    onVisibilityChange: PropTypes.func,\n\n    /**\n     * This is a 0 to many relationship of `ListItem` to display in the menu's `List`. If the type\n     * of the item is a number or string, it will be passed to the `ListItem` as the `primaryText`.\n     * If it is an object, it should be the shape of the `ListItem` props. If it is a node, it will\n     * just be rendered in the `List`.\n     *\n     * @see {@link Lists/ListItem}\n     * @see {@link Menus/Menu#children}\n     */\n    menuItems: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.object,\n      PropTypes.node,\n      PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n        PropTypes.object,\n        PropTypes.node,\n      ])),\n    ]),\n\n    /**\n     * @see {@link Menus/Menu#toggle}\n     */\n    children: PropTypes.element.isRequired,\n\n    /**\n     * The anchor position of the menu's list.\n     *\n     * @see {@link Helpers/Layover#anchor}\n     */\n    anchor: anchorShape,\n\n    /**\n     * This is the anchor to use when the `position` is set to `Autocomplete.Positions.BELOW`.\n     *\n     * @see {@link Helpers/Layover#belowAnchor}\n     */\n    belowAnchor: anchorShape,\n\n    /**\n     * This is how the menu's list is fixed to the toggle.\n     *\n     * @see {@link Menus/Menu#fixedTo}\n     */\n    fixedTo: fixedToShape,\n\n    /**\n     * This is the animation position for the menu's list.\n     *\n     * @see {@link Menus/Menu#position}\n     */\n    position: positionShape,\n\n    /**\n     * Boolean if the menu's list should gain the cascading styles.\n     *\n     * @see {@link Menus/Menu#cascading}\n     */\n    cascading: PropTypes.bool,\n\n    /**\n     * The zDepth to use for the lists that appear in cascading menus.\n     *\n     * @see {@link Menus/Menu#cascadingZDepth}\n     */\n    cascadingZDepth: PropTypes.number,\n\n    /**\n     * The anchor position for the cascading lists.\n     *\n     * @see {@link Menus/Menu#cascadingAnchor}\n     */\n    cascadingAnchor: anchorShape,\n\n    /**\n     * Boolean if the menu should display as a full width container. This will *not* update the button\n     * to be full width as well.\n     *\n     * @see {@link Menus/Menu#fullWidth}\n     */\n    fullWidth: PropTypes.bool,\n\n    /**\n     * Boolean if the menu's container should display as `block` instead of `inline-block`.\n     *\n     * @see {@link Menus/Menu#block}\n     */\n    block: PropTypes.bool,\n\n    /**\n     * Boolean if the list should appear centered related to the button.\n     *\n     * @see {@link Menus/Menu#centered}\n     */\n    centered: PropTypes.bool,\n\n    /**\n     * Boolean if the menu's list should be the same width as the button.\n     *\n     * @see {@link Menus/Menu#sameWidth}\n     */\n    sameWidth: PropTypes.bool,\n\n    /**\n     * @see {@link Menus/Menu#xThreshold}\n     */\n    xThreshold: PropTypes.number,\n\n    /**\n     * @see {@link Menus/Menu#yThreshold}\n     */\n    yThreshold: PropTypes.number,\n\n    /**\n     * Boolean if the menu's list should be closed when an element outside of the menu has been clicked.\n     *\n     * @see {@link Menus/Menu#closeOnOutsideClick}\n     */\n    closeOnOutsideClick: PropTypes.bool,\n\n    /**\n     * The transition name to use for the menu's list visibility changes.\n     *\n     * @see {@link Menus/Menu#transitionName}\n     */\n    transitionName: PropTypes.string,\n\n    /**\n     * The transition name to use when the menu's list gains visibility.\n     *\n     * @see {@link Menus/Menu#transitionEnterTimeout}\n     */\n    transitionEnterTimeout: PropTypes.number,\n\n    /**\n     * The transition timeout to use when the menu's list loses visibility.\n     *\n     * @see {@link Menus/Menu#transitionLeaveTimeout}\n     */\n    transitionLeaveTimeout: PropTypes.number,\n\n    /**\n     * Boolean if the menu should automatically try to reposition itself to stay within\n     * the viewport when the `fixedTo` element scrolls.\n     *\n     * @see {@link Helpers/Layover#repositionOnScroll}\n     */\n    repositionOnScroll: PropTypes.bool,\n\n    /**\n     * Boolean if the menu should automatically try to reposition itself to stay within\n     * the viewport when the window resizes.\n     *\n     * @see {@link Helpers/Layover#repositionOnResize}\n     */\n    repositionOnResize: PropTypes.bool,\n\n    /**\n     * Boolean if the menu logic should be simplified without any viewport logic and position\n     * based on the relative position of the menu. This will most like require some additional\n     * styles applied to the menu.\n     *\n     * @see {@link Helpers/Layover#simplified}\n     */\n    simplifiedMenu: PropTypes.bool,\n\n    /**\n     * @see {@link Helpers/Layover#minLeft}\n     */\n    minLeft: Menu.propTypes.minLeft,\n\n    /**\n     * @see {@link Helpers/Layover#minRight}\n     */\n    minRight: Menu.propTypes.minLeft,\n\n    /**\n     * @see {@link Helpers/Layover#minBottom}\n     */\n    minBottom: Menu.propTypes.minBottom,\n\n    /**\n     * @see {@link Helpers/Layover#fillViewportWidth}\n     */\n    fillViewportWidth: PropTypes.bool,\n\n    /**\n     * @see {@link Helpers/Layover#fillViewportHeight}\n     */\n    fillViewportHeight: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    defaultVisible: false,\n    repositionOnScroll: true,\n    repositionOnResize: false,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n    if (typeof props.visible === 'undefined') {\n      this.state.visible = props.defaultVisible;\n    }\n  }\n\n  _handleClick = (e) => {\n    const { onVisibilityChange, children } = this.props;\n    const visible = !getField(this.props, this.state, 'visible');\n    if (onVisibilityChange) {\n      onVisibilityChange(visible, e);\n    }\n\n    const toggle = React.Children.only(children);\n    if (toggle.props.onClick) {\n      toggle.props.onClick(e);\n    }\n\n    if (typeof this.props.visible === 'undefined') {\n      this.setState({ visible });\n    }\n  };\n\n  _handleClose = (e) => {\n    const { onVisibilityChange } = this.props;\n    const visible = false;\n    if (onVisibilityChange) {\n      onVisibilityChange(visible, e);\n    }\n\n    if (typeof this.props.visible === 'undefined') {\n      this.setState({ visible });\n    }\n  };\n\n  render() {\n    const {\n      id,\n      listId,\n      menuItems,\n      children: propChildren,\n      simplifiedMenu,\n      /* eslint-disable no-unused-vars */\n      visible: propVisible,\n      onVisibilityChange,\n      defaultVisible,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    const visible = getField(this.props, this.state, 'visible');\n\n    const children = React.Children.only(propChildren);\n    const toggle = React.cloneElement(children, {\n      id: children.props.id || `${id}-toggle`,\n      onClick: this._handleClick,\n    });\n\n    let items;\n    if (!Array.isArray(menuItems)) {\n      items = mapToListParts(menuItems);\n    } else {\n      items = menuItems.map(mapToListParts);\n    }\n\n    return (\n      <Menu\n        {...props}\n        simplified={simplifiedMenu}\n        id={id}\n        listId={listId}\n        toggle={toggle}\n        visible={visible}\n        onClose={this._handleClose}\n      >\n        {items}\n      </Menu>\n    );\n  }\n}\n"]}