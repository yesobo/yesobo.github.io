{"version":3,"sources":["../../src/js/DataTables/EditDialogColumn.js"],"names":["EditDialogColumn","props","state","visible","defaultVisible","value","defaultValue","cancelValue","actions","_makeActions","cellIndex","undefined","_column","_table","_fixedTo","columns","slice","call","parentNode","querySelectorAll","setState","indexOf","nextProps","okLabel","okPrimary","okSecondary","okProps","cancelLabel","cancelPrimary","cancelSecondary","cancelProps","rowId","context","style","className","layoverStyle","layoverClassName","dialogStyle","dialogClassName","dialogContentStyle","dialogContentClassName","dialogZDepth","textFieldStyle","textFieldClassName","inputClassName","large","title","inline","inlineIcon","maxLength","label","placeholder","header","anchor","belowAnchor","fixedTo","animationPosition","xThreshold","yThreshold","centered","sameWidth","repositionOnScroll","repositionOnResize","transitionName","transitionEnterTimeout","transitionLeaveTimeout","tooltipLabel","tooltipDelay","tooltipPosition","onClick","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","onMouseEnter","onMouseOver","onMouseLeave","onTouchMove","simplifiedDialog","minLeft","minRight","minBottom","noIcon","inlineIconChildren","inlineIconClassName","propId","id","propDialogId","dialogId","propCellIndex","onOkClick","onCancelClick","okOnOutsideClick","adjusted","scrollIntoView","scrollIntoViewPadding","visibleOnFocus","scrollThreshold","enforceMinWidth","transitionDuration","inlineEditIcon","icon","cloneElement","key","numeric","type","field","_setField","hint","_handleFocus","_handleChange","_handleKeyDown","children","dialogLabel","_handleOpen","_handleClose","VerticalAnchors","HorizontalAnchors","Positions","propTypes","oneOfType","number","string","object","isRequired","inputStyle","disabled","bool","element","onChange","func","onFocus","onKeyDown","node","onOutsideClick","closeOnOutsideClick","oneOf","defaultProps","BELOW","contextTypes","_field","primary","secondary","_handleCancel","_handleOk","e","_skipNextOpen","vp","scrollLeft","offsetLeft","target","which","keyCode","shiftKey"],"mappings":"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","file":"EditDialogColumn.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\n\nimport { ENTER, ESC, TAB } from '../constants/keyCodes';\nimport getField from '../utils/getField';\nimport themeColors from '../utils/themeColors';\nimport viewport from '../utils/Positioning/viewport';\nimport controlled from '../utils/PropTypes/controlled';\nimport anchorShape from '../Helpers/anchorShape';\nimport fixedToShape from '../Helpers/fixedToShape';\nimport positionShape from '../Helpers/positionShape';\nimport Layover from '../Helpers/Layover';\nimport FontIcon from '../FontIcons/FontIcon';\nimport getDeprecatedIcon from '../FontIcons/getDeprecatedIcon';\nimport TextField from '../TextFields/TextField';\nimport TableColumn from './TableColumn';\nimport EditDialog from './EditDialog';\nimport findTable from './findTable';\nimport findFixedTo from './findFixedTo';\n\n/**\n * The `EditDialogColumn` is used when there should be used when a table column's value\n * can be changed. It can either be displayed as a dialog or inline.\n *\n * All props that are not documented but provided will be passed on to the `TextField`\n * component.\n */\nexport default class EditDialogColumn extends PureComponent {\n  static VerticalAnchors = Layover.VerticalAnchors;\n  static HorizontalAnchors = Layover.HorizontalAnchors;\n  static Positions = Layover.Positions;\n\n  static propTypes = {\n    /**\n     * An optional id to use for the text field in the column. If this is omitted,\n     * the id will be `${dialogId}-field`.\n     *\n     * @see {@link #dialogId}\n     */\n    id: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional id to use for the dialog that appears in the column. If this is omitted,\n     * the id will be `${rowId}-${cellIndex}-edit-dialog-field`.\n     */\n    dialogId: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * The optional style to apply to the edit dialog's column.\n     */\n    style: PropTypes.object,\n\n    /**\n     * The optional className to apply to the edit dialog's column.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional style to apply to the dialog's surrounding `Layover` component.\n     */\n    layoverStyle: PropTypes.object,\n\n    /**\n     * An optional className to the dialog's surrounding `Layover` component.\n     */\n    layoverClassName: PropTypes.string,\n\n    /**\n     * The optional style to apply to the edit dialog.\n     */\n    dialogStyle: PropTypes.object,\n\n    /**\n     * The optional className to apply to the edit dialog.\n     */\n    dialogClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the dialog's content area. This is the area\n     * that holds the text field.\n     */\n    dialogContentStyle: PropTypes.object,\n\n    /**\n     * An optional class name to apply to the dialog's content area. This is the area\n     * that holds the text field.\n     */\n    dialogContentClassName: PropTypes.string,\n\n    /**\n     * The zDepth to apply to the dialog when not inline.\n     *\n     * @see {@link Papers/Paper#zDepth}\n     */\n    dialogZDepth: PropTypes.number.isRequired,\n\n    /**\n     * An optional style to apply to the text field.\n     */\n    textFieldStyle: PropTypes.object,\n\n    /**\n     * An optional class name to apply to the text field.\n     */\n    textFieldClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the text field's input.\n     */\n    inputStyle: PropTypes.object,\n\n    /**\n     * An optional class name to apply to the text field's input.\n     */\n    inputClassName: PropTypes.string,\n\n    /**\n     * Boolean if the edit dialog is currently disabled.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * Boolean if the text field should be editable inline instead of in a dialog.\n     *\n     * @see {@link #inlineIcon}\n     */\n    inline: PropTypes.bool,\n\n    /**\n     * An optional icon to set for the inline edit dialog column. Setting this prop to null\n     * will not render an icon.\n     */\n    inlineIcon: PropTypes.element,\n\n    /**\n     * The default value to use for the text field.\n     */\n    defaultValue: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]).isRequired,\n\n    /**\n     * A value to use for the edit dialog text field. This will make the component controlled\n     * so you will need to provide an `onChange` function.\n     */\n    value: controlled(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]), 'onChange', 'defaultValue'),\n\n    /**\n     * An optional function to call when the text field's value has changed. This is required\n     * if the `value` prop has been defined.\n     *\n     * @see {@link TextFields/TextField#onChange}\n     */\n    onChange: PropTypes.func,\n\n    /**\n     * An optional function to call when the text field gains focus.\n     */\n    onFocus: PropTypes.func,\n\n    /**\n     * An optional function to call when the keydown event is triggered on the text field.\n     */\n    onKeyDown: PropTypes.func,\n\n    /**\n     * An optional label for the text field. When displaying an `inline` edit dialog column,\n     * the `placeholder` prop should be used instead. This is because the text field changes\n     * to the `block` type when `inline`.\n     *\n     * @see {@link #inline}\n     * @see {@link #placeholder}\n     * @see {@link TextFields/TextField#block}\n     */\n    label: PropTypes.node,\n\n    /**\n     * An optional placeholder for the text field.\n     */\n    placeholder: PropTypes.string,\n\n    /**\n     * Boolean if the edit dialog should become a large dialog. When the dialog is large,\n     * the `title` prop is required.\n     *\n     * A large dialog has a Title followed by the text field, and then a cancel and ok action\n     * buttons below.\n     */\n    large: PropTypes.bool,\n\n    /**\n     * The title to use for the large edit dialog. This prop is required if the `large` prop\n     * is enabled.\n     */\n    title: PropTypes.node,\n\n    /**\n     * An optional `maxLength` to apply to the text field.\n     *\n     * @see {@link TextFields/TextField#maxLength}\n     */\n    maxLength: PropTypes.number,\n\n    /**\n     * An optional function to call when the \"Ok\" button has been clicked, the user presses enter\n     * on * the text field or when the `okOnOutsideClick` prop has been enabled and the user clicks\n     * somewhere on the page.\n     *\n     * The callback will include the current value and the click or keypress event.\n     * ```js\n     * onOkClick(value, event)\n     * ```\n     *\n     * @see {@link #large}\n     */\n    onOkClick: PropTypes.func,\n\n    /**\n     * The label to use for the \"Ok\" button in large dialogs.\n     *\n     * @see {@link #large}\n     */\n    okLabel: PropTypes.node.isRequired,\n\n    /**\n     * Boolean if the \"Ok\" button in large dialogs should be styled with the primary color.\n     * To get a `default` styled button, set both `okPrimary` and `okSecondary` (or omit `okSecondary`)\n     * to `false`.\n     *\n     * @see {@link #large}\n     * @see {@link #okSecondary}\n     */\n    okPrimary: PropTypes.bool,\n\n    /**\n     * Boolean if the \"Ok\" button in large dialogs should be styled with the secondary color.\n     *\n     * @see {@link #large}\n     * @see {@link #okPrimary}\n     */\n    okSecondary: PropTypes.bool,\n\n    /**\n     * Any additional props to apply to the \"Ok\" button. This will override any of the other\n     * button props.\n     *\n     * @see {@link #okLabel}\n     * @see {@link #okPrimary}\n     * @see {@link #okSecondary}\n     */\n    okProps: PropTypes.object,\n\n    /**\n     * An optional function to call when the \"Cancel\" button has been clicked in large edit dialogs.\n     * The callback will include the text field's value before any edits occurred and the click event.\n     *\n     * ```js\n     * onCancelClick(previousValue, event)\n     * ```\n     *\n     * @see {@link #large}\n     */\n    onCancelClick: PropTypes.func,\n\n    /**\n     * The label to give to the \"Cancel\" button in large edit dialogs.\n     *\n     * @see {@link #large}\n     */\n    cancelLabel: PropTypes.node.isRequired,\n\n    /**\n     * Boolean if the \"Cancel\" button in large dialogs should be styled with the primary color.\n     * To get a `default` styled button, set both `cancelPrimary` and `cancelSecondary` (or\n     * omit `cancelSecondary`) to `false`.\n     *\n     * @see {@link #large}\n     * @see {@link #cancelSecondary}\n     */\n    cancelPrimary: PropTypes.bool,\n\n    /**\n     * Boolean if the \"Cancel\" button in large dialogs should be styled with the secondary color.\n     *\n     * @see {@link #large}\n     * @see {@link #cancelPrimary}\n     */\n    cancelSecondary: PropTypes.bool,\n\n    /**\n     * Any additional props to apply to the \"Cancel\" button. This will override any of the other\n     * button props.\n     *\n     * @see {@link #cancelLabel}\n     * @see {@link #cancelPrimary}\n     * @see {@link #cancelSecondary}\n     */\n    cancelProps: PropTypes.object,\n\n    /**\n     * Boolean if the action for clicking somewhere on on the page while the dialog is open\n     * saves the changes or cancels to the previous value before opening the dialog.\n     *\n     * @see {@link #onOkClick}\n     * @see {@link #onCancelClick}\n     */\n    okOnOutsideClick: PropTypes.bool,\n\n    /**\n     * An optional function to call when a user clicks out of the text field.\n     */\n    onOutsideClick: PropTypes.func,\n\n    /**\n     * Boolean if the edit dialog should be closed if the user clicks somewhere else on the page\n     * while the dialog is open.\n     */\n    closeOnOutsideClick: PropTypes.bool,\n\n    /**\n     * Boolean if the Edit Dialog should be visible by default. This only applies when the `inline` prop\n     * is not enabled.\n     */\n    defaultVisible: PropTypes.bool,\n\n    /**\n     * Boolean if the edit dialog should automatically open when the text field is focused for non-inline\n     * dialogs. This is enabled by default for backwards compatibility.\n     */\n    visibleOnFocus: PropTypes.bool,\n\n    /**\n     * The type for the text field in the edit dialog.\n     *\n     * @see {@link TextFields/TextField#type}\n     */\n    type: PropTypes.string,\n\n    /**\n     * This is how the dialog gets \"anchored\" to the table column.\n     *\n     * @see {@link Helpers/Layover#anchor}\n     */\n    anchor: anchorShape,\n\n    /**\n     * This is the anchor to use when the `position` is set to `Autocomplete.Positions.BELOW`.\n     *\n     * @see {@link Helpers/Layover#belowAnchor}\n     */\n    belowAnchor: anchorShape,\n\n    /**\n     * This is the animation position to use for the dialog.\n     *\n     * @see {@link Helpers/Layover#animationPosition}\n     */\n    animationPosition: positionShape,\n\n    /**\n     * This is how the dialog should be fixed within the table. When this is omitted, it will\n     * automatically use the responsive table as the fixture so that the dialog will close/adjust itself\n     * to the scrolling of the table.\n     *\n     * @see {@link Helpers/Layover#fixedTo}\n     */\n    fixedTo: fixedToShape,\n\n    /**\n     * @see {@link Helpers/Layover#xThreshold}\n     */\n    xThreshold: PropTypes.number,\n\n    /**\n     * @see {@link Helpers/Layover#yThreshold}\n     */\n    yThreshold: PropTypes.number,\n\n    /**\n     * @see {@link Helpers/Layover#centered}\n     */\n    centered: PropTypes.bool,\n\n    /**\n     * @see {@link Helpers/Layover#sameWidth}\n     */\n    sameWidth: PropTypes.bool,\n\n    /**\n     * @see {@link Helpers/Layover#transitionName}\n     */\n    transitionName: PropTypes.string,\n\n    /**\n     * @see {@link Helpers/Layover#transitionEnterTimeout}\n     */\n    transitionEnterTimeout: PropTypes.number,\n\n    /**\n     * @see {@link Helpers/Layover#transitionLeaveTimeout}\n     */\n    transitionLeaveTimeout: PropTypes.number,\n\n    /**\n     * The optional tooltip to render on hover.\n     */\n    tooltipLabel: PropTypes.node,\n\n    /**\n     * An optional delay to apply to the tooltip before it appears.\n     */\n    tooltipDelay: PropTypes.number,\n\n    /**\n     * The position of the tooltip.\n     */\n    tooltipPosition: PropTypes.oneOf(['top', 'right', 'bottom', 'left']),\n\n    /**\n     * Boolean if the menu should automatically try to reposition itself to stay within\n     * the viewport when the `fixedTo` element scrolls.\n     *\n     * @see {@link Helpers/Layover#repositionOnScroll}\n     */\n    repositionOnScroll: PropTypes.bool,\n\n    /**\n     * Boolean if the menu should automatically try to reposition itself to stay within\n     * the viewport when the window resizes.\n     *\n     * @see {@link Helpers/Layover#repositionOnResize}\n     */\n    repositionOnResize: PropTypes.bool,\n\n    /**\n     * Boolean if the dialog logic should be simplified without any viewport logic and position\n     * based on the relative position of the menu. This will most like require some additional\n     * styles applied to the dialog.\n     *\n     * @see {@link Helpers/Layover#simplified}\n     */\n    simplifiedDialog: PropTypes.bool,\n\n    /**\n     * @see {@link Helpers/Layover#minLeft}\n     */\n    minLeft: Layover.propTypes.minLeft,\n\n    /**\n     * @see {@link Helpers/Layover#minRight}\n     */\n    minRight: Layover.propTypes.minLeft,\n\n    /**\n     * @see {@link Helpers/Layover#minBottom}\n     */\n    minBottom: Layover.propTypes.minBottom,\n\n    /**\n     * Boolean if the edit dialog should attempt to scroll into view if the full\n     * dialog can not be displayed in the viewport when it was toggled open.\n     *\n     * @see {@link #scrollIntoViewPadding}\n     */\n    scrollIntoView: PropTypes.bool,\n\n    /**\n     * The amount of padding that should be applied when the cell is scrolled into view.\n     * This will be applied to the left of the cell.\n     */\n    scrollIntoViewPadding: PropTypes.number,\n\n    /**\n     * An optional function to call when the `click` event is triggered in the column.\n     */\n    onClick: PropTypes.func,\n\n    /**\n     * An optional function to call when the `mousedown` event is triggered in the column.\n     */\n    onMouseDown: PropTypes.func,\n\n    /**\n     * An optional function to call when the `mouseup` event is triggered in the column.\n     */\n    onMouseUp: PropTypes.func,\n\n    /**\n     * An optional function to call when the `touchstart` event is triggered in the column.\n     */\n    onTouchStart: PropTypes.func,\n\n    /**\n     * An optional function to call when the `touchend` event is triggered in the column.\n     */\n    onTouchEnd: PropTypes.func,\n\n    /**\n     * An optional function to call when the `mouseenter` event is triggered in the column.\n     */\n    onMouseEnter: PropTypes.func,\n\n    /**\n     * An optional function to call when the `mouseover` event is triggered in the column.\n     */\n    onMouseOver: PropTypes.func,\n\n    /**\n     * An optional function to call when the `mouseleave` event is triggered in the column.\n     */\n    onMouseLeave: PropTypes.func,\n\n    /**\n     * An optional function to call when the `touchmove` event is triggered in the column.\n     */\n    onTouchMove: PropTypes.func,\n\n    /**\n     * This is injected by the `TableRow` component.\n     * @access private\n     */\n    header: PropTypes.bool,\n\n    /**\n     * This is injected by the `TableRow` component and used to help generate the unique id for the text\n     * field.\n     *\n     * @access private\n     */\n    cellIndex: PropTypes.number,\n\n    /**\n     * @access private\n     */\n    adjusted: PropTypes.bool,\n\n    inlineIconChildren: deprecated(PropTypes.node, 'Use the `inlineIcon` prop instead'),\n    inlineIconClassName: deprecated(PropTypes.string, 'Use the `inlineIcon` prop instead'),\n    noIcon: deprecated(PropTypes.bool, 'Set the `inlineIcon` prop to `null` instead'),\n    enforceMinWidth: deprecated(\n      PropTypes.bool,\n      'The min width will always be enforced based on the `$md-edit-dialog-min-width` Sass variable.'\n    ),\n    scrollThreshold: deprecated(\n      PropTypes.number,\n      'Use `xThreshold` and `yThreshold` instead'\n    ),\n    transitionDuration: deprecated(\n      PropTypes.number,\n      'use `transitionEnterTimeout` and `transitionLeaveTimeout` instead'\n    ),\n  };\n\n  static defaultProps = {\n    type: 'text',\n    defaultValue: '',\n    okOnOutsideClick: true,\n    inlineIcon: <FontIcon>edit</FontIcon>,\n    okLabel: 'Save',\n    okPrimary: true,\n    cancelLabel: 'Cancel',\n    cancelPrimary: true,\n    animationPosition: EditDialogColumn.Positions.BELOW,\n    dialogZDepth: 1,\n    repositionOnScroll: true,\n    repositionOnResize: false,\n    scrollIntoView: true,\n    scrollIntoViewPadding: 16,\n    minLeft: 0,\n    minRight: 0,\n    minBottom: 0,\n    visibleOnFocus: true,\n    defaultVisible: false,\n  };\n\n  static contextTypes = {\n    rowId: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      visible: props.defaultVisible,\n      value: props.defaultValue,\n      cancelValue: props.defaultValue,\n      actions: this._makeActions(props),\n      cellIndex: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this._column = findDOMNode(this);\n    this._table = findTable(this._column);\n    this._fixedTo = findFixedTo(this._table);\n\n    // If a developer creates their own component to wrap the EditDialogColumn, the cellIndex prop\n    // might not be defined if they don't pass ...props\n    const { cellIndex } = this.props;\n    if (!cellIndex && cellIndex !== 0) {\n      const columns = [].slice.call(this._column.parentNode.querySelectorAll('th,td'));\n      this.setState({ cellIndex: columns.indexOf(this._column) }); // eslint-disable-line react/no-did-mount-set-state\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {\n      okLabel,\n      okPrimary,\n      okSecondary,\n      okProps,\n      cancelLabel,\n      cancelPrimary,\n      cancelSecondary,\n      cancelProps,\n    } = this.props;\n\n    if (okLabel !== nextProps.okLabel || okPrimary !== nextProps.okPrimary\n      || okSecondary !== nextProps.okSecondary || cancelLabel !== nextProps.cancelLabel\n      || cancelPrimary !== nextProps.cancelPrimary || cancelSecondary !== nextProps.cancelSecondary\n      || okProps !== nextProps.okProps || cancelProps !== nextProps.cancelProps\n    ) {\n      this.setState({ actions: this._makeActions(nextProps) });\n    }\n  }\n\n  _setField = (field) => {\n    this._field = field;\n  };\n\n  _makeActions = (props) => {\n    const {\n      okLabel,\n      okPrimary,\n      okSecondary,\n      okProps,\n      cancelLabel,\n      cancelPrimary,\n      cancelSecondary,\n      cancelProps,\n    } = props;\n\n    return [{\n      key: 'cancel',\n      children: cancelLabel,\n      primary: cancelPrimary && !cancelSecondary,\n      secondary: cancelSecondary,\n      ...cancelProps,\n      onClick: this._handleCancel,\n    }, {\n      key: 'ok',\n      children: okLabel,\n      primary: okPrimary && !okSecondary,\n      secondary: okSecondary,\n      ...okProps,\n      onClick: this._handleOk,\n    }];\n  };\n\n  _handleOpen = (e) => {\n    if (this._skipNextOpen) {\n      this._skipNextOpen = false;\n    } else if (this.props.visibleOnFocus || !e || e.type !== 'focus') {\n      const { scrollIntoView, scrollIntoViewPadding } = this.props;\n      if (scrollIntoView) {\n        const vp = viewport(this._column);\n        if (vp !== true && this._table && this._column && !this.props.inline) {\n          this._table.scrollLeft = this._column.offsetLeft - scrollIntoViewPadding;\n        }\n      }\n\n      this.setState({ visible: true, cancelValue: getField(this.props, this.state, 'value') });\n    }\n  };\n\n  _handleClose = (e) => {\n    const { onOutsideClick, okOnOutsideClick } = this.props;\n    if (onOutsideClick) {\n      onOutsideClick(e);\n    }\n\n    if (okOnOutsideClick) {\n      this._handleOk(e);\n    } else {\n      this._handleCancel(e);\n    }\n  };\n\n  _handleChange = (value, e) => {\n    if (this.props.onChange) {\n      this.props.onChange(value, e);\n    }\n\n    if (typeof this.props.value === 'undefined') {\n      this.setState({ value });\n    }\n  };\n\n  _handleFocus = (e) => {\n    if (this.props.onFocus) {\n      this.props.onFocus(e);\n    }\n\n    if (this.props.inline) {\n      this.setState({ cancelValue: e.target.value });\n    }\n  };\n\n  _handleKeyDown = (e) => {\n    const { onKeyDown, okOnOutsideClick, large } = this.props;\n    if (onKeyDown) {\n      onKeyDown(e);\n    }\n\n    const key = e.which || e.keyCode;\n    if (key === ENTER) {\n      this._handleOk(e);\n    } else if (key === ESC) {\n      this._handleCancel(e);\n    } else if (key === TAB && !large) {\n      // infinitely opens otherwise...\n      this._skipNextOpen = e.shiftKey;\n\n      if (okOnOutsideClick) {\n        this._handleOk(e);\n      } else {\n        this._handleCancel(e);\n      }\n    }\n  };\n\n  _handleOk = (e) => {\n    if (this.props.onOkClick) {\n      this.props.onOkClick(getField(this.props, this.state, 'value'), e);\n    }\n\n    this.setState({ visible: false });\n  };\n\n  _handleCancel = (e) => {\n    const value = this.state.cancelValue;\n    if (this.props.onCancelClick) {\n      this.props.onCancelClick(value, e);\n    }\n\n    const state = { visible: false };\n    if (typeof this.props.value === 'undefined') {\n      state.value = value;\n    }\n\n    this.setState(state);\n  };\n\n  render() {\n    const { rowId } = this.context;\n    const {\n      style,\n      className,\n      layoverStyle,\n      layoverClassName,\n      dialogStyle,\n      dialogClassName,\n      dialogContentStyle,\n      dialogContentClassName,\n      dialogZDepth,\n      textFieldStyle,\n      textFieldClassName,\n      inputClassName,\n      large,\n      title,\n      inline,\n      inlineIcon,\n      maxLength,\n      label,\n      placeholder,\n      header,\n      anchor,\n      belowAnchor,\n      fixedTo,\n      animationPosition,\n      xThreshold,\n      yThreshold,\n      centered,\n      sameWidth,\n      repositionOnScroll,\n      repositionOnResize,\n      transitionName,\n      transitionEnterTimeout,\n      transitionLeaveTimeout,\n      tooltipLabel,\n      tooltipDelay,\n      tooltipPosition,\n      onClick,\n      onMouseDown,\n      onMouseUp,\n      onTouchStart,\n      onTouchEnd,\n      onMouseEnter,\n      onMouseOver,\n      onMouseLeave,\n      onTouchMove,\n      simplifiedDialog,\n      minLeft,\n      minRight,\n      minBottom,\n\n      // deprecated\n      noIcon,\n      inlineIconChildren,\n      inlineIconClassName,\n      /* eslint-disable no-unused-vars */\n      id: propId,\n      dialogId: propDialogId,\n      cellIndex: propCellIndex,\n      onOkClick,\n      okLabel,\n      okPrimary,\n      okSecondary,\n      okProps,\n      onCancelClick,\n      cancelLabel,\n      cancelPrimary,\n      cancelSecondary,\n      cancelProps,\n      okOnOutsideClick,\n      defaultValue,\n      adjusted,\n      scrollIntoView,\n      scrollIntoViewPadding,\n      defaultVisible,\n      visibleOnFocus,\n\n      // deprecated\n      scrollThreshold,\n      enforceMinWidth,\n      transitionDuration,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n    const { visible, actions } = this.state;\n    const value = getField(this.props, this.state, 'value');\n    const cellIndex = getField(this.props, this.state, 'cellIndex');\n\n    let { id, dialogId } = this.props;\n    if (!dialogId) {\n      dialogId = `${id || `${rowId}-${cellIndex}`}-edit-dialog`;\n    }\n\n    if (!id) {\n      id = `${dialogId}-field`;\n    }\n\n    let inlineEditIcon;\n    if (inline && !noIcon) {\n      const icon = getDeprecatedIcon(inlineIconClassName, inlineIconChildren, inlineIcon);\n      if (icon) {\n        inlineEditIcon = React.cloneElement(icon, { key: 'edit-icon' });\n      }\n    }\n\n    const numeric = props.type === 'number';\n    const field = (\n      <TextField\n        {...props}\n        ref={this._setField}\n        style={textFieldStyle}\n        className={cn({ 'md-edit-dialog__blocked-field': inline }, textFieldClassName)}\n        inputClassName={cn({\n          'md-edit-dialog__header': header && inline,\n          'md-text-right': numeric,\n        }, themeColors({ hint: header && inline }), inputClassName)}\n        id={id}\n        label={label}\n        placeholder={placeholder}\n        value={value}\n        onFocus={this._handleFocus}\n        onChange={this._handleChange}\n        onKeyDown={this._handleKeyDown}\n        block={inline}\n        maxLength={visible ? maxLength : null}\n        rightIcon={inlineEditIcon}\n      />\n    );\n\n    let children;\n    if (inline) {\n      children = field;\n    } else {\n      const dialogLabel = value || value === 0 ? value : placeholder || label;\n      children = (\n        <EditDialog\n          style={layoverStyle}\n          className={layoverClassName}\n          dialogStyle={dialogStyle}\n          dialogClassName={dialogClassName}\n          dialogContentStyle={dialogContentStyle}\n          dialogContentClassName={dialogContentClassName}\n          id={dialogId}\n          textFieldId={id}\n          visible={visible}\n          onOpen={this._handleOpen}\n          onClose={this._handleClose}\n          label={dialogLabel}\n          actions={actions}\n          large={large}\n          title={title}\n          header={header}\n          placeholder={dialogLabel === placeholder || dialogLabel === label}\n          simplified={simplifiedDialog}\n          anchor={anchor}\n          belowAnchor={belowAnchor}\n          animationPosition={animationPosition}\n          xThreshold={xThreshold}\n          yThreshold={yThreshold}\n          centered={centered}\n          sameWidth={sameWidth}\n          minLeft={minLeft}\n          minRight={minRight}\n          minBottom={minBottom}\n          fixedTo={typeof fixedTo !== 'undefined' ? fixedTo : this._fixedTo}\n          dialogZDepth={dialogZDepth}\n          repositionOnScroll={repositionOnScroll}\n          repositionOnResize={repositionOnResize}\n          transitionName={transitionName}\n          transitionEnterTimeout={transitionEnterTimeout}\n          transitionLeaveTimeout={transitionLeaveTimeout}\n        >\n          {field}\n        </EditDialog>\n      );\n    }\n\n    return (\n      <TableColumn\n        style={style}\n        numeric={numeric}\n        className={cn('md-edit-dialog-column', className)}\n        header={header}\n        adjusted={false}\n        tooltipLabel={tooltipLabel}\n        tooltipDelay={tooltipDelay}\n        tooltipPosition={tooltipPosition}\n        onClick={onClick}\n        onMouseDown={onMouseDown}\n        onMouseUp={onMouseUp}\n        onTouchStart={onTouchStart}\n        onTouchMove={onTouchMove}\n        onMouseEnter={onMouseEnter}\n        onMouseOver={onMouseOver}\n        onMouseLeave={onMouseLeave}\n        onTouchEnd={onTouchEnd}\n      >\n        {children}\n      </TableColumn>\n    );\n  }\n}\n"]}