{"version":3,"sources":["../../src/js/DataTables/TableColumn.js"],"names":["CELL_SCOPE","header","scope","noop","TableColumn","props","className","fixedStyle","fixedClassName","numeric","children","sorted","sortIcon","tooltip","selectColumnHeader","adjusted","grow","sortIconBefore","propPlain","plain","propScope","cellIndex","sortIconChildren","sortIconClassName","sortable","context","Component","displayedChildren","ariaSort","icon","Children","only","cloneElement","flipped","fixedHeader","fixedFooter","footer","fixed","baseClassNames","text","hint","mergedClassNames","propTypes","style","object","string","node","bool","element","isRequired","tooltipLabel","tooltipDelay","number","tooltipPosition","oneOf","defaultProps","contextTypes"],"mappings":"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","file":"TableColumn.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\n\nimport themeColors from '../utils/themeColors';\nimport getCollapserStyles from '../utils/getCollapserStyles';\nimport getField from '../utils/getField';\nimport injectTooltip from '../Tooltips/injectTooltip';\nimport FontIcon from '../FontIcons/FontIcon';\nimport getDeprecatedIcon from '../FontIcons/getDeprecatedIcon';\nimport IconSeparator from '../Helpers/IconSeparator';\n\nconst CELL_SCOPE = {\n  header: {\n    scope: 'col',\n  },\n  noop: {},\n};\n\n/**\n * A column in a table. This is either the `th` or `td` component.\n */\nclass TableColumn extends PureComponent {\n  static propTypes = {\n    /**\n     * An optional style to apply.\n     */\n    style: PropTypes.object,\n\n    /**\n     * The optional className for the table column\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional style to apply to the surrounding div when the DataTable has been\n     * set to include a fixed header or a fixed footer.\n     */\n    fixedStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the surrounding div when the DataTable has been\n     * set to include a fixed header or a fixed footer.\n     */\n    fixedClassName: PropTypes.string,\n\n    /**\n     * The children to display in the column.\n     */\n    children: PropTypes.node,\n\n    /**\n     * Boolean if the column is currently sorted. If this prop is not `undefined`,\n     * it will add the sort icon unto this column. You will also need to use the\n     * `onClick` function to toggle the `sorted` prop as well as handling the sorting\n     * of data.\n     *\n     * This value should really only be set in the `TableHeader` component.\n     */\n    sorted: PropTypes.bool,\n\n    /**\n     * The icon to show when a column is sortable.\n     */\n    sortIcon: PropTypes.element,\n\n    /**\n     * Boolean if the sortIcon should appear before the text in the column.\n     */\n    sortIconBefore: PropTypes.bool,\n\n    /**\n     * A boolean if the column has numeric data. It will right-align the data.\n     */\n    numeric: PropTypes.bool,\n\n    /**\n     * Boolean if the table column should gain the `.md-data-table--adjusted` class name. By default,\n     * every column will gain this class name unless it is an `EditDialogColumn`, a `SelectFieldColumn`,\n     * or the `grow` prop is enabled.\n     */\n    adjusted: PropTypes.bool,\n\n    /**\n     * Boolean if the column should expand to fill any remaining width in the container. There should\n     * really only be one column with the `grow` prop enabled. In addition, it should really only be\n     * applied to one of the columns in the TableHeader.\n     */\n    grow: PropTypes.bool,\n\n    /**\n     * Boolean if this column is the `th` for a column of `SelectFieldColumn`. This will apply\n     * additional styling to the column to position with the select field.\n     */\n    selectColumnHeader: PropTypes.bool,\n\n    /**\n     * Boolean if this is a `th` component. This value **should** be set\n     * automatically for you if it is in the `TableHeader` component.\n     */\n    header: PropTypes.bool.isRequired,\n\n    /**\n     * The optional tooltip to render on hover.\n     */\n    tooltipLabel: PropTypes.node,\n\n    /**\n     * An optional delay to apply to the tooltip before it appears.\n     */\n    tooltipDelay: PropTypes.number,\n\n    /**\n     * The position of the tooltip.\n     */\n    tooltipPosition: PropTypes.oneOf(['top', 'right', 'bottom', 'left']),\n\n    /**\n     * The injected tooltip.\n     * @access private\n     */\n    tooltip: PropTypes.node,\n\n    /**\n     * Boolean if the `TableColumn` should gain the `plain` styles. This means that the text\n     * in the column can wrap and there is no height limit enforced with some additional padding.\n     */\n    plain: PropTypes.bool,\n\n    /**\n     * An optional scope to apply to the table column. If omitted, the scope will be set to\n     * `'col'` if inside of the `TableHeader` component. This is really only needed for\n     * header columns.\n     */\n    scope: PropTypes.oneOf(['row', 'col']),\n\n    /**\n     * This is injected by the `TableRow` component to help with generating ids\n     * @access private\n     */\n    cellIndex: PropTypes.number,\n    sortIconChildren: deprecated(PropTypes.node, 'Use the `sortIcon` prop instead'),\n    sortIconClassName: deprecated(PropTypes.string, 'Use the `sortIcon` prop instead'),\n  };\n\n  static defaultProps = {\n    header: false,\n    adjusted: true,\n    sortIcon: <FontIcon>arrow_upward</FontIcon>,\n    sortIconBefore: true,\n  };\n\n  static contextTypes = {\n    plain: PropTypes.bool,\n    footer: PropTypes.bool,\n    fixedHeader: PropTypes.bool,\n    fixedFooter: PropTypes.bool,\n  };\n\n  render() {\n    const {\n      className,\n      fixedStyle,\n      fixedClassName,\n      numeric,\n      header,\n      children,\n      sorted,\n      sortIcon,\n      tooltip,\n      selectColumnHeader,\n      adjusted,\n      grow,\n      sortIconBefore,\n      /* eslint-disable no-unused-vars */\n      plain: propPlain,\n      scope: propScope,\n      cellIndex,\n\n      // deprecated\n      sortIconChildren,\n      sortIconClassName,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    const sortable = typeof sorted === 'boolean';\n    const plain = getField(this.props, this.context, 'plain');\n    const Component = header ? 'th' : 'td';\n    const scope = getField(this.props, CELL_SCOPE[header ? 'header' : 'noop'], 'scope');\n\n    let displayedChildren = children;\n    let ariaSort;\n    if (sortable) {\n      ariaSort = sorted ? 'ascending' : 'descending';\n      const icon = React.Children.only(getDeprecatedIcon(sortIconClassName, sortIconChildren, sortIcon));\n      displayedChildren = (\n        <IconSeparator label={children} iconBefore={sortIconBefore}>\n          {React.cloneElement(icon, { className: getCollapserStyles({ flipped: !sorted }, icon.props.className) })}\n        </IconSeparator>\n      );\n    }\n\n    const fixedHeader = header && this.context.fixedHeader;\n    const fixedFooter = this.context.footer && this.context.fixedFooter;\n    const fixed = fixedHeader || fixedFooter;\n    const baseClassNames = themeColors({ text: !header, hint: header }, {\n      'md-table-column--relative': tooltip,\n      'md-table-column--select-field': selectColumnHeader,\n    });\n\n    const mergedClassNames = cn({\n      'md-table-column--header': header,\n      'md-table-column--data': !header && !plain,\n      'md-table-column--plain': !header && plain,\n      'md-table-column--adjusted': adjusted && !grow && !selectColumnHeader,\n      'md-table-column--grow': grow,\n      'md-table-column--sortable md-pointer--hover': sortable,\n      [baseClassNames]: !fixed,\n    }, className);\n\n    if (fixed) {\n      displayedChildren = (\n        <div\n          className={cn('md-table-column__fixed', {\n            'md-table-column__fixed--header': fixedHeader,\n            'md-table-column__fixed--footer': fixedFooter,\n          })}\n        >\n          <div\n            style={fixedStyle}\n            className={cn(baseClassNames, mergedClassNames, 'md-table-column__fixed--flex', {\n              'md-table-column__fixed--flex-right': numeric,\n            }, fixedClassName)}\n          >\n            {tooltip}\n            {displayedChildren}\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <Component\n        aria-sort={ariaSort}\n        {...props}\n        scope={scope}\n        className={cn('md-table-column', {\n          'md-table-column--fixed': fixed,\n          'md-text-left': !numeric && !fixed,\n          'md-text-right': numeric && !fixed,\n        }, mergedClassNames)}\n      >\n        {!fixedHeader && !fixedFooter && tooltip}\n        {displayedChildren}\n      </Component>\n    );\n  }\n}\n\nexport default injectTooltip(TableColumn);\n"]}