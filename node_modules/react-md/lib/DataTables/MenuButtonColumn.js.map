{"version":3,"sources":["../../src/js/DataTables/MenuButtonColumn.js"],"names":["MenuButtonColumn","props","style","className","menuStyle","menuClassName","header","adjusted","tooltipLabel","tooltipDelay","tooltipPosition","Positions","HorizontalAnchors","VerticalAnchors","propTypes","id","oneOfType","number","string","object","fixedTo","oneOf","repositionOnScroll","bool","repositionOnResize","simplifiedMenu","defaultProps"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;IAEMA,gB;;;;;;;;;;;6BA6GK;AAAA,mBAYH,KAAKC,KAZF;AAAA,UAELC,KAFK,UAELA,KAFK;AAAA,UAGLC,SAHK,UAGLA,SAHK;AAAA,UAILC,SAJK,UAILA,SAJK;AAAA,UAKLC,aALK,UAKLA,aALK;AAAA,UAMLC,MANK,UAMLA,MANK;AAAA,UAOLC,QAPK,UAOLA,QAPK;AAAA,UAQLC,YARK,UAQLA,YARK;AAAA,UASLC,YATK,UASLA,YATK;AAAA,UAULC,eAVK,UAULA,eAVK;AAAA,UAWFT,KAXE;;AAaP,aACE;AAAA;AAAA;AACE,iBAAOC,KADT;AAEE,qBAAWC,SAFb;AAGE,kBAAQG,MAHV;AAIE,oBAAUC,QAJZ;AAKE,wBAAcC,YALhB;AAME,wBAAcC,YANhB;AAOE,2BAAiBC;AAPnB;AASE,yEAAgBT,KAAhB,IAAuB,OAAOG,SAA9B,EAAyC,WAAWC,aAApD;AATF,OADF;AAaD;;;;;;AAvIGL,gB,CACGW,S,GAAY,qBAAWA,S;AAD1BX,gB,CAEGY,iB,GAAoB,qBAAWA,iB;AAFlCZ,gB,CAGGa,e,GAAkB,qBAAWA,e;AAHhCb,gB,CAIGc,S,GAAY;AACjB;;;;AAIAC,MAAI,oBAAUC,SAAV,CAAoB,CACtB,oBAAUC,MADY,EAEtB,oBAAUC,MAFY,CAApB,CALa;;AAUjB;;;AAGAhB,SAAO,oBAAUiB,MAbA;;AAejB;;;AAGAhB,aAAW,oBAAUe,MAlBJ;;AAoBjB;;;;;AAKAd,aAAW,oBAAUe,MAzBJ;;AA2BjB;;;;;AAKAd,iBAAe,oBAAUa,MAhCR;;AAkCjB;;;;;;;AAOAE,iCAzCiB;;AA2CjB;;;;;AAKAZ,gBAAc,oBAAUU,MAhDP;;AAkDjB;;;;;AAKAT,gBAAc,oBAAUQ,MAvDP;;AAyDjB;;;;;AAKAP,mBAAiB,oBAAUW,KAAV,CAAgB,CAAC,KAAD,EAAQ,OAAR,EAAiB,QAAjB,EAA2B,MAA3B,CAAhB,CA9DA;;AAgEjB;;;;;;AAMAC,sBAAoB,oBAAUC,IAtEb;;AAwEjB;;;;;;AAMAC,sBAAoB,oBAAUD,IA9Eb;;AAgFjB;;;;;;;AAOAE,kBAAgB,oBAAUF,IAvFT;;AAyFjB;;;;AAIAjB,UAAQ,oBAAUiB,IA7FD;;AA+FjB;;;AAGAhB,YAAU,oBAAUgB;AAlGH,C;AAJfvB,gB,CAyGG0B,Y,GAAe;AACpBD,kBAAgB;AADI,C;kBAiCT,8BAAezB,gBAAf,EAAiC,aAAjC,C","file":"MenuButtonColumn.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport fixedToShape from '../Helpers/fixedToShape';\nimport withTableFixes from './withTableFixes';\nimport MenuButton from '../Menus/MenuButton';\nimport TableColumn from './TableColumn';\n\nclass MenuButtonColumn extends PureComponent {\n  static Positions = MenuButton.Positions;\n  static HorizontalAnchors = MenuButton.HorizontalAnchors;\n  static VerticalAnchors = MenuButton.VerticalAnchors;\n  static propTypes = {\n    /**\n     * An optional id to use for the menu button in the column. If this is omitted, it's value will be\n     * `${rowId}-${cellIndex}-menu-button`\n     */\n    id: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * This is the optional style to apply to the `TableColumn`.\n     */\n    style: PropTypes.object,\n\n    /**\n     * This is the optional className to apply to the `TableColumn`.\n     */\n    className: PropTypes.string,\n\n    /**\n     * The is the optional style to apply to the menu button's menu container.\n     *\n     * @see {@link Menus/MenuButton#style}\n     */\n    menuStyle: PropTypes.object,\n\n    /**\n     * The is the optional class name to apply to the menu button's menu container.\n     *\n     * @see {@link Menus/MenuButton#className}\n     */\n    menuClassName: PropTypes.string,\n\n    /**\n     * This is how the select field should be fixed within the table. When this is omitted,\n     * it will automatically use the responsive table as the fixture so that the select field\n     * will close/adjust itself to the scrolling of the table.\n     *\n     * @see {@link Helpers/Layover#fixedTo}\n     */\n    fixedTo: fixedToShape,\n\n    /**\n     * The optional tooltip to render on hover.\n     *\n     * @see {@link DataTables/TableColumn#tooltipLabel}\n     */\n    tooltipLabel: PropTypes.string,\n\n    /**\n     * An optional delay to apply to the tooltip before it appears.\n     *\n     * @see {@link DataTables/TableColumn#tooltipDelay}\n     */\n    tooltipDelay: PropTypes.number,\n\n    /**\n     * The position of the tooltip.\n     *\n     * @see {@link DataTables/TableColumn#tooltipPosition}\n     */\n    tooltipPosition: PropTypes.oneOf(['top', 'right', 'bottom', 'left']),\n\n    /**\n     * Boolean if the menu should automatically try to reposition itself to stay within\n     * the viewport when the `fixedTo` element scrolls.\n     *\n     * @see {@link Helpers/Layover#repositionOnScroll}\n     */\n    repositionOnScroll: PropTypes.bool,\n\n    /**\n     * Boolean if the menu should automatically try to reposition itself to stay within\n     * the viewport when the window resizes.\n     *\n     * @see {@link Helpers/Layover#repositionOnResize}\n     */\n    repositionOnResize: PropTypes.bool,\n\n    /**\n     * Boolean if the menu logic should be simplified without any viewport logic and position\n     * based on the relative position of the menu. This will most like require some additional\n     * styles applied to the menu.\n     *\n     * @see {@link Helpers/Layover#simplified}\n     */\n    simplifiedMenu: PropTypes.bool,\n\n    /**\n     * This is injected by the `TableRow` component.\n     * @access private\n     */\n    header: PropTypes.bool,\n\n    /**\n     * @access private\n     */\n    adjusted: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    simplifiedMenu: false,\n  };\n\n  render() {\n    const {\n      style,\n      className,\n      menuStyle,\n      menuClassName,\n      header,\n      adjusted,\n      tooltipLabel,\n      tooltipDelay,\n      tooltipPosition,\n      ...props\n    } = this.props;\n    return (\n      <TableColumn\n        style={style}\n        className={className}\n        header={header}\n        adjusted={adjusted}\n        tooltipLabel={tooltipLabel}\n        tooltipDelay={tooltipDelay}\n        tooltipPosition={tooltipPosition}\n      >\n        <MenuButton {...props} style={menuStyle} className={menuClassName} />\n      </TableColumn>\n    );\n  }\n}\n\nexport default withTableFixes(MenuButtonColumn, 'menu-button');\n"]}