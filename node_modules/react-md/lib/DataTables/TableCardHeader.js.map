{"version":3,"sources":["../../src/js/DataTables/TableCardHeader.js"],"names":["TableCardHeader","props","state","animating","nextProps","visible","nVisible","transitionEnterTimeout","transitionLeaveTimeout","timeout","_timeout","clearTimeout","setTimeout","setState","noAdjust","children","map","toArray","child","i","className","noClone","style","title","titleId","actions","contextualTitleId","contextualChildren","noActionsAdjust","noChildrenAdjust","noLeftChildrenClone","propChildren","propLeftChildren","leftChildren","propContextualTitle","contextualTitle","_cloneCellRight","_cloneLeftChildren","concat","contextualHeader","mergedStyles","Object","assign","overflow","propTypes","object","string","component","oneOfType","func","isRequired","transitionName","number","node","element","arrayOf","bool","defaultProps"],"mappings":"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","file":"TableCardHeader.js","sourcesContent":["import React, { PureComponent, Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';\nimport cn from 'classnames';\n\nimport TICK from '../constants/CSSTransitionGroupTick';\nimport oneRequired from '../utils/PropTypes/oneRequired';\nimport invalidIf from '../utils/PropTypes/invalidIf';\nimport CardTitleBlock from '../Cards/CardTitleBlock';\n\n/**\n * The `TableCardHeader` is used when contextual actions should appear when\n * a user selects a row.\n */\nexport default class TableCardHeader extends PureComponent {\n  static propTypes = {\n    /**\n     * An optional style to apply.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply.\n     */\n    className: PropTypes.string,\n\n    /**\n     * The component to render as.\n     */\n    component: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.string,\n    ]).isRequired,\n\n    /**\n     * The transition name to use when the contextual header appears.\n     */\n    transitionName: PropTypes.string.isRequired,\n\n    /**\n     * The transition time to use when the contextual header appears.\n     */\n    transitionEnterTimeout: PropTypes.number.isRequired,\n\n    /**\n     * The transition time to use when the contextual header disappears.\n     */\n    transitionLeaveTimeout: PropTypes.number.isRequired,\n\n    /**\n     * An optional title to display. It is invalid to have both `title` and `leftChildren`\n     * defined as only one will be used.\n     */\n    title: oneRequired(PropTypes.node, 'leftChildren', 'children'),\n\n    /**\n     * An optional id to provide to the title.\n     */\n    titleId: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional title to display in the contextual header. This will get wrapped in an `h2`\n     * tag and additional styles applied.\n     */\n    contextualTitle: PropTypes.node,\n\n    /**\n     * An optional id to provide to the contextual title.\n     */\n    contextualTitleId: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * Any additional children to display in the contextual header. This will be displayed after\n     * the optional `contextualTile` and before the `actions`.\n     */\n    contextualChildren: PropTypes.node,\n\n    /**\n     * An optional button or list of buttons to display instead of a title.\n     */\n    leftChildren: invalidIf(PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.arrayOf(PropTypes.element),\n    ]), 'title'),\n\n    /**\n     * An additional children to display after the `title` or `leftChildren` prop.\n     * This is _normally_ a list of icon button or menu button.\n     */\n    children: PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.arrayOf(PropTypes.element),\n    ]),\n\n    /**\n     * An optional button/menu button or a list of button/menu button to display in the\n     * contextual header once the user has selected a row or multiple rows.\n     */\n    actions: PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.arrayOf(PropTypes.element),\n    ]),\n\n    /**\n     * Boolean if the `actions` prop should not have each element cloned with additional\n     * class names.\n     */\n    noActionsAdjust: PropTypes.bool,\n\n    /**\n     * Boolean if the `children` prop should not have each element cloned with additional\n     * class names.\n     */\n    noChildrenAdjust: PropTypes.bool,\n\n    /**\n     * Boolean if the `leftChildren` prop should not have each element cloned with additional\n     * class names.\n     */\n    noLeftChildrenClone: PropTypes.bool,\n\n    /**\n     * Boolean if the contextual header is currently visible.\n     */\n    visible: PropTypes.bool.isRequired,\n  };\n\n  static defaultProps = {\n    component: 'header',\n    transitionName: 'md-drop-down',\n    transitionEnterTimeout: 150,\n    transitionLeaveTimeout: 150,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = { animating: false };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { visible } = this.props;\n    const { visible: nVisible, transitionEnterTimeout, transitionLeaveTimeout } = nextProps;\n    const timeout = !nVisible ? transitionLeaveTimeout : transitionEnterTimeout;\n    if (visible !== nVisible) {\n      if (this._timeout) {\n        clearTimeout(this._timeout);\n      }\n\n      this._timeout = setTimeout(() => {\n        this._timeout = setTimeout(() => {\n          this._timeout = null;\n          this.setState({ animating: false });\n        }, timeout);\n      }, TICK);\n\n      if (!this.state.animating) {\n        this.setState({ animating: true });\n      }\n    }\n  }\n\n  _cloneCellRight(noAdjust, children) {\n    if (noAdjust || !children) {\n      return children;\n    }\n\n    return Children.map(Children.toArray(children), (child, i) => {\n      if (i === 0) {\n        return cloneElement(child, { className: cn('md-cell--right', child.props.className) });\n      }\n\n      return child;\n    });\n  }\n\n  _cloneLeftChildren(noClone, children) {\n    if (noClone || !children) {\n      return children;\n    }\n\n    return Children.map(Children.toArray(children), child => cloneElement(child, {\n      className: cn('md-btn--dialog', child.props.className),\n    }));\n  }\n\n  render() {\n    const { animating } = this.state;\n    const {\n      style,\n      className,\n      title,\n      titleId,\n      actions,\n      contextualTitleId,\n      contextualChildren,\n      noActionsAdjust,\n      noChildrenAdjust,\n      noLeftChildrenClone,\n      visible,\n      /* eslint-disable no-unused-vars */\n      children: propChildren,\n      leftChildren: propLeftChildren,\n      contextualTitle: propContextualTitle,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    let { children, leftChildren, contextualTitle } = this.props;\n    children = this._cloneCellRight(noChildrenAdjust, children);\n    leftChildren = this._cloneLeftChildren(noLeftChildrenClone, leftChildren);\n\n    if (title) {\n      children = (\n        <div className=\"md-card-title\" key=\"main-title\">\n          <CardTitleBlock id={titleId} title={title} />\n          {children}\n        </div>\n      );\n    } else if (leftChildren) {\n      leftChildren = Children.toArray(leftChildren);\n\n      if (children) {\n        children = leftChildren.concat(Children.toArray(children));\n      } else {\n        children = leftChildren;\n      }\n    }\n\n    if (contextualTitle) {\n      contextualTitle = (\n        <h2\n          id={contextualTitleId}\n          className=\"md-card-title--title md-card-title--title-contextual\"\n          tabIndex={contextualTitleId ? -1 : null}\n        >\n          {contextualTitle}\n        </h2>\n      );\n    }\n\n    const contextualHeader = (\n      <div key=\"contextual-header\" className=\"md-card-title md-card-title--contextual\">\n        {contextualTitle}\n        {contextualChildren}\n        {this._cloneCellRight(noActionsAdjust, actions)}\n      </div>\n    );\n\n    let mergedStyles = style;\n    if (animating) {\n      mergedStyles = Object.assign({}, style, { overflow: 'hidden' });\n    }\n\n    return (\n      <CSSTransitionGroup\n        {...props}\n        style={mergedStyles}\n        className={cn('md-table-card-header', {\n          'md-table-card-header--no-title': !title,\n        }, className)}\n      >\n        {children}\n        {visible ? contextualHeader : null}\n      </CSSTransitionGroup>\n    );\n  }\n}\n"]}