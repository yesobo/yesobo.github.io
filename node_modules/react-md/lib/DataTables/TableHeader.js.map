{"version":3,"sources":["../../src/js/DataTables/TableHeader.js"],"names":["TableHeader","context","header","props","className","children","allSelected","Children","only","selected","row","cloneElement","contextTypes","childContextTypes","propTypes","style","object","string","propName","component","e","amt","length","Error"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA;;;;;;;IAOqBA,W;;;;;;;;;;;sCA+BD;AAChB,0BACK,KAAKC,OADV;AAEEC,gBAAQ;AAFV;AAID;;;6BAEQ;AAAA,mBACmC,KAAKC,KADxC;AAAA,UACCC,SADD,UACCA,SADD;AAAA,UACYC,QADZ,UACYA,QADZ;AAAA,UACyBF,KADzB;;AAAA,UAECG,WAFD,GAEiB,KAAKL,OAFtB,CAECK,WAFD;;AAGP,UAAMJ,SAAS,gBAAMK,QAAN,CAAeC,IAAf,CAAoBH,QAApB,CAAf;AACA,UAAMI,WAAW,OAAOP,OAAOC,KAAP,CAAaM,QAApB,KAAiC,WAAjC,GACbH,WADa,GAEbJ,OAAOC,KAAP,CAAaM,QAFjB;;AAIA,UAAMC,MAAM,gBAAMC,YAAN,CAAmBT,MAAnB,EAA2B,EAAEO,kBAAF,EAA3B,CAAZ;;AAEA,aACE;AAAA;AAAA,qBAAWN,KAAX,IAAkB,WAAW,0BAAG,iBAAH,EAAsBC,SAAtB,CAA7B;AACGM;AADH,OADF;AAKD;;;;;;AArDkBV,W,CACZY,Y;AADYZ,W,CAEZa,iB;AAFYb,W,CAGZc,S,GAAY;AACjB;;;AAGAC,SAAO,oBAAUC,MAJA;;AAMjB;;;AAGAZ,aAAW,oBAAUa,MATJ;;AAWjB;;;;AAIAZ,YAAU,kBAACF,KAAD,EAAQe,QAAR,EAAkBC,SAAlB,EAAgC;AACxC,QAAI;AACF,sBAAMZ,QAAN,CAAeC,IAAf,CAAoBL,MAAME,QAA1B;AACA,aAAO,IAAP;AACD,KAHD,CAGE,OAAOe,CAAP,EAAU;AACV,UAAMC,MAAMlB,MAAME,QAAN,GAAiBF,MAAME,QAAN,CAAeiB,MAAhC,GAAyC,CAArD;AACA,aAAO,IAAIC,KAAJ,0CACiCJ,SADjC,gBACoDE,GADpD,kBAAP;AAGD;AACF;AAzBgB,C;kBAHArB,W","file":"TableHeader.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport contextTypes from './contextTypes';\nimport headerContextTypes from './headerContextTypes';\n\n/**\n * A `thead` component to use in the `DataTable` component. This\n * will automatically update the header row to check if it is selected\n * and inject a function to toggle all rows selected if the row is\n * uncontrolled. It will also automatically attempt to set the `TableColumn`\n * components to be the header type.\n */\nexport default class TableHeader extends Component {\n  static contextTypes = contextTypes;\n  static childContextTypes = headerContextTypes;\n  static propTypes = {\n    /**\n     * An optional style to apply.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the table header\n     */\n    className: PropTypes.string,\n\n    /**\n     * This should be a single `TableRow` component. The `custom` validation will\n     * warn you if there are more than one children given or none at all.\n     */\n    children: (props, propName, component) => {\n      try {\n        React.Children.only(props.children);\n        return null;\n      } catch (e) {\n        const amt = props.children ? props.children.length : 0;\n        return new Error(\n          `There must only be one child in a '${component}', but ${amt} were given.`\n        );\n      }\n    },\n  };\n\n  getChildContext() {\n    return {\n      ...this.context,\n      header: true,\n    };\n  }\n\n  render() {\n    const { className, children, ...props } = this.props;\n    const { allSelected } = this.context;\n    const header = React.Children.only(children);\n    const selected = typeof header.props.selected === 'undefined'\n      ? allSelected\n      : header.props.selected;\n\n    const row = React.cloneElement(header, { selected });\n\n    return (\n      <thead {...props} className={cn('md-table-header', className)}>\n        {row}\n      </thead>\n    );\n  }\n}\n"]}