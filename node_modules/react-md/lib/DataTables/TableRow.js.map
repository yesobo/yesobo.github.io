{"version":3,"sources":["../../src/js/DataTables/TableRow.js"],"names":["TableRow","props","context","_handleMouseOver","e","onMouseOver","header","target","parentNode","classList","_ignoreHoverState","setState","hover","_handleMouseLeave","onMouseLeave","_handleCheckboxClick","checked","rowIndex","_row","onCheckboxClick","toggleSelectedRow","_setRow","row","state","baseId","id","rowId","contains","className","children","selected","selectable","autoAdjust","checkbox","plain","selectableRows","length","count","columns","map","toArray","col","i","adjusted","undefined","cellIndex","propTypes","style","object","string","oneOfType","element","arrayOf","isRequired","onClick","func","bool","contextTypes","childContextTypes"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA;;;;;IAKqBA,Q;;;AAgEnB,oBAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,oHACpBD,KADoB,EACbC,OADa;;AAAA,UA0B5BC,gBA1B4B,GA0BT,UAACC,CAAD,EAAO;AACxB,UAAI,MAAKH,KAAL,CAAWI,WAAf,EAA4B;AAC1B,cAAKJ,KAAL,CAAWI,WAAX,CAAuBD,CAAvB;AACD;;AAED,UAAI,MAAKF,OAAL,CAAaI,MAAjB,EAAyB;AACvB;AACD;;AAED,UAAIC,SAASH,EAAEG,MAAf;AACA,aAAOA,UAAUA,OAAOC,UAAxB,EAAoC;AAClC,YAAID,OAAOE,SAAP,IAAoB,MAAKC,iBAAL,CAAuBH,OAAOE,SAA9B,CAAxB,EAAkE;AAChE,gBAAKE,QAAL,CAAc,EAAEC,OAAO,KAAT,EAAd;AACA;AACD;;AAEDL,iBAASA,OAAOC,UAAhB;AACD;;AAED,YAAKG,QAAL,CAAc,EAAEC,OAAO,IAAT,EAAd;AACD,KA9C2B;;AAAA,UAgD5BC,iBAhD4B,GAgDR,UAACT,CAAD,EAAO;AACzB,UAAI,MAAKH,KAAL,CAAWa,YAAf,EAA6B;AAC3B,cAAKb,KAAL,CAAWa,YAAX,CAAwBV,CAAxB;AACD;;AAED,UAAI,MAAKF,OAAL,CAAaI,MAAjB,EAAyB;AACvB;AACD;;AAED,YAAKK,QAAL,CAAc,EAAEC,OAAO,KAAT,EAAd;AACD,KA1D2B;;AAAA,UA4D5BG,oBA5D4B,GA4DL,UAACC,OAAD,EAAUZ,CAAV,EAAgB;AAAA,UAC7Ba,QAD6B,GAChB,MAAKC,IADW,CAC7BD,QAD6B;;AAErC,UAAI,MAAKhB,KAAL,CAAWkB,eAAf,EAAgC;AAC9B,cAAKlB,KAAL,CAAWkB,eAAX,CAA2BF,QAA3B,EAAqCD,OAArC,EAA8CZ,CAA9C;AACD;;AAED,YAAKF,OAAL,CAAakB,iBAAb,CAA+BH,QAA/B,EAAyC,MAAKf,OAAL,CAAaI,MAAtD,EAA8DF,CAA9D;AACD,KAnE2B;;AAAA,UAqE5BiB,OArE4B,GAqElB,UAACC,GAAD,EAAS;AACjB,YAAKJ,IAAL,GAAYI,GAAZ;AACD,KAvE2B;;AAG1B,UAAKC,KAAL,GAAa,EAAEX,OAAO,KAAT,EAAb;AAH0B;AAI3B;;;;sCAEiB;AAAA,qBACe,KAAKV,OADpB;AAAA,UACRsB,MADQ,YACRA,MADQ;AAAA,UACGtB,OADH;;AAEhB,UAAMuB,KAAQD,MAAR,UAAkB,KAAKN,IAAL,GAAY,KAAKA,IAAL,CAAUD,QAAtB,GAAiC,IAAnD,CAAN;AACA,0BACKf,OADL;AAEEwB,eAAOxB,QAAQI,MAAR,GAAoBkB,MAApB,mBAA0CC;AAFnD;AAID;;AAED;;;;;;;;;;sCAOkBhB,S,EAAW;AAC3B,aAAOA,UAAUkB,QAAV,CAAmB,eAAnB,KAAuClB,UAAUkB,QAAV,CAAmB,gBAAnB,CAA9C;AACD;;;6BAiDQ;AAAA;;AAAA,mBAYH,KAAK1B,KAZF;AAAA,UAEL2B,SAFK,UAELA,SAFK;AAAA,UAGLC,QAHK,UAGLA,QAHK;AAAA,UAILC,QAJK,UAILA,QAJK;AAAA,UAKLC,UALK,UAKLA,UALK;AAAA,UAOLZ,eAPK,UAOLA,eAPK;AAAA,UASLa,UATK,UASLA,UATK;AAAA,UAWF/B,KAXE;;AAAA,UAcCW,KAdD,GAcW,KAAKW,KAdhB,CAcCX,KAdD;;;AAgBP,UAAIqB,iBAAJ;AACA,UAAI,OAAOF,UAAP,KAAsB,WAAtB,GAAoCA,UAApC,GAAkD,CAAC,KAAK7B,OAAL,CAAagC,KAAd,IAAuB,KAAKhC,OAAL,CAAaiC,cAA1F,EAA2G;AACzGF,mBACE;AACE,eAAI,UADN;AAEE,mBAASH,QAFX;AAGE,oBAAU,KAAKf,oBAHjB;AAIE,iBAAO,KAAKG,IAAL,GAAY,KAAKA,IAAL,CAAUD,QAAtB,GAAiC;AAJ1C,UADF;AAQD;;AAED,UAAMmB,SAAS,gBAASC,KAAT,CAAeR,QAAf,IAA2B,CAA1C;AACA,UAAMS,UAAU,gBAASC,GAAT,CAAa,gBAASC,OAAT,CAAiBX,QAAjB,CAAb,EAAyC,UAACY,GAAD,EAAMC,CAAN,EAAY;AACnE,YAAIC,WAAWF,IAAIxC,KAAJ,CAAU0C,QAAzB;AACA,YAAI,OAAOA,QAAP,KAAoB,WAAxB,EAAqC;AACnCA,qBAAWD,MAAMN,MAAN,GAAe,KAAf,GAAuBQ,SAAlC;AACD;;AAED,eAAO,yBAAaH,GAAb,EAAkB;AACvBI,qBAAWH,KAAKT,WAAW,CAAX,GAAe,CAApB,CADY;AAEvB3B,kBAAQ,wBAASmC,IAAIxC,KAAb,EAAoB,OAAKC,OAAzB,EAAkC,QAAlC,CAFe;AAGvByC;AAHuB,SAAlB,CAAP;AAKD,OAXe,CAAhB;;AAaA,aACE;AAAA;AAAA,qBACM1C,KADN;AAEE,eAAK,KAAKoB,OAFZ;AAGE,qBAAW,0BAAG,cAAH,EAAmBO,SAAnB,EAA8B;AACvC,mCAAuBhB,KADgB;AAEvC,oCAAwB,CAAC,KAAKV,OAAL,CAAaI,MAAd,IAAwBwB;AAFT,WAA9B,CAHb;AAOE,uBAAa,KAAK3B,gBAPpB;AAQE,wBAAc,KAAKU;AARrB;AAUGoB,gBAVH;AAWGK;AAXH,OADF;AAeD;;;;;;AAlMkBtC,Q,CACZ8C,S,GAAY;AACjB;;;AAGAC,SAAO,oBAAUC,MAJA;;AAMjB;;;AAGApB,aAAW,oBAAUqB,MATJ;;AAWjB;;;;;;AAMApB,YAAU,oBAAUqB,SAAV,CAAoB,CAC5B,oBAAUC,OADkB,EAE5B,oBAAUC,OAAV,CAAkB,oBAAUD,OAA5B,CAF4B,CAApB,EAGPE,UApBc;;AAsBjB;;;AAGAC,WAAS,oBAAUC,IAzBF;;AA2BjB;;;;;;AAMApC,mBAAiB,oBAAUoC,IAjCV;;AAmCjB;;;AAGAlD,eAAa,oBAAUkD,IAtCN;;AAwCjB;;;AAGAzC,gBAAc,oBAAUyC,IA3CP;;AA6CjB;;;;AAIAzB,YAAU,oBAAU0B,IAjDH;;AAmDjB;;;;AAIAzB,cAAY,oBAAUyB,IAvDL;;AAyDjBxB,cAAY,0BAAW,oBAAUwB,IAArB,EAA2B,uDAA3B;AAzDK,C;AADAxD,Q,CA6DZyD,Y;AA7DYzD,Q,CA8DZ0D,iB;kBA9DY1D,Q","file":"TableRow.js","sourcesContent":["import React, { Component, Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport deprecated from 'react-prop-types/lib/deprecated';\nimport cn from 'classnames';\n\nimport getField from '../utils/getField';\nimport headerContextTypes from './headerContextTypes';\nimport rowContextTypes from './rowContextTypes';\nimport TableCheckbox from './TableCheckbox';\n\n/**\n * A component for displaying a row in a `DataTable`. This will\n * automatically add a `Checkbox` component to the row if it is not\n * a `plain` table.\n */\nexport default class TableRow extends Component {\n  static propTypes = {\n    /**\n     * An optional style to apply.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the row.\n     */\n    className: PropTypes.string,\n\n    /**\n     * A single or list of `TableColumn` to display in the table.\n     *\n     * > The specs \"require\" at least 3 columns for a non-plain data table, but that isn't\n     * strictly enforced here.\n     */\n    children: PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.arrayOf(PropTypes.element),\n    ]).isRequired,\n\n    /**\n     * An optional onClick function to call when a row is clicked.\n     */\n    onClick: PropTypes.func,\n\n    /**\n     * A function to call when the checkbox is clicked. This\n     * function will will be called with `(rowIndex, checked, event)`.\n     * The `TableBody` and `TableHeader` components will automatically\n     * merge in a function to toggle the checkbox.\n     */\n    onCheckboxClick: PropTypes.func,\n\n    /**\n     * An optional function to call onMouseOver.\n     */\n    onMouseOver: PropTypes.func,\n\n    /**\n     * An optional function to call onMouseLeave.\n     */\n    onMouseLeave: PropTypes.func,\n\n    /**\n     * Boolean if the row is currently selected. If this value will be\n     * injected by the `TableHeader` or `TableBody` component.\n     */\n    selected: PropTypes.bool,\n\n    /**\n     * Boolean if the current row is selectable. This value will take precedence over anything inherited\n     * by the `DataTable`.\n     */\n    selectable: PropTypes.bool,\n\n    autoAdjust: deprecated(PropTypes.bool, 'Manually specify `grow` on one of the columns instead'),\n  };\n\n  static contextTypes = headerContextTypes;\n  static childContextTypes = rowContextTypes;\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = { hover: false };\n  }\n\n  getChildContext() {\n    const { baseId, ...context } = this.context;\n    const id = `${baseId}-${this._row ? this._row.rowIndex : null}`;\n    return {\n      ...context,\n      rowId: context.header ? `${baseId}-toggle-all` : id,\n    };\n  }\n\n  /**\n   * Need to ignore adding the hover state if the mouse is over a menu/menu item\n   * or the edit dialog is open.\n   *\n   * @param {Function} classList - the classList to use for checking cn\n   * @return {Boolean} true if the hover state should be ignored for this classList\n   */\n  _ignoreHoverState(classList) {\n    return classList.contains('md-list--menu') || classList.contains('md-edit-dialog');\n  }\n\n  _handleMouseOver = (e) => {\n    if (this.props.onMouseOver) {\n      this.props.onMouseOver(e);\n    }\n\n    if (this.context.header) {\n      return;\n    }\n\n    let target = e.target;\n    while (target && target.parentNode) {\n      if (target.classList && this._ignoreHoverState(target.classList)) {\n        this.setState({ hover: false });\n        return;\n      }\n\n      target = target.parentNode;\n    }\n\n    this.setState({ hover: true });\n  };\n\n  _handleMouseLeave = (e) => {\n    if (this.props.onMouseLeave) {\n      this.props.onMouseLeave(e);\n    }\n\n    if (this.context.header) {\n      return;\n    }\n\n    this.setState({ hover: false });\n  };\n\n  _handleCheckboxClick = (checked, e) => {\n    const { rowIndex } = this._row;\n    if (this.props.onCheckboxClick) {\n      this.props.onCheckboxClick(rowIndex, checked, e);\n    }\n\n    this.context.toggleSelectedRow(rowIndex, this.context.header, e);\n  };\n\n  _setRow = (row) => {\n    this._row = row;\n  };\n\n  render() {\n    const {\n      className,\n      children,\n      selected,\n      selectable,\n      /* eslint-disable no-unused-vars */\n      onCheckboxClick,\n      // deprecated\n      autoAdjust,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    const { hover } = this.state;\n\n    let checkbox;\n    if (typeof selectable !== 'undefined' ? selectable : (!this.context.plain && this.context.selectableRows)) {\n      checkbox = (\n        <TableCheckbox\n          key=\"checkbox\"\n          checked={selected}\n          onChange={this._handleCheckboxClick}\n          index={this._row ? this._row.rowIndex : null}\n        />\n      );\n    }\n\n    const length = Children.count(children) - 1;\n    const columns = Children.map(Children.toArray(children), (col, i) => {\n      let adjusted = col.props.adjusted;\n      if (typeof adjusted === 'undefined') {\n        adjusted = i === length ? false : undefined;\n      }\n\n      return cloneElement(col, {\n        cellIndex: i + (checkbox ? 1 : 0),\n        header: getField(col.props, this.context, 'header'),\n        adjusted,\n      });\n    });\n\n    return (\n      <tr\n        {...props}\n        ref={this._setRow}\n        className={cn('md-table-row', className, {\n          'md-table-row--hover': hover,\n          'md-table-row--active': !this.context.header && selected,\n        })}\n        onMouseOver={this._handleMouseOver}\n        onMouseLeave={this._handleMouseLeave}\n      >\n        {checkbox}\n        {columns}\n      </tr>\n    );\n  }\n}\n"]}