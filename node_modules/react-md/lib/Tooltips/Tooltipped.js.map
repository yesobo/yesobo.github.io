{"version":3,"sources":["../../src/js/Tooltips/Tooltipped.js"],"names":["Tooltipped","children","setPosition","props","target","Children","only","targetProps","label","clonedProps","style","position","cloneElement","displayName","propTypes","element","isRequired","node","bool"],"mappings":";;;;;;;;kBA2CwBA,U;;AA3CxB;;;;AACA;;;;AAEA;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCe,SAASA,UAAT,OAAyD;AAAA,MAAnCC,QAAmC,QAAnCA,QAAmC;AAAA,MAAzBC,WAAyB,QAAzBA,WAAyB;AAAA,MAATC,KAAS;;AACtE,MAAIC,SAAS,gBAAMC,QAAN,CAAeC,IAAf,CAAoBL,QAApB,CAAb;AACA,MAAMM,cAAcH,OAAOD,KAA3B;;AAEA,MAAIA,MAAMK,KAAV,EAAiB;AACf,QAAIC,cAAcF,WAAlB;AACA,QAAIL,WAAJ,EAAiB;AACfO,iCACKA,WADL;AAEEC,4BAAYD,YAAYC,KAAxB,IAA+BC,UAAU,UAAzC;AAFF;AAID;;AAEDP,aAAS,gBAAMQ,YAAN,CAAmBR,MAAnB,EAA2BK,WAA3B,EAAwC,CAC/CF,YAAYN,QADmC,EAE/C,qEAAkB,KAAI,kBAAtB,IAA6CE,KAA7C,EAF+C,CAAxC,CAAT;AAID;;AAED,SAAOC,MAAP;AACD;;AAEDJ,WAAWa,WAAX,GAAyB,YAAzB;;AAEAb,WAAWc,SAAX,GAAuB;AACrB;;;AAGAb,YAAU,oBAAUc,OAAV,CAAkBC,UAJP;AAKrB;;;AAGAR,SAAO,oBAAUS,IARI;AASrB;;;AAGAf,eAAa,oBAAUgB;AAZF,CAAvB","file":"Tooltipped.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TooltipContainer from './TooltipContainer';\n\n\n/**\n * Adds a tooltip for a component/element given as the only child.\n *\n * The component should render its children, or the tooltip will not be shown.\n * Also the component should be positioned by `className` or `style`\n * (CSS property `position` should have value `relative`, `absolute` or `fixed`),\n * or the tooltip can appear incorrectly.\n * Use `setPosition={true}` to automatically add `position: 'relative'` to the `style` of the wrapped component.\n *\n * Besides of `children` and `setPosition` all props set for `Tooltipped` component are passed through\n * to `TooltipContainer` that is added as a child of the wrapped component and controls the tooltip.\n *\n * ```js\n * <Tooltipped\n *   label=\"Tooltip for text\"\n *   position=\"left\"\n *   delay={1000}\n * >\n *   <span style={{position: 'absolute', top: '10px', left: '70%'}}>\n *     Some text\n *     <div>Another line of text</div>\n *   </span>\n * </Tooltipped>\n * ```\n *\n * ```js\n * <Tooltipped\n *   setPosition={true}\n *   label=\"Avatar's tooltip\"\n *   position=\"top\"\n * >\n *   <span style={{marginLeft: '30px'}}>\n *       <Avatar random>T</Avatar>\n *   </span>\n * </Tooltipped>\n * ```\n */\nexport default function Tooltipped({ children, setPosition, ...props }) {\n  let target = React.Children.only(children);\n  const targetProps = target.props;\n\n  if (props.label) {\n    let clonedProps = targetProps;\n    if (setPosition) {\n      clonedProps = {\n        ...clonedProps,\n        style: { ...clonedProps.style, position: 'relative' },\n      };\n    }\n\n    target = React.cloneElement(target, clonedProps, [\n      targetProps.children,\n      <TooltipContainer key=\"tooltipContainer\" {...props} />,\n    ]);\n  }\n\n  return target;\n}\n\nTooltipped.displayName = 'Tooltipped';\n\nTooltipped.propTypes = {\n  /**\n   * A component/element the tooltip should be linked to.\n   */\n  children: PropTypes.element.isRequired,\n  /**\n   * Tooltip's content.\n   */\n  label: PropTypes.node,\n  /**\n   * Whether `position: relative` should be added to the `style` property of the wrapped component.\n   */\n  setPosition: PropTypes.bool,\n};\n"]}