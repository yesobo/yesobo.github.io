{"version":3,"sources":["../../src/js/Tooltips/injectTooltip.js"],"names":["_composed","getComposedComponent","_setComposedComponent","component","props","tooltipLabel","tooltipDelay","tooltipPosition","tooltipStyle","tooltipClassName","tooltipContainerStyle","tooltipContainerClassName","tooltipTransitionEnterTimeout","tooltipTransitionLeaveTimeout","tooltip","ref","displayName","ComposedComponent","propTypes","object","string","node","delay","position","enterTimeout","leaveTimeout"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;kBAae;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA,gNAiDbA,SAjDa,GAiDD,IAjDC,QAiEbC,oBAjEa,GAiEU;AAAA,eAAM,MAAKD,SAAX;AAAA,OAjEV,QAmEbE,qBAnEa,GAmEW,UAACC,SAAD,EAAe;AACrC,cAAKH,SAAL,GAAiBG,SAAjB;AACD,OArEY;AAAA;;AAmDb;;;;;;;;;;;;;;;;AAnDa;AAAA;AAAA,+BAuEJ;AAAA,qBAYH,KAAKC,KAZF;AAAA,YAELC,YAFK,UAELA,YAFK;AAAA,YAGLC,YAHK,UAGLA,YAHK;AAAA,YAILC,eAJK,UAILA,eAJK;AAAA,YAKLC,YALK,UAKLA,YALK;AAAA,YAMLC,gBANK,UAMLA,gBANK;AAAA,YAOLC,qBAPK,UAOLA,qBAPK;AAAA,YAQLC,yBARK,UAQLA,yBARK;AAAA,YASLC,6BATK,UASLA,6BATK;AAAA,YAULC,6BAVK,UAULA,6BAVK;AAAA,YAWFT,KAXE;;AAcP,YAAIC,YAAJ,EAAkB;AAChBD,gBAAMU,OAAN,GACE;AACE,iBAAI,kBADN;AAEE,mBAAOT,YAFT;AAGE,mBAAOC,YAHT;AAIE,sBAAUC,eAJZ;AAKE,0BAAcK,6BALhB;AAME,0BAAcC,6BANhB;AAOE,mBAAOH,qBAPT;AAQE,uBAAWC,yBARb;AASE,0BAAcH,YAThB;AAUE,8BAAkBC;AAVpB,YADF;AAcD;;AAEDL,cAAMW,GAAN,GAAY,KAAKb,qBAAjB;;AAEA,eAAO,8BAAC,iBAAD,EAAuBE,KAAvB,CAAP;AACD;AAzGY;;AAAA;AAAA,kCACNY,WADM,GACQ,8BAAeC,iBAAf,EAAkC,SAAlC,CADR,SAENC,SAFM,GAEM;AACjB;;;AAGAR,2BAAuB,oBAAUS,MAJhB;;AAMjB;;;AAGAR,+BAA2B,oBAAUS,MATpB;;AAWjB;;;AAGAZ,kBAAc,oBAAUW,MAdP;;AAgBjB;;;AAGAV,sBAAkB,oBAAUW,MAnBX;;AAqBjB;;;AAGAf,kBAAc,oBAAUgB,IAxBP;;AA0BjB;;;AAGAf,kBAAc,2BAAiBY,SAAjB,CAA2BI,KA7BxB;;AA+BjB;;;AAGAf,qBAAiB,2BAAiBW,SAAjB,CAA2BK,QAlC3B;;AAoCjB;;;AAGAX,mCAA+B,2BAAiBM,SAAjB,CAA2BM,YAvCzC;;AAyCjB;;;AAGAX,mCAA+B,2BAAiBK,SAAjB,CAA2BO;AA5CzC,GAFN;AAAA,C","file":"injectTooltip.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport getDisplayName from '../utils/StringUtils/getDisplayName';\nimport TooltipContainer from './TooltipContainer';\n\n\n/**\n * Takes any component and injects a tooltip container as a prop. The tooltip container\n * will add event listeners for touch, mouse, and keyboard events so that a tooltip will appear\n * in the ComposedComponent.\n *\n * If the `tooltipLabel` prop is omitted, the tooltip and event listeners will not\n * be included.\n *\n * ```js\n * @param {function} ComposedComponent the component to compose with the tooltip functionality.\n * @return {function} the ComposedComponent with a tooltip.\n * ```\n */\nexport default ComposedComponent => class TooltipedComponent extends PureComponent {\n  static displayName = getDisplayName(ComposedComponent, 'Tooltip');\n  static propTypes = {\n    /**\n     * An optional style to apply to the tooltip container.\n     */\n    tooltipContainerStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the tooltip container.\n     */\n    tooltipContainerClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the tooltip itself.\n     */\n    tooltipStyle: PropTypes.object,\n\n    /**\n     * An optional className to the tooltip itself.\n     */\n    tooltipClassName: PropTypes.string,\n\n    /**\n     * The tooltip to display. If omitted, the `tooltip` prop will not be injected.\n     */\n    tooltipLabel: PropTypes.node,\n\n    /**\n     * The amount of delay before the tooltip will appear on hover, touch, or keyboard focus.\n     */\n    tooltipDelay: TooltipContainer.propTypes.delay,\n\n    /**\n     * The position that the tooltip should appear related to the composed component.\n     */\n    tooltipPosition: TooltipContainer.propTypes.position,\n\n    /**\n     * The transition time for the tooltip appearing.\n     */\n    tooltipTransitionEnterTimeout: TooltipContainer.propTypes.enterTimeout,\n\n    /**\n     * The transition time for the tooltip disappearing.\n     */\n    tooltipTransitionLeaveTimeout: TooltipContainer.propTypes.leaveTimeout,\n  };\n\n  _composed = null;\n\n  /**\n   * Gets the composed component as a ref. This is useful if you need to access the ref of the\n   * composed component instead of the `injectTooltip` HOC to use some publicly accessible methods.\n   *\n   * ```js\n   * <SomeTooltippedComponent\n   *   ref={tooltipHOC => {\n   *     tooltipHOC.getComposedComponent().focus();\n   *   }}\n   * />\n   * ```\n   *\n   * > NOTE: This can be `null`, so make sure to do a null check before using.\n   */\n  getComposedComponent = () => this._composed;\n\n  _setComposedComponent = (component) => {\n    this._composed = component;\n  };\n\n  render() {\n    const {\n      tooltipLabel,\n      tooltipDelay,\n      tooltipPosition,\n      tooltipStyle,\n      tooltipClassName,\n      tooltipContainerStyle,\n      tooltipContainerClassName,\n      tooltipTransitionEnterTimeout,\n      tooltipTransitionLeaveTimeout,\n      ...props\n    } = this.props;\n\n    if (tooltipLabel) {\n      props.tooltip = (\n        <TooltipContainer\n          key=\"tooltipContainer\"\n          label={tooltipLabel}\n          delay={tooltipDelay}\n          position={tooltipPosition}\n          enterTimeout={tooltipTransitionEnterTimeout}\n          leaveTimeout={tooltipTransitionLeaveTimeout}\n          style={tooltipContainerStyle}\n          className={tooltipContainerClassName}\n          tooltipStyle={tooltipStyle}\n          tooltipClassName={tooltipClassName}\n        />\n      );\n    }\n\n    props.ref = this._setComposedComponent;\n\n    return <ComposedComponent {...props} />;\n  }\n};\n"]}