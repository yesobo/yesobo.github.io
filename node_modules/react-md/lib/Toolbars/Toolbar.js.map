{"version":3,"sources":["../../src/js/Toolbars/Toolbar.js"],"names":["Toolbar","props","style","className","component","titleStyle","titleClassName","prominentTitle","themed","singleColor","actions","fixed","children","inset","titleId","propNav","nav","propTitle","title","propTitleMenu","titleMenu","propZDepth","zDepth","propColored","colored","propProminent","prominent","containerStyle","containerClassName","actionLeft","actionsRight","primary","secondary","id","navEl","only","rightActions","map","toArray","action","position","toolbar","propTypes","oneOfType","number","string","object","bool","node","element","arrayOf","func","isRequired","defaultProps"],"mappings":"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","file":"Toolbar.js","sourcesContent":["import React, { PureComponent, Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\n\nimport invalidIf from '../utils/PropTypes/invalidIf';\nimport between from '../utils/PropTypes/between';\nimport Paper from '../Papers/Paper';\nimport ToolbarTitle from './ToolbarTitle';\n\nexport default class Toolbar extends PureComponent {\n  static propTypes = {\n    /**\n     * An optional id to provide to the toolbar. If this is specified and the `titleId` is not, the title\n     * will gain an id of `${id}-title`. This will not be applied to the `titleMenu`.\n     *\n     * @see {@link #titleId}\n     */\n    id: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional style to apply to the toolbar.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the toolbar,\n     */\n    className: PropTypes.string,\n\n    /*\n     * An optional style to apply to the `h2` surrounding the `title` prop.\n     */\n    titleStyle: PropTypes.object,\n\n    /*\n     * An optional className to apply to the `h2` surrounding the `title` prop.\n     */\n    titleClassName: PropTypes.string,\n\n    /**\n     * Boolean if the toolbar should more prominent. This will double the height of the toolbar.\n     */\n    prominent: PropTypes.bool,\n\n    /**\n     * Boolean if the toolbar's title should be more prominent. This will move the title to the\n     * second line of the toolbar. This only works when the `prominent` prop is true as well.\n     */\n    prominentTitle: PropTypes.bool,\n\n    /**\n     * The current title of the page to show in the toolbar. It is invalid to specify both a\n     * `title` and a `titleMenu`. Only one should be given.\n     */\n    title: invalidIf(PropTypes.node, 'titleMenu'),\n\n    /**\n     * An optional id to give the main title in the toolbar. This will not be applied to the\n     * `titleMenu`.\n     */\n    titleId: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional title menu to display instead of the title. This should be a `SelectField` component.\n     * It is cloned with some additional props, so if the `SelectField` is separated into a separate\n     * component, the following props must be passed to get the correct styling: `className`, `block`,\n     * `paddedBlock`, `position`.\n     */\n    titleMenu: PropTypes.element,\n\n    /**\n     * This prop is used for rendering an optional navigation button to the left of the `title`\n     * or the `titleMenu` component. This needs to be an icon `Button` because some additional props\n     * are cloned into it.\n     */\n    nav: PropTypes.element,\n\n    /**\n     * Any additional actions to display to the right of the title. This should be a list or a single\n     * `Button` to display. The buttons get cloned with an additional className for toolbar styling.\n     */\n    actions: PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.arrayOf(PropTypes.element),\n    ]),\n\n    /**\n     * Any children to display in the toolbar. This will be displayed between the optional title and\n     * actions.\n     */\n    children: PropTypes.node,\n\n    /**\n     * Boolean if the toolbar should be fixed to the top of the page. This will add some additional box shadow.\n     */\n    fixed: PropTypes.bool,\n\n    /**\n     * Boolean if the nav, actions, and title should share the same color. For a `colored` or dark `themed`\n     * toolbar, they will all be colored white. For a transparent or light `themed` toolbar, the colors will\n     * be the `rgba(0, 0, 0, .87)`. Setting this to false will only style the title to the specific color\n     * stated above.\n     */\n    singleColor: PropTypes.bool,\n\n    /**\n     * Boolean if the toolbar should be colored based off the current theme. This will either style the background\n     * to be fairly white, or fairly black. You can not specify both `themed` and `colored`.\n     */\n    themed: PropTypes.bool,\n\n    /**\n     * Boolean if the toolbar should be colored with the `$md-primary-color`.\n     */\n    colored: invalidIf(PropTypes.bool, 'themed'),\n\n    /**\n     * The component to render the toolbar as.\n     */\n    component: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.string,\n    ]).isRequired,\n\n    /**\n     * Boolean if the toolbar is inset in the page. This will just add some margin around\n     * it.\n     */\n    inset: PropTypes.bool,\n\n    /**\n     * An optional zDepth to enforce for the toolbar. This should be a number between 0 and 5.\n     * If this is omitted, the toolbar will gain a zDepth of 2 when `fixed`.\n     */\n    zDepth: between(PropTypes.number, 0, 5),\n    containerStyle: deprecated(\n      PropTypes.object,\n      'The `container` no longer exists in the `Toolbar`. Use the `style` prop instead'\n    ),\n    containerClassName: deprecated(\n      PropTypes.string,\n      'The `container` no longer exists in the `Toolbar`. Use the `className` prop instead'\n    ),\n    primary: deprecated(PropTypes.bool, 'Use the `colored` prop instead'),\n    secondary: deprecated(\n      PropTypes.bool,\n      'Toolbars can no longer be themed to the secondary color. Use the `colored` prop instead'\n    ),\n    actionLeft: deprecated(PropTypes.element, 'Use the `nav` prop instead'),\n    actionsRight: deprecated(\n      PropTypes.node,\n      'Use the `menu` prop and/or the `actions` prop instead'\n    ),\n  };\n\n  static defaultProps = {\n    singleColor: true,\n    component: 'header',\n  };\n\n  render() {\n    const {\n      style,\n      className,\n      component,\n      titleStyle,\n      titleClassName,\n      prominentTitle,\n      themed,\n      singleColor,\n      actions,\n      fixed,\n      children,\n      inset,\n      titleId,\n      /* eslint-disable no-unused-vars */\n      nav: propNav,\n      title: propTitle,\n      titleMenu: propTitleMenu,\n      zDepth: propZDepth,\n      colored: propColored,\n      prominent: propProminent,\n\n      // deprecated\n      containerStyle,\n      containerClassName,\n      /* eslint-enble no-unused-vars */\n      // deprecated\n      actionLeft,\n      actionsRight,\n      primary,\n      secondary,\n      ...props\n    } = this.props;\n\n    let {\n      colored,\n      title,\n      titleMenu,\n      nav,\n      prominent,\n      zDepth,\n    } = this.props;\n\n    colored = colored || primary || secondary;\n    prominent = prominent || prominentTitle;\n\n    title = (\n      <ToolbarTitle\n        key=\"title\"\n        style={titleStyle}\n        className={titleClassName}\n        prominent={prominentTitle}\n        offset={prominentTitle}\n        id={typeof titleId === 'undefined' && props.id ? `${props.id}-title` : titleId}\n        title={title}\n      />\n    );\n\n    if (nav || actionLeft) {\n      const navEl = Children.only(nav || actionLeft);\n      nav = cloneElement(nav, {\n        className: cn('md-btn--toolbar md-toolbar--action-left', navEl.props.className),\n      });\n    }\n\n    let rightActions;\n    if (actions || actionsRight) {\n      rightActions = Children.map(Children.toArray(actions || actionsRight), action => cloneElement(action, {\n        className: cn('md-btn--toolbar', action.props.className),\n      }));\n\n      rightActions = (\n        <div key=\"actions\" className=\"md-cell--right md-toolbar--action-right\">\n          {rightActions}\n        </div>\n      );\n    }\n\n    if (titleMenu) {\n      titleMenu = Children.only(titleMenu);\n      titleMenu = cloneElement(titleMenu, {\n        className: cn('md-title md-title--toolbar md-select-field--toolbar', {\n          'md-title--toolbar-offset': prominentTitle,\n          'md-title--toolbar-prominent': prominentTitle,\n        }, titleMenu.props.className),\n        position: titleMenu.props.position || 'tl',\n        toolbar: true,\n      });\n    }\n\n    if (typeof zDepth !== 'number') {\n      zDepth = fixed ? 2 : 0;\n    }\n\n    return (\n      <Paper\n        {...props}\n        component={component}\n        zDepth={zDepth}\n        style={style}\n        className={cn('md-toolbar', {\n          'md-background--primary': colored,\n          'md-toolbar--themed': themed,\n          'md-toolbar--text-white': singleColor && colored,\n          'md-toolbar--prominent': prominent,\n          'md-toolbar--fixed': fixed,\n          'md-toolbar--inset': inset,\n        }, className)}\n      >\n        {nav}\n        {title}\n        {titleMenu}\n        {children}\n        {rightActions}\n      </Paper>\n    );\n  }\n}\n"]}