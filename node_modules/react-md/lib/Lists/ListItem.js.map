{"version":3,"sources":["../../src/js/Lists/ListItem.js"],"names":["ListItem","props","state","active","isOpen","visible","defined","v","initiallyOpen","defaultOpen","defaultVisible","window","removeEventListener","_handleOutsideClick","_touchTimeout","clearTimeout","style","className","tileStyle","tileClassName","contentStyle","contentClassName","leftNodeStyle","leftNodeClassName","rightNodeStyle","rightNodeClassName","primaryTextStyle","primaryTextClassName","secondaryTextStyle","secondaryTextClassName","nestedListStyle","nestedListClassName","nestedListHeightRestricted","disabled","leftIcon","leftAvatar","inset","rightIcon","rightAvatar","primaryText","secondaryText","threeLines","children","nestedItems","prependNested","activeClassName","activeBoxStyle","activeBoxClassName","animateNestedItems","expanderIcon","expanderLeft","component","ItemComponent","itemComponent","itemProps","tileProps","passPropsToItem","ariaSize","ariaPos","expanderIconChildren","expanderIconClassName","propVisible","itemRef","context","cascadingId","cascadingMenu","cascadingAnchor","cascadingFixedTo","leftNode","rightNode","nestedList","icon","Children","only","collapser","cloneElement","flipped","icond","avatard","tile","undefined","_setTile","_handleClick","_handleMouseOver","_handleMouseLeave","_handleTouchStart","_handleTouchEnd","_handleKeyDown","_handleKeyUp","_touched","text","sharedProps","Object","assign","ref","_setContainer","Positions","BELOW","propTypes","object","string","bool","node","tabIndex","number","isRequired","oneOfType","func","arrayOf","element","onClick","onMouseOver","onMouseLeave","onTouchStart","onTouchEnd","onKeyDown","onKeyUp","propName","args","validator","defaultProps","contextTypes","focus","_tile","blur","_tileNode","container","_container","e","contains","target","setState","touchedAt","Date","now","time","setTimeout","which","keyCode","addEventListener"],"mappings":"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","file":"ListItem.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\n\nimport themeColors from '../utils/themeColors';\nimport getCollapserStyles from '../utils/getCollapserStyles';\nimport getField from '../utils/getField';\nimport controlled from '../utils/PropTypes/controlled';\nimport { TAB } from '../constants/keyCodes';\nimport anchorShape from '../Helpers/anchorShape';\nimport fixedToShape from '../Helpers/fixedToShape';\nimport AccessibleFakeInkedButton from '../Helpers/AccessibleFakeInkedButton';\nimport Collapse from '../Helpers/Collapse';\nimport FontIcon from '../FontIcons/FontIcon';\nimport getDeprecatedIcon from '../FontIcons/getDeprecatedIcon';\nimport TileAddon from './TileAddon';\nimport ListItemText from './ListItemText';\nimport List from './List';\nimport Menu from '../Menus/Menu';\n\n/**\n * The `ListItem` component is used for rendering a `li` tag with text and optional\n * icons/avatars.\n */\nexport default class ListItem extends PureComponent {\n  static propTypes = {\n    /**\n     * An optional style to apply to the `li` tag.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the `li` tag.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional style to apply to the `.md-list-tile`.\n     *\n     * @see {@link #component}\n     */\n    tileStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the `.md-list-tile`.\n     *\n     * @see {@link #component}\n     */\n    tileClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the div that surrounds the `primaryText` and `secondaryText`\n     * nodes.\n     */\n    contentStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the div that surrounds the `primaryText` and `secondaryText`\n     * nodes.\n     */\n    contentClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the element that is rendered before content node.\n     */\n    leftNodeStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the element that is rendered before content node.\n     */\n    leftNodeClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the element that is rendered after content node.\n     */\n    rightNodeStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the element that is rendered after content node.\n     */\n    rightNodeClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the div surrounding the `primaryText`.\n     */\n    primaryTextStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the div surrounding the `primaryText`.\n     */\n    primaryTextClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the div surrounding the `secondaryText`.\n     */\n    secondaryTextStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the div surrounding the `secondaryText`.\n     */\n    secondaryTextClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the nested `List` that gets created when using `nestedItems`.\n     */\n    nestedListStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the nested `List` that gets created when using `nestedItems`.\n     */\n    nestedListClassName: PropTypes.string,\n\n    /**\n     * Boolean if the nested `List` in a cascading menu should be restricted.\n     */\n    nestedListHeightRestricted: PropTypes.bool,\n\n    /**\n     * Any additional children to display in the `.md-list-tile`. If you use this prop,\n     * you will most likely need to override the `height` for the `.md-list-tile--icon`,\n     * `.md-list-tile--avatar`, `.md-list-tile--two-lines`, and/or `.md-list-tile--three-lines`\n     * to get it to display correctly unless the children are positioned `absolute`.\n     */\n    children: PropTypes.node,\n\n    /**\n     * Boolean if the `ListItem` is disabled.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * An optional tab index for the `.md-list-tile`. If omitted, it will default to the\n     * `AccessibleFakeButton`'s `tabIndex` default prop value.\n     */\n    tabIndex: PropTypes.number,\n\n    /**\n     * The primary text to display. This will only be rendered as a single line. Any overflown\n     * text will be converted to ellipsis.\n     */\n    primaryText: PropTypes.node.isRequired,\n\n    /**\n     * An optional secondary text to display below the `primaryText`. This can be an additional\n     * one or two lines. Like the `primaryText`, and overflown text will be converted to ellipsis.\n     *\n     * You must set the `threeLines` prop to `true` if you want this to be displayed as two lines.\n     */\n    secondaryText: PropTypes.node,\n\n    /**\n     * An optional `FontIcon` to display to the left of the text.\n     */\n    leftIcon: PropTypes.node,\n\n    /**\n     * An optional `Avatar` to display to the left of the text. If you have a mixed `List` of\n     * `FontIcon` and `Avatar`, it is recommended to set the `iconSized` prop on the `Avatar` to\n     * `true` so that the `Avatar` will be scaled down to the `FontIcon` size.\n     */\n    leftAvatar: PropTypes.node,\n\n    /**\n     * An optional `FontIcon` to display to the right of the text.\n     */\n    rightIcon: PropTypes.node,\n\n    /**\n     * An optional `Avatar` to display to the right of the text. If you have a mixed `List` of\n     * `FontIcon` and `Avatar`, it is recommended to set the `iconSized` prop on the `Avatar` to\n     * `true` so that the `Avatar` will be scaled down to the `FontIcon` size.\n     */\n    rightAvatar: PropTypes.node,\n\n    /**\n     * Boolean if the list item should be inset as if there is a `leftIcon` or a `leftAvatar`.\n     * This is used for some lists where only a parent contains the icon.\n     */\n    inset: PropTypes.bool,\n\n    /**\n     * Boolean if the `secondaryText` should span two lines instead of one. This will include\n     * three lines of text in total when including the `primaryText`.\n     */\n    threeLines: PropTypes.bool,\n\n    /**\n     * The component to render the `.md-list-tile` as. This is mostly useful if you\n     * want to use the `ListItem` for navigation and working with the `react-router`'s `Link`\n     * component.\n     *\n     * This prop is **not** the top-most element of the `ListItem` component. To change the\n     * top-most element, see the `itemComponent` prop.\n     *\n     * @see {@link #itemComponent}\n     */\n    component: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n    ]).isRequired,\n\n    /**\n     * The component to render the top-most element of the `ListItem` component. This is the\n     * `.md-list-item` and defaults to the `<li>` element.\n     *\n     * @see {@link #component}\n     * @see {@link #itemProps}\n     */\n    itemComponent: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n    ]).isRequired,\n\n    /**\n     * An optional ref callback to get reference to the top-most element of the `ListItem` component.\n     * Just like other refs, this will provide null when it unmounts.\n     */\n    itemRef: PropTypes.func,\n\n    /**\n     * An optional list of `ListItem`, `ListItemControl`, `Divider`, or `Subheader` components\n     * to render in a nested list. This will inject an expander icon to the right of the text\n     * in the `.md-list-tile` that rotates 180 degrees when open.\n     *\n     * The nested items will be visible once the user clicks on the `ListItem`.\n     *\n     * @see {@link #visible}\n     */\n    nestedItems: PropTypes.arrayOf(PropTypes.node),\n\n    /**\n     * An optional parameter determining whether `nestedItems` should be placed before or after `ListItemText`\n     */\n    prependNested: PropTypes.bool,\n\n    /**\n     * Boolean if the `nestedItems` are visible by default.\n     */\n    defaultVisible: PropTypes.bool,\n\n    /**\n     * Boolean if the `nestedItems` are visible. This will make the `nestedItems` controlled\n     * and require the `onClick` function to be defined.\n     *\n     * @see {@link #defaultVisible}\n     */\n    visible: controlled(PropTypes.bool, 'onClick', 'defaultVisible'),\n\n    /**\n     * An icon to use for the expander icon when there are nested items.\n     */\n    expanderIcon: PropTypes.element,\n\n    /**\n     * Boolean if the expander icon should appear as the left icon instead of the right.\n     */\n    expanderLeft: PropTypes.bool,\n\n    /**\n     * An optional function to call when the `.md-list-tile` is clicked. This is required if the\n     * `visible` prop is defined.\n     */\n    onClick: PropTypes.func,\n\n    /**\n     * An optional function to call when the `.md-list-tile` triggers the `mouseover` event.\n     */\n    onMouseOver: PropTypes.func,\n\n    /**\n     * An optional function to call when the `.md-list-tile` triggers the `mouseleave` event.\n     */\n    onMouseLeave: PropTypes.func,\n\n    /**\n     * An optional function to call when the `.md-list-tile` triggers the `touchstart` event.\n     */\n    onTouchStart: PropTypes.func,\n\n    /**\n     * An optional function to call when the `.md-list-tile` triggers the `touchend` event.\n     */\n    onTouchEnd: PropTypes.func,\n\n    /**\n     * An optional function to call when the `.md-list-tile` triggers the `keydown` event.\n     */\n    onKeyDown: PropTypes.func,\n\n    /**\n     * An optional function to call when the `.md-list-tile` triggers the `keyup` event.\n     */\n    onKeyUp: PropTypes.func,\n\n    /**\n     * Boolean if the `ListItem` is currently active. This will apply the `activeClassName` prop\n     * to the `leftIcon`, `rightIcon`, and the `primaryText`.\n     */\n    active: PropTypes.bool,\n\n    /**\n     * The className to apply to the `leftIcon`, `rightIcon`, and `primaryText` when the `active`\n     * prop is `true`.\n     */\n    activeClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the top-most element of the `ListItem` component (`.md-list-item`)\n     * when the `active` prop is `true`.\n     */\n    activeBoxStyle: PropTypes.object,\n\n    /**\n     * The className to apply to the top-most element of the `ListItem` component (`.md-list-item`)\n     * when the `active` prop is `true`.\n     */\n    activeBoxClassName: PropTypes.string,\n\n    /**\n     * Boolean if the nested items should animate when they appear or disappear.\n     */\n    animateNestedItems: PropTypes.bool,\n\n    /**\n     * Defines the number of items in the list. This is only required when all items in the\n     * list are not present in the DOM.\n     *\n     * @see https://www.w3.org/TR/wai-aria/states_and_properties#aria-setsize\n     */\n    'aria-setsize': PropTypes.number,\n\n    /**\n     * Defines the items position in the list. This is only required when all items in the list\n     * are not present in the DOM. The custom validation just requires this prop if the `aria-setsize`\n     * prop is defined as a helpful reminder.\n     *\n     * @see https://www.w3.org/TR/wai-aria/states_and_properties#aria-posinset\n     */\n    'aria-posinset': (props, propName, ...args) => {\n      let validator = PropTypes.number;\n      if (typeof props['aria-setsize'] !== 'undefined') {\n        validator = validator.isRequired;\n      }\n\n      return validator(props, propName, ...args);\n    },\n\n    /**\n     * Any additional props you would like to supply to the surrounding `<li>` tag for the `ListItem`.\n     * By default, all props will be provided to the inner `AccessibleFakeButton`. If the `passPropsToItem`\n     * prop is enabled, the remaining props will be provided to the `<li>` tag instead and this prop\n     * is probably useless.\n     */\n    itemProps: PropTypes.object,\n\n    /**\n     * Any additional props you would like to add to the inner `AccessibleFakeButton`. By default, all the\n     * remaining props will be provided to the `AccessibleFakeButton`, so this prop is probably useless.\n     * Enabling the `passPropsToItem` prop will change the default behavior so that the remaining props\n     * are provided to the surrounding `<li>` node instead and this prop becomes useful.\n     */\n    tileProps: PropTypes.object,\n\n    /**\n     * All the remaining props should be passed to the surrounding `<li>` node instead of the `AccessibleFakeButton`.\n     *\n     * > NOTE: This will most likely become the default in the next *major* release. Migration warnings will be added\n     * if that is the case.\n     */\n    passPropsToItem: PropTypes.bool,\n    expanderIconChildren: deprecated(PropTypes.node, 'Use `expanderIcon` instead'),\n    expanderIconClassName: deprecated(PropTypes.string, 'Use `expanderIcon` instead'),\n    initiallyOpen: deprecated(PropTypes.bool, 'Use `defaultVisible` instead'),\n    defaultOpen: deprecated(PropTypes.bool, 'Use `defaultVisible` instead'),\n    isOpen: deprecated(PropTypes.bool, 'Use `visible` instead'),\n  };\n\n  static defaultProps = {\n    animateNestedItems: true,\n    activeClassName: 'md-text--theme-primary',\n    component: 'div',\n    itemComponent: 'li',\n    expanderIcon: <FontIcon>keyboard_arrow_down</FontIcon>,\n  };\n\n  static contextTypes = {\n    cascadingId: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n    cascadingMenu: PropTypes.bool,\n    cascadingAnchor: anchorShape,\n    cascadingFixedTo: fixedToShape,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = { active: false };\n\n    if (typeof props.isOpen === 'undefined' && typeof props.visible === 'undefined') {\n      const defined = v => typeof v !== 'undefined';\n      const { initiallyOpen, defaultOpen, defaultVisible } = this.props;\n      let visible = defined(initiallyOpen) ? initiallyOpen : defaultVisible;\n      visible = defined(defaultOpen) ? defaultOpen : visible;\n      visible = !!visible;\n\n      this.state.visible = visible;\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.state.active) {\n      window.removeEventListener('click', this._handleOutsideClick);\n    }\n\n    if (this._touchTimeout) {\n      clearTimeout(this._touchTimeout);\n    }\n  }\n\n  /**\n   * A utility function to focus the `AccessibleFakeInkedButton` in the `ListItem` and also\n   * inject an ink to indicate focus.\n   */\n  focus = () => {\n    if (this._tile) {\n      this._tile.focus();\n    }\n  };\n\n  /**\n   * A utility function to blur the `AccessibleFakeInkedButton` in the `ListItem`.\n   */\n  blur = () => {\n    if (this._tile) {\n      this._tile.blur();\n    }\n  };\n\n  _setTile = (tile) => {\n    if (tile) {\n      this._tile = tile;\n      this._tileNode = findDOMNode(tile);\n    }\n  };\n\n  _setContainer = (container) => {\n    const { itemRef } = this.props;\n    if (container) {\n      this._container = findDOMNode(container);\n    }\n    if (itemRef) {\n      itemRef(container ? this._container : null);\n    }\n  };\n\n  _handleOutsideClick = (e) => {\n    if (this._container && !this._container.contains(e.target)) {\n      window.removeEventListener('click', this._handleOutsideClick);\n      this.setState({ active: false });\n    }\n  };\n\n  _handleClick = (e) => {\n    if (this.props.onClick) {\n      this.props.onClick(e);\n    }\n\n    if (typeof this.state.visible !== 'undefined') {\n      this.setState({ visible: !this.state.visible });\n    }\n  };\n\n  _handleMouseOver = (e) => {\n    if (this.props.onMouseOver) {\n      this.props.onMouseOver(e);\n    }\n\n    if (!this.props.disabled) {\n      this.setState({ active: true });\n    }\n  };\n\n  _handleMouseLeave = (e) => {\n    if (this.props.onMouseLeave) {\n      this.props.onMouseLeave(e);\n    }\n\n    if (!this.props.disabled) {\n      this.setState({ active: false });\n    }\n  };\n\n  _handleTouchStart = (e) => {\n    if (this.props.onTouchStart) {\n      this.props.onTouchStart(e);\n    }\n\n    this._touched = true;\n\n    this.setState({ active: true, touchedAt: Date.now() });\n  };\n\n  _handleTouchEnd = (e) => {\n    if (this.props.onTouchEnd) {\n      this.props.onTouchEnd(e);\n    }\n\n    const time = Date.now() - this.state.touchedAt;\n    this._touchTimeout = setTimeout(() => {\n      this._touchTimeout = null;\n\n      this.setState({ active: false });\n    }, time > 450 ? 0 : 450 - time);\n  };\n\n  _handleKeyUp = (e) => {\n    if (this.props.onKeyUp) {\n      this.props.onKeyUp(e);\n    }\n\n    if ((e.which || e.keyCode) === TAB) {\n      window.addEventListener('click', this._handleOutsideClick);\n      this.setState({ active: true });\n    }\n  };\n\n  _handleKeyDown = (e) => {\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(e);\n    }\n\n    if ((e.which || e.keyCode) === TAB) {\n      window.removeEventListener('click', this._handleOutsideClick);\n      this.setState({ active: false });\n    }\n  };\n\n  render() {\n    const {\n      style,\n      className,\n      tileStyle,\n      tileClassName,\n      contentStyle,\n      contentClassName,\n      leftNodeStyle,\n      leftNodeClassName,\n      rightNodeStyle,\n      rightNodeClassName,\n      primaryTextStyle,\n      primaryTextClassName,\n      secondaryTextStyle,\n      secondaryTextClassName,\n      nestedListStyle,\n      nestedListClassName,\n      nestedListHeightRestricted,\n      disabled,\n      leftIcon,\n      leftAvatar,\n      inset,\n      rightIcon,\n      rightAvatar,\n      primaryText,\n      secondaryText,\n      threeLines,\n      children,\n      nestedItems,\n      prependNested,\n      active,\n      activeClassName,\n      activeBoxStyle,\n      activeBoxClassName,\n      animateNestedItems,\n      expanderIcon,\n      expanderLeft,\n      component,\n      itemComponent: ItemComponent,\n      itemProps,\n      tileProps,\n      passPropsToItem,\n      'aria-setsize': ariaSize,\n      'aria-posinset': ariaPos,\n\n      // deprecated\n      isOpen,\n      expanderIconChildren,\n      expanderIconClassName,\n      /* eslint-disable no-unused-vars */\n      visible: propVisible,\n      defaultVisible,\n      itemRef,\n\n      // deprecated\n      defaultOpen,\n      initiallyOpen,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    const { cascadingId, cascadingMenu, cascadingAnchor, cascadingFixedTo } = this.context;\n    let visible = getField(this.props, this.state, 'visible');\n    if (typeof isOpen !== 'undefined') {\n      visible = isOpen;\n    }\n\n    let leftNode = (\n      <TileAddon\n        key=\"left-addon\"\n        style={leftNodeStyle}\n        className={leftNodeClassName}\n        active={active}\n        activeClassName={activeClassName}\n        icon={leftIcon}\n        avatar={leftAvatar}\n      />\n    );\n\n    let rightNode = (\n      <TileAddon\n        key=\"right-addon\"\n        style={rightNodeStyle}\n        className={rightNodeClassName}\n        active={active}\n        activeClassName={activeClassName}\n        icon={rightIcon}\n        avatar={rightAvatar}\n      />\n    );\n\n    let nestedList;\n    if (nestedItems) {\n      if (!cascadingMenu) {\n        nestedList = (\n          <Collapse collapsed={!visible} animate={animateNestedItems}>\n            <List style={nestedListStyle} className={nestedListClassName}>{nestedItems}</List>\n          </Collapse>\n        );\n      }\n\n      const icon = React.Children.only(getDeprecatedIcon(expanderIconClassName, expanderIconChildren, expanderIcon));\n      const collapser = (\n        <TileAddon\n          key=\"expander-addon\"\n          icon={React.cloneElement(icon, {\n            className: getCollapserStyles({ flipped: visible }, icon.props.className),\n          })}\n          avatar={null}\n        />\n      );\n\n      if (expanderLeft) {\n        if (!leftIcon && !leftAvatar) {\n          leftNode = collapser;\n        }\n      } else if (!rightIcon && !rightAvatar) {\n        rightNode = collapser;\n      }\n    }\n\n    const icond = !!leftIcon || !!rightIcon || !!nestedItems;\n    const avatard = !!leftAvatar || !!rightAvatar;\n\n    const tile = (\n      <AccessibleFakeInkedButton\n        {...tileProps}\n        {...(passPropsToItem ? undefined : props)}\n        component={component}\n        __SUPER_SECRET_REF__={this._setTile}\n        key=\"tile\"\n        onClick={this._handleClick}\n        onMouseOver={this._handleMouseOver}\n        onMouseLeave={this._handleMouseLeave}\n        onTouchStart={this._handleTouchStart}\n        onTouchEnd={this._handleTouchEnd}\n        onKeyDown={this._handleKeyDown}\n        onKeyUp={this._handleKeyUp}\n        disabled={disabled}\n        style={tileStyle}\n        className={cn('md-list-tile', {\n          'md-list-tile--active': this.state.active && !this._touched,\n          'md-list-tile--icon': !secondaryText && icond && !avatard,\n          'md-list-tile--avatar': !secondaryText && avatard,\n          'md-list-tile--two-lines': secondaryText && !threeLines,\n          'md-list-tile--three-lines': secondaryText && threeLines,\n          'md-list-item--inset': inset && !leftIcon && !leftAvatar,\n        }, themeColors({ disabled, text: true }), tileClassName)}\n        aria-expanded={nestedList && !cascadingMenu ? visible : null}\n      >\n        {leftNode}\n        <ListItemText\n          active={active}\n          activeClassName={activeClassName}\n          disabled={disabled}\n          primaryText={primaryText}\n          secondaryText={secondaryText}\n          threeLines={threeLines}\n          style={contentStyle}\n          className={cn({\n            'md-tile-content--left-icon': leftIcon || expanderLeft && nestedItems,\n            'md-tile-content--left-avatar': leftAvatar,\n            'md-tile-content--right-padding': rightIcon || rightAvatar,\n          }, contentClassName)}\n          primaryTextStyle={primaryTextStyle}\n          primaryTextClassName={primaryTextClassName}\n          secondaryTextStyle={secondaryTextStyle}\n          secondaryTextClassName={secondaryTextClassName}\n        />\n        {rightNode}\n        {children}\n      </AccessibleFakeInkedButton>\n    );\n\n    const sharedProps = {\n      ...itemProps,\n      ...(passPropsToItem ? props : undefined),\n      style: Object.assign({}, style, active ? activeBoxStyle : null),\n      className: cn('md-list-item', {\n        'md-list-item--nested-container': nestedItems,\n        [activeBoxClassName]: active,\n      }, className),\n      'aria-setsize': ariaSize,\n      'aria-posinset': ariaPos,\n      ref: this._setContainer,\n    };\n    if (cascadingMenu && nestedItems) {\n      return (\n        <Menu\n          id={cascadingId}\n          visible={visible}\n          onClose={this._handleClick}\n          toggle={tile}\n          block\n          simplified={false}\n          anchor={cascadingAnchor}\n          belowAnchor={null}\n          position={Menu.Positions.BELOW}\n          component={ItemComponent}\n          listStyle={nestedListStyle}\n          listClassName={nestedListClassName}\n          listHeightRestricted={nestedListHeightRestricted}\n          {...sharedProps}\n          fixedTo={cascadingFixedTo}\n        >\n          {nestedItems}\n        </Menu>\n      );\n    }\n\n    return (\n      <ItemComponent {...sharedProps}>\n        {prependNested ? nestedList : null}\n        {tile}\n        {prependNested ? null : nestedList}\n      </ItemComponent>\n    );\n  }\n}\n"]}