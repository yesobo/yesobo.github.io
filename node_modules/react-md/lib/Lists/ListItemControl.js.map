{"version":3,"sources":["../../src/js/Lists/ListItemControl.js"],"names":["ListItemControl","props","className","tileStyle","tileClassName","primaryAction","secondaryAction","primaryText","secondaryText","threeLines","leftIcon","leftAvatar","rightIcon","rightAvatar","control","only","text","label","leftNode","rightNode","icond","avatard","propTypes","style","object","string","node","bool","element","number","propName","args","validator","isRequired"],"mappings":"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","file":"ListItemControl.js","sourcesContent":["import React, { PureComponent, Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nimport themeColors from '../utils/themeColors';\nimport ListItemText from './ListItemText';\nimport TileAddon from './TileAddon';\n\nexport default class ListItemControl extends PureComponent {\n  static propTypes = {\n    /**\n     * An optional style to apply to the `.md-list-item`.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the `.md-list-item`.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional style to apply to the `.md-list-tile`.\n     */\n    tileStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the `.md-list-tile`.\n     */\n    tileClassName: PropTypes.string,\n\n    /**\n     * The primary text to display in the `ListItemControl`. The `primaryAction` or\n     * `secondaryAction` will end up getting the `label` prop injected into it with\n     * a combination of the `primaryText` and `secondaryText`. If the `primaryAction`\n     * or `secondaryAction` already have a label prop, the `label` prop will be used\n     * as the `primaryText`.\n     */\n    primaryText: PropTypes.node,\n\n    /**\n     * An optional secondary text that can be displayed in the label of the `primaryAction`\n     * or `secondaryAction`.\n     */\n    secondaryText: PropTypes.node,\n\n    /**\n     * Boolean if the primary and secondary text will span three lines.\n     */\n    threeLines: PropTypes.bool,\n\n    /**\n     * The primary action of the `ListItemControl`. This _should_ normally\n     * be a type of `SelectionControl`\n     */\n    primaryAction: PropTypes.element,\n\n    /**\n     * The secondary action of the `ListItemControl`. This _should_ normally\n     * be a type of `SelectionControl`. If it is a selection control,\n     * make sure to add the `labelBefore` prop to get correct positioning.\n     */\n    secondaryAction: PropTypes.element,\n\n    /**\n     * An optional `FontIcon` to display to the left of the action.\n     */\n    leftIcon: PropTypes.node,\n\n    /**\n     * An optional `Avatar` to display to the left of the action.\n     */\n    leftAvatar: PropTypes.node,\n\n    /**\n     * An optional `FontIcon` to display to the right of the action.\n     */\n    rightIcon: PropTypes.node,\n\n    /**\n     * An optional `FontIcon` to display to the right of the action.\n     */\n    rightAvatar: PropTypes.node,\n\n    /**\n     * Defines the number of items in the list. This is only required when all items in the\n     * list are not present in the DOM.\n     *\n     * @see https://www.w3.org/TR/wai-aria/states_and_properties#aria-setsize\n     */\n    'aria-setsize': PropTypes.number,\n\n    /**\n     * Defines the items position in the list. This is only required when all items in the list\n     * are not present in the DOM. The custom validation just requires this prop if the `aria-setsize`\n     * prop is defined as a helpful reminder.\n     *\n     * @see https://www.w3.org/TR/wai-aria/states_and_properties#aria-posinset\n     */\n    'aria-posinset': (props, propName, ...args) => {\n      let validator = PropTypes.number;\n      if (typeof props['aria-setsize'] !== 'undefined') {\n        validator = validator.isRequired;\n      }\n\n      return validator(props, propName, ...args);\n    },\n  };\n\n  render() {\n    const {\n      className,\n      tileStyle,\n      tileClassName,\n      primaryAction,\n      secondaryAction,\n      primaryText,\n      secondaryText,\n      threeLines,\n      leftIcon,\n      leftAvatar,\n      rightIcon,\n      rightAvatar,\n      ...props\n    } = this.props;\n\n    let control = Children.only(primaryAction || secondaryAction);\n    const text = (\n      <ListItemText\n        key=\"text\"\n        primaryText={control.props.label || primaryText}\n        secondaryText={secondaryText}\n        className={cn({\n          'md-tile-content--left-icon': leftIcon,\n          'md-tile-content--left-avatar': leftAvatar,\n          'md-tile-content--left-button': primaryAction,\n          'md-tile-content--right-padding': primaryAction,\n        })}\n      />\n    );\n    control = cloneElement(control, {\n      className: cn('md-list-control', {\n        'md-list-control--right': secondaryAction,\n      }, control.props.className),\n      label: text,\n    });\n\n    const leftNode = (\n      <TileAddon\n        key=\"left-addon\"\n        icon={leftIcon}\n        avatar={leftAvatar}\n      />\n    );\n\n    const rightNode = (\n      <TileAddon\n        key=\"right-addon\"\n        icon={rightIcon}\n        avatar={rightAvatar}\n      />\n    );\n\n    const icond = !!leftIcon || !!rightIcon;\n    const avatard = !!leftAvatar || !!rightAvatar;\n\n    return (\n      <li {...props} className={cn('md-list-item', className)}>\n        <div\n          style={tileStyle}\n          className={cn('md-list-tile', {\n            'md-list-tile--icon': !secondaryText && icond && !avatard,\n            'md-list-tile--avatar': !secondaryText && avatard,\n            'md-list-tile--two-lines': secondaryText && !threeLines,\n            'md-list-tile--three-lines': secondaryText && threeLines,\n            'md-list-tile--control-left': primaryAction,\n            'md-list-tile--control-right': secondaryAction,\n          }, themeColors({ text: true }), tileClassName)}\n        >\n          {leftNode}\n          {control}\n          {rightNode}\n        </div>\n      </li>\n    );\n  }\n}\n"]}