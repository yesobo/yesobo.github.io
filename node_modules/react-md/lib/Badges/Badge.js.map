{"version":3,"sources":["../../src/js/Badges/Badge.js"],"names":["Badge","props","single","_isSingleChild","state","element","children","count","_normalizeCount","nextProps","badgeContent","max","nextState","setState","n","parseInt","Number","isNaN","toString","className","badgeStyle","badgeClassName","Component","component","primary","secondary","defaultTheme","default","circular","badgeId","invisibleOnZero","useCircular","content","c","only","badge","text","themeText","propTypes","style","object","string","oneOfType","number","node","isRequired","func","bool","defaultProps"],"mappings":"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","file":"Badge.js","sourcesContent":["import React, { PureComponent, Children, cloneElement, isValidElement } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\n\nimport themeColors from '../utils/themeColors';\n\n/**\n * The main use case of the `Badge` component is for notifications. It can\n * however also place any content floating to whatever children are supplied.\n */\nexport default class Badge extends PureComponent {\n  static propTypes = {\n    /**\n     * An optional style to apply to the badge's container.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the badge's container.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional style to apply to the badge.\n     */\n    badgeStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the badge.\n     */\n    badgeClassName: PropTypes.string,\n\n    /**\n     * The id to give the badge's content. This is required to help with the\n     * `aria-describedby` attribute that should be applied to one of the children.\n     *\n     * If there is only one child that is a valid React element, the `aria-describedby`\n     * will automatically be cloned into that child (so make sure your component passes\n     * that prop correctly).\n     *\n     * If there is only one child, but it is a string or number, the badge's container\n     * will be updated to include the `aria-describedby`.\n     *\n     * If there is more than child, you are required to add it to a child yourself.\n     */\n    badgeId: isRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ])),\n\n    /**\n     * The content to display with the badge's content. The size of this\n     * element is determinate of the location of the content. You might have\n     * to update the positioning yourself.\n     */\n    children: PropTypes.node.isRequired,\n\n    /**\n     * The component to render the badge as.\n     */\n    component: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n    ]).isRequired,\n\n    /**\n     * The content to display in the badge. If the content is a number or a number string,\n     * the number will be normalized if `normalizeContent` is enabled.\n     */\n    badgeContent: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.node,\n    ]).isRequired,\n\n    /**\n     * This will basically update the display value of the content to only be 2 digits. If\n     * a number is greater than 99, 99+ will be displayed instead. This is really just to\n     * keep the count inside the circular bubble.\n     */\n    max: PropTypes.number,\n\n    /**\n     * Boolean if the primary color background should get applied to the badge's content.\n     */\n    primary: PropTypes.bool,\n\n    /**\n     * Boolean if the secondary color background should get applied to the badge's content.\n     */\n    secondary: PropTypes.bool,\n\n    /**\n     * Boolean if the default styles should be applied.\n     */\n    default: PropTypes.bool,\n\n    /**\n     * Boolean if the badge's content should appear in a circular container. If this is\n     * undefined, the content will be in a circular container if the badgeContent is a number.\n     */\n    circular: PropTypes.bool,\n\n    /**\n     * Boolean if the badge's notification should be invisible when the count is 0.\n     */\n    invisibleOnZero: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    max: 99,\n    component: 'div',\n  };\n\n  constructor(props) {\n    super(props);\n\n    const single = this._isSingleChild(props);\n    this.state = {\n      single,\n      element: single && isValidElement(props.children),\n      count: this._normalizeCount(props),\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { badgeContent, max, children } = this.props;\n    let nextState;\n    if (badgeContent !== nextProps.badgeContent || max !== nextProps.max) {\n      nextState = { count: this._normalizeCount(nextProps) };\n    }\n\n    if (children !== nextProps.children) {\n      nextState = nextState || {};\n      nextState.single = this._isSingleChild(nextProps);\n      nextState.element = nextState.single && isValidElement(nextProps.children);\n    }\n\n    if (nextState) {\n      this.setState(nextState);\n    }\n  }\n\n  _isSingleChild({ children }) {\n    return Children.count(children) === 1;\n  }\n\n  _normalizeCount({ badgeContent, max }) {\n    let count;\n    if (max) {\n      const n = parseInt(badgeContent, 10);\n      if (!Number.isNaN(n) && n.toString() === badgeContent.toString()) {\n        count = n > max ? `${max}+` : n;\n      }\n    }\n\n    return count;\n  }\n\n  render() {\n    const { count, single, element } = this.state;\n    const {\n      className,\n      badgeStyle,\n      badgeClassName,\n      badgeContent,\n      component: Component,\n      children,\n      primary,\n      secondary,\n      default: defaultTheme,\n      circular,\n      badgeId,\n      invisibleOnZero,\n      max, // eslint-disable-line no-unused-vars\n      ...props\n    } = this.props;\n\n    const useCircular = typeof circular !== 'undefined' ? circular : typeof count !== 'undefined';\n    let content = children;\n    if (single && element) {\n      const c = Children.only(content);\n      if (!c.props['aria-describedby']) {\n        content = cloneElement(c, { 'aria-describedby': badgeId });\n      }\n    } else if (single && !element && !props['aria-describedby']) {\n      props['aria-describedby'] = badgeId;\n    }\n\n    const badge = (\n      <span\n        id={badgeId}\n        key=\"badge\"\n        role=\"status\"\n        style={badgeStyle}\n        className={cn('md-badge', {\n          'md-badge--circular': useCircular,\n          'md-badge--default': defaultTheme,\n        }, themeColors({\n          primary,\n          secondary,\n          text: useCircular,\n          themeText: !primary && !secondary,\n        }, badgeClassName))}\n      >\n        {count || badgeContent}\n      </span>\n    );\n\n    return (\n      <Component\n        {...props}\n        className={cn('md-badge-container md-inline-block', className)}\n      >\n        {content}\n        {invisibleOnZero && count === 0 ? null : badge}\n      </Component>\n    );\n  }\n}\n"]}