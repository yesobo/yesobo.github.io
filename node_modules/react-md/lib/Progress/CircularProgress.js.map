{"version":3,"sources":["../../src/js/Progress/CircularProgress.js"],"names":["ROATE_DISTANCE","BASE_SIZE","CircularProgress","props","scale","style","className","value","determinateDashoffset","centered","isDeterminate","circleStyle","svgStyle","rotate","strokeDashoffset","Object","assign","WebkitTransform","MozTransform","transform","accessibilityProps","role","propTypes","id","oneOfType","number","string","object","isRequired","bool","defaultProps"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;;;;;AAEA,IAAMA,iBAAiB,MAAM,IAA7B;AACA,IAAMC,YAAY,EAAlB,C,CAAsB;;AAEtB;;;;;;;;;;;;;IAYqBC,gB;;;;;;;;;;;;AACnB;6BA+DS;AAAA,mBASH,KAAKC,KATF;AAAA,UAELC,KAFK,UAELA,KAFK;AAAA,UAGLC,KAHK,UAGLA,KAHK;AAAA,UAILC,SAJK,UAILA,SAJK;AAAA,UAKLC,KALK,UAKLA,KALK;AAAA,UAMLC,qBANK,UAMLA,qBANK;AAAA,UAOLC,QAPK,UAOLA,QAPK;AAAA,UAQFN,KARE;;AAWP,UAAMO,gBAAgB,OAAOH,KAAP,KAAiB,QAAvC;AACA,UAAII,oBAAJ;AACA,UAAIC,WAAWP,KAAf;AACA,UAAIK,aAAJ,EAAmB;AACjB,YAAMG,gCAA8Bb,iBAAiB,GAAjB,GAAuBO,KAArD,SAAN;AACAI,sBAAc;AACZG,4BAAkBN,wBAAyBA,wBAAwB,GAAxB,GAA8BD;AAD7D,SAAd;;AAIAK,mBAAWG,OAAOC,MAAP,CAAc,EAAd,EAAkBX,KAAlB,EAAyB;AAClCY,2BAAiB,0BAAGZ,MAAMY,eAAT,EAA0BJ,MAA1B,CADiB;AAElCK,wBAAc,0BAAGb,MAAMa,YAAT,EAAuBL,MAAvB,CAFoB;AAGlCM,qBAAW,0BAAGd,MAAMc,SAAT,EAAoBN,MAApB;AAHuB,SAAzB,CAAX;AAKD;;AAED,UAAMO,qBAAqB;AACzBC,cAAM,aADmB;AAEzB,yBAAiB,CAFQ;AAGzB,yBAAiB;AAHQ,OAA3B;;AAMA,UAAIX,aAAJ,EAAmB;AACjBU,2BAAmB,eAAnB,IAAsCb,KAAtC;AACD;;AAED,aACE;AAAA;AAAA,qBACMJ,KADN,EAEMiB,kBAFN;AAGE,iBAAOR,QAHT;AAIE,qBAAW,0BAAG,mCAAH,EAAwC;AACjD,iCAAqBH,QAD4B;AAEjD,iDAAqCC,aAFY;AAGjD,mDAAuC,CAACA;AAHS,WAAxC,EAIRJ,SAJQ,CAJb;AASE,iBAAOF,QAAQH,SATjB;AAUE,kBAAQG,QAAQH,SAVlB;AAWE,mBAAQ;AAXV;AAaE;AACE,qBAAW,0BAAG,2BAAH,EAAgC;AACzC,mDAAuC,CAACS;AADC,WAAhC,CADb;AAIE,uBAAY,GAJd;AAKE,yBAAc,OALhB;AAME,iBAAOC,WANT;AAOE,cAAG,IAPL;AAQE,cAAG,IARL;AASE,aAAE;AATJ;AAbF,OADF;AA2BD;;;;;;AAhIkBT,gB,CAEZoB,S,GAAY;AACjB;;;;;;;;;AASAC,MAAI,iCAAkB,oBAAUC,SAAV,CAAoB,CACxC,oBAAUC,MAD8B,EAExC,oBAAUC,MAF8B,CAApB,CAAlB,CAVa;;AAejB;;AAEA;;;;;AAKArB,SAAO,oBAAUsB,MAAV,CAAiBC,UAtBP;;AAwBjB;;;AAGAtB,aAAW,oBAAUoB,MA3BJ;;AA6BjB;;;;;;;AAOAnB,SAAO,uBAAQ,oBAAUkB,MAAlB,EAA0B,CAA1B,EAA6B,GAA7B,CApCU;;AAsCjB;;;AAGArB,SAAO,oBAAUqB,MAAV,CAAiBG,UAzCP;;AA2CjB;;;;AAIApB,yBAAuB,oBAAUiB,MAAV,CAAiBG,UA/CvB;;AAiDjB;;;AAGAnB,YAAU,oBAAUoB;AApDH,C;AAFA3B,gB,CAyDZ4B,Y,GAAe;AACpBzB,SAAO,EADa;AAEpBD,SAAO,CAFa;AAGpBI,yBAAuB,GAHH;AAIpBC,YAAU;AAJU,C;kBAzDHP,gB","file":"CircularProgress.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\n\nimport between from '../utils/PropTypes/between';\n\nconst ROATE_DISTANCE = 360 * 1.75;\nconst BASE_SIZE = 24; // font-icon font size\n\n/**\n * The `CircularProgress` component is used to give visual feedback while your app\n * is loading.\n *\n * There are two different types of circular progress bars: `Determinate` and `Indeterminate`.\n *\n * A `Determinate` circular progress bar should be used when you want to keep track of the current\n * progress. An example would be downloading a file.\n *\n * An `Indeterminate` circular progress bar should be used when you can not keep track of the progress\n * yourself. An example would be waiting for some API call to complete.\n */\nexport default class CircularProgress extends PureComponent {\n  /* eslint-disable max-len */\n  static propTypes = {\n    /**\n     * The `id` prop is required for accessibility concerns.\n     * [Progress Bar Role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_progressbar_role)\n     *\n     * > If the progressbar is describing the loading progress of a particular region of a page, the author\n     * __SHOULD__ use aria-describedby to point to the status, and set the aria-busy attribute to true on the\n     * region until it is finished loading. It is not possible for the user to alter the value of a progressbar\n     * because it is always readonly.\n     */\n    id: isRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ])),\n\n    /* eslint-enable max-len */\n\n    /**\n     * A style object to apply to the SVG. If this is a determinate `CircularProgress`,\n     * the `transform` (and vendor prefixes) styles will be merged with the current\n     * progress rotation.\n     */\n    style: PropTypes.object.isRequired,\n\n    /**\n     * An optional className to apply to the SVG.\n     */\n    className: PropTypes.string,\n\n    /**\n     * The current value of the progress. If this value is defined, it will\n     * be converted to a determinate circular progress. The progress will not\n     * advance unless this value changes.\n     *\n     * This value should also be a number between 0 and 100.\n     */\n    value: between(PropTypes.number, 0, 100),\n\n    /**\n     * The scale for the circular progress.\n     */\n    scale: PropTypes.number.isRequired,\n\n    /**\n     * You probably don't want to update this. I'm not good at SVG. This should\n     * match the SCSS variable `$md-circular-progress-stroke-dashoffset`.\n     */\n    determinateDashoffset: PropTypes.number.isRequired,\n\n    /**\n     * Boolean if the progress should be centered in it's container.\n     */\n    centered: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    style: {},\n    scale: 1,\n    determinateDashoffset: 187,\n    centered: true,\n  };\n\n  render() {\n    const {\n      scale,\n      style,\n      className,\n      value,\n      determinateDashoffset,\n      centered,\n      ...props\n    } = this.props;\n\n    const isDeterminate = typeof value === 'number';\n    let circleStyle;\n    let svgStyle = style;\n    if (isDeterminate) {\n      const rotate = `rotate3d(0, 0, 1, ${ROATE_DISTANCE / 100 * value}deg)`;\n      circleStyle = {\n        strokeDashoffset: determinateDashoffset - (determinateDashoffset / 100 * value),\n      };\n\n      svgStyle = Object.assign({}, style, {\n        WebkitTransform: cn(style.WebkitTransform, rotate),\n        MozTransform: cn(style.MozTransform, rotate),\n        transform: cn(style.transform, rotate),\n      });\n    }\n\n    const accessibilityProps = {\n      role: 'progressbar',\n      'aria-valuemin': 0,\n      'aria-valuemax': 100,\n    };\n\n    if (isDeterminate) {\n      accessibilityProps['aria-valuenow'] = value;\n    }\n\n    return (\n      <svg\n        {...props}\n        {...accessibilityProps}\n        style={svgStyle}\n        className={cn('md-progress md-progress--circular', {\n          'md-block-centered': centered,\n          'md-progress--circular-determinate': isDeterminate,\n          'md-progress--circular-indeterminate': !isDeterminate,\n        }, className)}\n        width={scale * BASE_SIZE}\n        height={scale * BASE_SIZE}\n        viewBox=\"0 0 66 66\"\n      >\n        <circle\n          className={cn('md-circular-progress-path', {\n            'md-circular-progress-path--animated': !isDeterminate,\n          })}\n          strokeWidth=\"6\"\n          strokeLinecap=\"round\"\n          style={circleStyle}\n          cx=\"33\"\n          cy=\"33\"\n          r=\"30\"\n        />\n      </svg>\n    );\n  }\n}\n"]}