{"version":3,"sources":["../../src/js/Progress/LinearProgress.js"],"names":["LinearProgress","props","className","progressClassName","progressStyle","value","query","centered","isDeterminate","accessibilityProps","role","style","width","Object","assign","propTypes","id","oneOfType","number","string","func","object","bool","defaultProps"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;IAkBqBA,c;;;;;;;;;;;;AACnB;6BAqES;AAAA,mBACmF,KAAKC,KADxF;AAAA,UACCC,SADD,UACCA,SADD;AAAA,UACYC,iBADZ,UACYA,iBADZ;AAAA,UAC+BC,aAD/B,UAC+BA,aAD/B;AAAA,UAC8CC,KAD9C,UAC8CA,KAD9C;AAAA,UACqDC,KADrD,UACqDA,KADrD;AAAA,UAC4DC,QAD5D,UAC4DA,QAD5D;AAAA,UACyEN,KADzE;;AAEP,UAAMO,gBAAgB,OAAOH,KAAP,KAAiB,QAAvC;;AAEA,UAAMI,qBAAqB;AACzBC,cAAM,aADmB;AAEzB,yBAAiB,CAFQ;AAGzB,yBAAiB;AAHQ,OAA3B;;AAMA,UAAIC,cAAJ;AACA,UAAIH,aAAJ,EAAmB;AACjBG,gBAAQ,EAAEC,OAAUP,KAAV,MAAF,EAAR;AACAI,2BAAmB,eAAnB,IAAsCJ,KAAtC;AACD;AACD,UAAID,aAAJ,EAAmB;AACjBO,gBAAQE,OAAOC,MAAP,CAAcH,SAAS,EAAvB,EACN,OAAOP,aAAP,KAAyB,UAAzB,GACIA,cAAcC,KAAd,EAAqB,IAArB,CADJ,GAEID,aAHE,CAAR;AAKD;;AAED,aACE;AAAA;AAAA,qBACMH,KADN;AAEE,qBAAW,0BAAG,iCAAH,EAAsC,EAAE,qBAAqBM,QAAvB,EAAtC,EAAyEL,SAAzE;AAFb;AAIE,0DACMO,kBADN;AAEE,iBAAOE,KAFT;AAGE,qBAAW,0BAAG,4BAAH,EAAiC;AAC1C,yCAA6BL,KADa;AAE1C,+CAAmCE,aAFO;AAG1C,iDAAqC,CAACA;AAHI,WAAjC,EAIR,OAAOL,iBAAP,KAA6B,UAA7B,GACGA,kBAAkBE,KAAlB,EAAyB,IAAzB,CADH,GAEGF,iBANK;AAHb;AAJF,OADF;AAmBD;;;;;;AAhHkBH,c,CAEZe,S,GAAY;AACjB;;;;;;;;;AASAC,MAAI,iCAAkB,oBAAUC,SAAV,CAAoB,CACxC,oBAAUC,MAD8B,EAExC,oBAAUC,MAF8B,CAApB,CAAlB,CAVa;;AAejB;AACA;;;AAGAjB,aAAW,oBAAUiB,MAnBJ;;AAqBjB;;;;;;AAMAhB,qBAAmB,oBAAUc,SAAV,CAAoB,CACrC,oBAAUG,IAD2B,EAErC,oBAAUD,MAF2B,CAApB,CA3BF;;AAgCjB;;;;;;AAMAf,iBAAe,oBAAUa,SAAV,CAAoB,CACjC,oBAAUG,IADuB,EAEjC,oBAAUC,MAFuB,CAApB,CAtCE;;AA2CjB;;;;;;;AAOAhB,SAAO,uBAAQ,oBAAUa,MAAlB,EAA0B,CAA1B,EAA6B,GAA7B,CAlDU;;AAoDjB;;;AAGAZ,SAAO,oBAAUgB,IAvDA;;AAyDjB;;;;AAIAf,YAAU,oBAAUe;AA7DH,C;AAFAtB,c,CAkEZuB,Y,GAAe;AACpBjB,SAAO;AADa,C;kBAlEHN,c","file":"LinearProgress.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\nimport between from '../utils/PropTypes/between';\n\n/**\n * There are 3 different types of linear progress bars: `Determinate`,\n * `Indeterminate`, and `Query Indeterminate`.\n *\n * A `Determinate` linear progress bar should be used when you can keep track of the\n * progress and have a percentage complete you can work with. An example would be\n * uploading/downloading a file.\n *\n * An `Indeterminate` linear progress bar should be used when you can not keep track\n * of the progress yourself. An example might be waiting for an API call to complete.\n *\n * A `Query Indeterminate` linear progress bar is used when you are combining\n * `Indeterminate` and `Determinate`. A Linear Progress component can be displayed\n * as a query indeterminate progress bar by adding the prop `query={true}` to the\n * component. Until a progress value is given, it will display the query linear\n * progress animation. Afterwards, it will start the determinate animation of where\n * you manually keep updating the value of the progress.\n */\nexport default class LinearProgress extends PureComponent {\n  /* eslint-disable max-len */\n  static propTypes = {\n    /**\n     * The `id` prop is required for accessibility concerns.\n     * [Progress Bar Role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_progressbar_role)\n     *\n     * > If the progressbar is describing the loading progress of a particular region of a page, the author\n     * __SHOULD__ use aria-describedby to point to the status, and set the aria-busy attribute to true on the\n     * region until it is finished loading. It is not possible for the user to alter the value of a progressbar\n     * because it is always readonly.\n     */\n    id: isRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ])),\n\n    /* eslint-enable max-len */\n    /**\n     * An optional className to apply to the linear progress container.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional className to apply to the progress bar element.\n     *\n     * If a function is specified it will be called to get necessary className.\n     * Current progress value and reference to the component will be passed into the function.\n     */\n    progressClassName: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional style to apply to the progress bar element.\n     *\n     * If a function is specified it will be called to get necessary style.\n     * Current progress value and reference to the component will be passed into the function.\n     */\n    progressStyle: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.object,\n    ]),\n\n    /**\n     * The current value of the progress. If this value is defined, it will\n     * be converted to a determinate circular progress. The progress will not\n     * advance unless this value changes.\n     *\n     * This value should also be a number between 0 and 100.\n     */\n    value: between(PropTypes.number, 0, 100),\n\n    /**\n     * Boolean if this should be a query indeterminate progress bar.\n     */\n    query: PropTypes.bool,\n\n    /**\n     * Boolean if the Linear Progress should be centered. This\n     * will only work if the `max-width` style is set.\n     */\n    centered: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    query: false,\n  };\n\n  render() {\n    const { className, progressClassName, progressStyle, value, query, centered, ...props } = this.props;\n    const isDeterminate = typeof value === 'number';\n\n    const accessibilityProps = {\n      role: 'progressbar',\n      'aria-valuemin': 0,\n      'aria-valuemax': 100,\n    };\n\n    let style;\n    if (isDeterminate) {\n      style = { width: `${value}%` };\n      accessibilityProps['aria-valuenow'] = value;\n    }\n    if (progressStyle) {\n      style = Object.assign(style || {},\n        typeof progressStyle === 'function'\n          ? progressStyle(value, this)\n          : progressStyle\n      );\n    }\n\n    return (\n      <div\n        {...props}\n        className={cn('md-progress md-progress--linear', { 'md-block-centered': centered }, className)}\n      >\n        <div\n          {...accessibilityProps}\n          style={style}\n          className={cn('md-progress--linear-active', {\n            'md-progress--linear-query': query,\n            'md-progress--linear-determinate': isDeterminate,\n            'md-progress--linear-indeterminate': !isDeterminate,\n          }, typeof progressClassName === 'function'\n              ? progressClassName(value, this)\n              : progressClassName\n          )}\n        />\n      </div>\n    );\n  }\n}\n"]}