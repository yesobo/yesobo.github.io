{"version":3,"sources":["../../src/js/Grids/Grid.js"],"names":["DIFF_KEYS","Grid","props","className","stacked","noSpacing","gutter","spacing","container","state","getClassName","setState","nextProps","some","key","style","Component","component","children","propClassName","propTypes","object","string","oneOfType","func","node","bool","number","defaultProps"],"mappings":"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","file":"Grid.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport bem from '../utils/bem';\nimport isValued from '../utils/isValued';\n\nconst DIFF_KEYS = [\n  'className',\n  'stacked',\n  'container',\n  'noSpacing',\n  'gutter',\n  'spacing',\n];\n\nexport default class Grid extends PureComponent {\n  static propTypes = {\n    /**\n     * An optional style to apply to the Grid component. This will only be applied\n     * if the `children` prop is not a callback function.\n     *\n     * @see {@link #children}\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the Grid component. This will only be applied\n     * if the `children` prop is not a callback function.\n     *\n     * @see {@link #children}\n     */\n    className: PropTypes.string,\n\n    /**\n     * The component to render the Grid as. This should probably not be used as much\n     * as the `children` callback function.\n     */\n    component: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n    ]),\n\n    /**\n     * The children can either be renderable React elements or a callback function\n     * that accepts the style and className props to apply so that the styles can\n     * be manually added to whichever component.\n     */\n    children: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n\n    /**\n     * An optional container name to apply to the Grid. This should be the same name as provided\n     * to the [react-md-make-grid-container](/components/grids?tab=2#mixin-react-md-make-grid-container) mixin.\n     */\n    container: PropTypes.string,\n\n    /**\n     * Boolean if the grid should be placed vertically instead of horizontally.\n     */\n    stacked: PropTypes.bool,\n\n    /**\n     * Boolean if all the gutters and spacing should be removed from the grid.\n     */\n    noSpacing: PropTypes.bool,\n\n    /**\n     * When the [react-md-make-custom-grid](/components/grids?tab=2#mixin-react-md-make-custom-grid) mixin\n     * is used, you can use the `gutter` and `spacing` props on the `Grid` to apply the correct className\n     */\n    gutter: PropTypes.number,\n\n    /**\n     * When the [react-md-make-custom-grid](/components/grids?tab=2#mixin-react-md-make-custom-grid) mixin\n     * is used, you can use the `gutter` and `spacing` props on the `Grid` to apply the correct className\n     */\n    spacing: PropTypes.number,\n  };\n\n  static defaultProps = {\n    component: 'div',\n    stacked: false,\n    noSpacing: false,\n  };\n\n  /**\n   * A utility function to get the grid's className based on the Grid's props. This is\n   * used behind the scenes to merge and create the className for the grid.\n   *\n   * ### Example:\n   * ```js\n   * <div className={Grid.getClassName()}>A base grid</div>\n   * <div className={Grid.getClassName({ stacked: true })}>A stacked Grid</div>\n   * ```\n   *\n   * @param {Object=} props - This should be an object of the `Grid`'s props. It\n   *    will extract the needed keys and generate the className.\n   * @return {String} the full className to use for the grid\n   */\n  static getClassName(props = {}) {\n    const { className, stacked, noSpacing, gutter, spacing, container } = props;\n    return bem('md-grid', {\n      'stacked': stacked,\n      'no-spacing': noSpacing,\n      [`${gutter}-${spacing}`]: isValued(gutter) && isValued(spacing),\n      [container]: container,\n    }, className);\n  }\n\n  constructor(props) {\n    super();\n\n    this.state = { className: Grid.getClassName(props) };\n  }\n\n  componentWillMount() {\n    this.setState({ className: Grid.getClassName(this.props) });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (DIFF_KEYS.some(key => this.props[key] !== nextProps[key])) {\n      this.setState({ className: Grid.getClassName(nextProps) });\n    }\n  }\n\n  render() {\n    const { className } = this.state;\n    const {\n      style,\n      component: Component,\n      children,\n      /* eslint-disable no-unused-vars */\n      className: propClassName,\n      container,\n      stacked,\n      noSpacing,\n      gutter,\n      spacing,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    if (typeof children === 'function') {\n      return children({ style, className });\n    }\n\n    return <Component {...props} style={style} className={className}>{children}</Component>;\n  }\n}\n"]}