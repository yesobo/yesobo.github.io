{"version":3,"sources":["../../src/js/Grids/Cell.js"],"names":["DIFF_KEYS","Cell","props","className","align","position","size","order","offset","phoneSize","phoneOrder","phoneOffset","phoneHidden","tabletSize","tabletOrder","tabletOffset","tabletHidden","desktopSize","desktopOrder","desktopOffset","desktopHidden","state","getClassName","setState","nextProps","some","key","style","Component","component","children","propClassName","propTypes","object","string","oneOfType","func","node","oneOf","number","bool","defaultProps"],"mappings":"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","file":"Cell.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport bem from '../utils/bem';\n\nconst DIFF_KEYS = [\n  'className',\n  'align',\n  'position',\n  'size',\n  'offset',\n  'order',\n  'phoneSize',\n  'phoneOrder',\n  'phoneOffset',\n  'phoneHidden',\n  'tabletSize',\n  'tabletOrder',\n  'tabletOffset',\n  'tabletHidden',\n  'desktopSize',\n  'desktopOrder',\n  'desktopOffset',\n  'desktopHidden',\n];\n\nexport default class Cell extends PureComponent {\n  static propTypes = {\n    /**\n     * An optional style to apply to the Cell component. This will only be applied\n     * if the `children` prop is not a callback function.\n     *\n     * @see {@link #children}\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the Cell component. This will only be applied\n     * if the `children` prop is not a callback function.\n     *\n     * @see {@link #children}\n     */\n    className: PropTypes.string,\n\n    /**\n     * The component to render the Cell as. This should probably not be used as much\n     * as the `children` callback function.\n     */\n    component: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n    ]),\n\n    /**\n     * The children can either be renderable React elements or a callback function\n     * that accepts the style and className props to apply so that the styles can\n     * be manually added to whichever component.\n     */\n    children: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n\n    /**\n     * An optional cell alignment to apply. When the `Grid` is not `stacked`,\n     * this will apply to vertical alignment within each \"row\" of the grid.\n     *\n     * Alignments:\n     * - `top` - This will align to the top of the row\n     * - `middle` - This will align to the middle of the row\n     * - `bottom` - This will align to the bottom of the row\n     * - `stretch` - This will make the cell stretch to fill all the available space\n     *   in the row.\n     *\n     * @see {@link #position}\n     */\n    align: PropTypes.oneOf(['top', 'middle', 'bottom', 'stretch']),\n\n    /**\n     * An optional cell position to apply. When the `Grid` is not `stacked`,\n     * this will apply to horizontal alignment within each \"row\" of the grid.\n     *\n     * Positions:\n     * - `center` - This will align the cell to be within the center of the row. This really\n     *    just applies `margin-left: auto; margin-right: auto`.\n     * - `right` - This will align the cell to the end of the row. This really just applies `margin-left: auto`.\n     *\n     * @see {@link #align}\n     */\n    position: PropTypes.oneOf(['center', 'right']),\n\n    /**\n     * An optional size to apply to the cell. This sizing will be applied across all media sizes.\n     * If the size is greater than the number of columns allowed for the media size, it will just\n     * span the entire width.\n     */\n    size: PropTypes.number,\n\n    /**\n     * An optional order to apply to the cell. This order will be applied across all media sizes.\n     */\n    order: PropTypes.number,\n\n    /**\n     * An optional offset to apply to the cell. This will add spacing to the left of the cell.\n     */\n    offset: PropTypes.number,\n\n    /**\n     * An optional size to apply to the cell only on phones.\n     */\n    phoneSize: PropTypes.number,\n\n    /**\n     * An optional order to apply to the cell only on phones.\n     */\n    phoneOrder: PropTypes.number,\n\n    /**\n     * An optional offset to apply to the cell only on phones.\n     */\n    phoneOffset: PropTypes.number,\n\n    /**\n     * Boolean if the cell should be hidden on phones only.\n     */\n    phoneHidden: PropTypes.bool,\n\n    /**\n     * An optional size to apply to the cell only on tablets.\n     */\n    tabletSize: PropTypes.number,\n\n    /**\n     * An optional order to apply to the cell only on tablets.\n     */\n    tabletOrder: PropTypes.number,\n\n    /**\n     * An optional offset to apply to the cell only on tablets.\n     */\n    tabletOffset: PropTypes.number,\n\n    /**\n     * Boolean if the cell should be hidden on tablets only.\n     */\n    tabletHidden: PropTypes.bool,\n\n    /**\n     * An optional size to apply to the cell only on desktops.\n     */\n    desktopSize: PropTypes.number,\n\n    /**\n     * An optional order to apply to the cell only on desktops.\n     */\n    desktopOrder: PropTypes.number,\n\n    /**\n     * An optional offset to apply to the cell only on desktops.\n     */\n    desktopOffset: PropTypes.number,\n\n    /**\n     * Boolean if the cell should be hidden on desktops only.\n     */\n    desktopHidden: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    component: 'div',\n    phoneHidden: false,\n    tabletHidden: false,\n    desktopHidden: false,\n  };\n\n  /**\n   * A utility function to get the cell's className based on the Cell's props. This is\n   * used behind the scenes to merge and create the className for the cell.\n   *\n   * ### Example:\n   * ```js\n   * <div className={Cell.getClassName()}>A simple cell</div>\n   * <div className={Cell.getClassName({ size: 1 })}>A cell with size 1</div>\n   * ```\n   *\n   * @param {Object=} props - This should be an object of the `Cell`'s props. It\n   *    will extract the needed keys and generate the className.\n   * @return {String} the full className to use for the cell\n   */\n  static getClassName(props = {}) {\n    const {\n      className,\n      align,\n      position,\n      size,\n      order,\n      offset,\n      phoneSize,\n      phoneOrder,\n      phoneOffset,\n      phoneHidden,\n      tabletSize,\n      tabletOrder,\n      tabletOffset,\n      tabletHidden,\n      desktopSize,\n      desktopOrder,\n      desktopOffset,\n      desktopHidden,\n    } = props;\n\n    return bem('md-cell', {\n      [align]: align,\n      [position]: position,\n      [size]: size,\n      [`order-${order}`]: order,\n      [`${offset}-offset`]: offset,\n      [`${phoneSize}-phone`]: phoneSize,\n      [`order-${phoneOrder}-phone`]: phoneOrder,\n      [`${phoneOffset}-phone-offset`]: phoneOffset,\n      'phone-hidden': phoneHidden,\n      [`${tabletSize}-tablet`]: tabletSize,\n      [`order-${tabletOrder}-tablet`]: tabletOrder,\n      [`${tabletOffset}-tablet-offset`]: tabletOffset,\n      'tablet-hidden': tabletHidden,\n      [`${desktopSize}-desktop`]: desktopSize,\n      [`order-${desktopOrder}-desktop`]: desktopOrder,\n      [`${desktopOffset}-desktop-offset`]: desktopOffset,\n      'desktop-hidden': desktopHidden,\n    }, className);\n  }\n\n  constructor(props) {\n    super();\n\n    this.state = { className: Cell.getClassName(props) };\n  }\n\n  componentWillMount() {\n    this.setState({ className: Cell.getClassName(this.props) });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (DIFF_KEYS.some(key => this.props[key] !== nextProps[key])) {\n      this.setState({ className: Cell.getClassName(nextProps) });\n    }\n  }\n\n  render() {\n    const { className } = this.state;\n    const {\n      style,\n      component: Component,\n      children,\n      /* eslint-disable no-unused-vars */\n      className: propClassName,\n      align,\n      position,\n      size,\n      offset,\n      order,\n      phoneSize,\n      phoneOrder,\n      phoneOffset,\n      phoneHidden,\n      tabletSize,\n      tabletOrder,\n      tabletOffset,\n      tabletHidden,\n      desktopSize,\n      desktopOrder,\n      desktopOffset,\n      desktopHidden,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    if (typeof children === 'function') {\n      return children({ style, className });\n    }\n\n    return <Component {...props} style={style} className={className}>{children}</Component>;\n  }\n}\n"]}