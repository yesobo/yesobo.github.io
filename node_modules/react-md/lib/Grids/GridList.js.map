{"version":3,"sources":["../../src/js/Grids/GridList.js"],"names":["DIFF_KEYS","GridList","props","className","cellClassName","remaining","getClassName","state","getClassNames","setState","nextProps","some","key","style","cellStyle","Component","component","children","propClassName","propCellClassName","container","noSpacing","stacked","gutter","spacing","align","position","size","offset","order","phoneSize","phoneOrder","phoneOffset","phoneHidden","tabletSize","tabletOrder","tabletOffset","tabletHidden","desktopSize","desktopOrder","desktopOffset","desktopHidden","Children","map","child","childStyle","cloneElement","propTypes","object","string","oneOfType","func","node","bool","number","oneOf","defaultProps"],"mappings":"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","file":"GridList.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport Grid from './Grid';\nimport Cell from './Cell';\n\nconst DIFF_KEYS = [\n  'className',\n  'cellClassName',\n  'stacked',\n  'container',\n  'noSpacing',\n  'gutter',\n  'spacing',\n  'align',\n  'position',\n  'size',\n  'offset',\n  'order',\n  'phoneSize',\n  'phoneOrder',\n  'phoneOffset',\n  'phoneHidden',\n  'tabletSize',\n  'tabletOrder',\n  'tabletOffset',\n  'tabletHidden',\n  'desktopSize',\n  'desktopOrder',\n  'desktopOffset',\n  'desktopHidden',\n];\n\nexport default class GridList extends PureComponent {\n  static propTypes = {\n    /**\n     * An optional style to apply to the Grid component. This will only be applied\n     * if the `children` prop is not a callback function.\n     *\n     * @see {@link #children}\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the Grid component. This will only be applied\n     * if the `children` prop is not a callback function.\n     *\n     * @see {@link #children}\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional style to apply to each child. This will only be applied\n     * if the `children` prop is not a callback function.\n     *\n     * @see {@link #children}\n     */\n    cellStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to each child. This will only be applied\n     * if the `children` prop is not a callback function.\n     *\n     * @see {@link #children}\n     */\n    cellClassName: PropTypes.string,\n\n    /**\n     * The component to render the Cell as. This should probably not be used as much\n     * as the `children` callback function.\n     */\n    component: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n    ]),\n\n    /**\n     * The children can either be renderable React elements or a callback function\n     * that accepts the style and className props to apply so that the styles can\n     * be manually added to whichever component.\n     */\n    children: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n\n    /**\n     * An optional container name to apply to the Grid. This should be the same name as provided\n     * to the [react-md-make-grid-container](/components/grids?tab=2#mixin-react-md-make-grid-container) mixin.\n     */\n    container: PropTypes.string,\n\n    /**\n     * Boolean if the grid should be placed vertically instead of horizontally.\n     */\n    stacked: PropTypes.bool,\n\n    /**\n     * Boolean if all the gutters and spacing should be removed from the grid.\n     */\n    noSpacing: PropTypes.bool,\n\n    /**\n     * When the [react-md-make-custom-grid](/components/grids?tab=2#mixin-react-md-make-custom-grid) mixin\n     * is used, you can use the `gutter` and `spacing` props on the `Grid` to apply the correct className\n     */\n    gutter: PropTypes.number,\n\n    /**\n     * When the [react-md-make-custom-grid](/components/grids?tab=2#mixin-react-md-make-custom-grid) mixin\n     * is used, you can use the `gutter` and `spacing` props on the `Grid` to apply the correct className\n     */\n    spacing: PropTypes.number,\n\n    /**\n     * An optional cell alignment to apply. When the `Grid` is not `stacked`,\n     * this will apply to vertical alignment within each \"row\" of the grid.\n     *\n     * Alignments:\n     * - `top` - This will align to the top of the row\n     * - `middle` - This will align to the middle of the row\n     * - `bottom` - This will align to the bottom of the row\n     * - `stretch` - This will make the cell stretch to fill all the available space\n     *   in the row.\n     *\n     * @see {@link #position}\n     */\n    align: PropTypes.oneOf(['top', 'middle', 'bottom', 'stretch']),\n\n    /**\n     * An optional cell position to apply. When the `Grid` is not `stacked`,\n     * this will apply to horizontal alignment within each \"row\" of the grid.\n     *\n     * Positions:\n     * - `center` - This will align the cell to be within the center of the row. This really\n     *    just applies `margin-left: auto; margin-right: auto`.\n     * - `right` - This will align the cell to the end of the row. This really just applies `margin-left: auto`.\n     *\n     * @see {@link #align}\n     */\n    position: PropTypes.oneOf(['center', 'right']),\n\n    /**\n     * An optional size to apply to the cell. This sizing will be applied across all media sizes.\n     * If the size is greater than the number of columns allowed for the media size, it will just\n     * span the entire width.\n     */\n    size: PropTypes.number,\n\n    /**\n     * An optional order to apply to the cell. This order will be applied across all media sizes.\n     */\n    order: PropTypes.number,\n\n    /**\n     * An optional offset to apply to the cell. This will add spacing to the left of the cell.\n     */\n    offset: PropTypes.number,\n\n    /**\n     * An optional size to apply to the cell only on phones.\n     */\n    phoneSize: PropTypes.number,\n\n    /**\n     * An optional order to apply to the cell only on phones.\n     */\n    phoneOrder: PropTypes.number,\n\n    /**\n     * An optional offset to apply to the cell only on phones.\n     */\n    phoneOffset: PropTypes.number,\n\n    /**\n     * Boolean if the cell should be hidden on phones only.\n     */\n    phoneHidden: PropTypes.bool,\n\n    /**\n     * An optional size to apply to the cell only on tablets.\n     */\n    tabletSize: PropTypes.number,\n\n    /**\n     * An optional order to apply to the cell only on tablets.\n     */\n    tabletOrder: PropTypes.number,\n\n    /**\n     * An optional offset to apply to the cell only on tablets.\n     */\n    tabletOffset: PropTypes.number,\n\n    /**\n     * Boolean if the cell should be hidden on tablets only.\n     */\n    tabletHidden: PropTypes.bool,\n\n    /**\n     * An optional size to apply to the cell only on desktops.\n     */\n    desktopSize: PropTypes.number,\n\n    /**\n     * An optional order to apply to the cell only on desktops.\n     */\n    desktopOrder: PropTypes.number,\n\n    /**\n     * An optional offset to apply to the cell only on desktops.\n     */\n    desktopOffset: PropTypes.number,\n\n    /**\n     * Boolean if the cell should be hidden on desktops only.\n     */\n    desktopHidden: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    component: 'div',\n    stacked: false,\n    noSpacing: false,\n    phoneHidden: false,\n    tabletHidden: false,\n    desktopHidden: false,\n  };\n\n  /**\n   * A utility function to get the grid's className based on the `Grid`'s and `Cell`'s\n   * props. This is * used behind the scenes to merge and create the className for the grid.\n   *\n   * ### Example:\n   * ```js\n   * const { className, cellClassName } = GridList.getClassNames();\n   * const { className, cellClassName } = GridList.getClassNames({ size: 1, container: 'custom' });\n   * ```\n   *\n   * @param {Object=} props - This should be an object of the `Grid`'s props. It\n   *    will extract the needed keys and generate the classNames.\n   * @return {Object} an object containing the `className` and `cellClassName` attributes.\n   */\n  static getClassNames(props = {}) {\n    const { className, cellClassName, ...remaining } = props;\n    return {\n      className: Grid.getClassName({ className, ...remaining }),\n      cellClassName: Cell.getClassName({ className: cellClassName, ...remaining }),\n    };\n  }\n\n  constructor(props) {\n    super();\n\n    this.state = GridList.getClassNames(props);\n  }\n\n  componentWillMount() {\n    this.setState(GridList.getClassNames(this.props));\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (DIFF_KEYS.some(key => this.props[key] !== nextProps[key])) {\n      this.setState(GridList.getClassNames(nextProps));\n    }\n  }\n\n  render() {\n    const { className, cellClassName } = this.state;\n    const {\n      style,\n      cellStyle,\n      component: Component,\n      children,\n      /* eslint-disable no-unused-vars */\n      className: propClassName,\n      cellClassName: propCellClassName,\n      container,\n      noSpacing,\n      stacked,\n      gutter,\n      spacing,\n      align,\n      position,\n      size,\n      offset,\n      order,\n      phoneSize,\n      phoneOrder,\n      phoneOffset,\n      phoneHidden,\n      tabletSize,\n      tabletOrder,\n      tabletOffset,\n      tabletHidden,\n      desktopSize,\n      desktopOrder,\n      desktopOffset,\n      desktopHidden,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    if (typeof children === 'function') {\n      return children({ style, className, cellStyle, cellClassName });\n    }\n\n    return (\n      <Component {...props} style={style} className={className}>\n        {React.Children.map(children, (child) => {\n          if (!child) {\n            return child;\n          }\n\n          let childStyle = child.props.style;\n          if (cellStyle) {\n            childStyle = childStyle ? { ...cellStyle, ...childStyle } : cellStyle;\n          }\n\n          return React.cloneElement(child, {\n            style: childStyle,\n            className: cn(child.props.className, cellClassName),\n          });\n        })}\n      </Component>\n    );\n  }\n}\n"]}