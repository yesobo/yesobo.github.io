{"version":3,"sources":["../../src/js/Sliders/DiscreteValue.js"],"names":["DiscreteValue","props","style","className","discrete","dragging","thumbLeft","active","value","valuePrecision","valueStr","toFixed","split","w","d","parseInt","Object","assign","left","propTypes","object","string","bool","number","isRequired"],"mappings":";;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;IAEqBA,a;;;;;;;;;;;6BAYV;AAAA,mBAWH,KAAKC,KAXF;AAAA,UAELC,KAFK,UAELA,KAFK;AAAA,UAGLC,SAHK,UAGLA,SAHK;AAAA,UAILC,QAJK,UAILA,QAJK;AAAA,UAKLC,QALK,UAKLA,QALK;AAAA,UAMLC,SANK,UAMLA,SANK;AAAA,UAOLC,MAPK,UAOLA,MAPK;AAAA,UAQLC,KARK,UAQLA,KARK;AAAA,UASLC,cATK,UASLA,cATK;AAAA,UAUFR,KAVE;;AAaP,UAAI,CAACG,QAAD,IAAa,CAACG,MAAlB,EAA0B;AACxB,eAAO,IAAP;AACD;;AAED,UAAIG,WAAWF,MAAMG,OAAN,CAAcF,cAAd,CAAf;AACA,UAAIA,iBAAiB,CAArB,EAAwB;AAAA,8BACPC,SAASE,KAAT,CAAe,GAAf,CADO;AAAA;AAAA,YACfC,CADe;AAAA,YACZC,CADY;;AAEtB,YAAIC,SAASD,CAAT,EAAY,EAAZ,MAAoB,CAAxB,EAA2B;AACzBJ,qBAAWG,CAAX;AACD;AACF;AACD,aACE;AAAA;AAAA,qBACMZ,KADN;AAEE,iBAAOe,OAAOC,MAAP,CAAc,EAAd,EAAkBf,KAAlB,EAAyB,EAAEgB,MAAMZ,SAAR,EAAzB,CAFT;AAGE,qBAAW,0BAAG,0BAAH,EAA+BH,SAA/B,EAA0C;AACnD,kDAAsCE;AADa,WAA1C;AAHb;AAOGK;AAPH,OADF;AAWD;;;;;;AA/CkBV,a,CACZmB,S,GAAY;AACjBjB,SAAO,oBAAUkB,MADA;AAEjBjB,aAAW,oBAAUkB,MAFJ;AAGjBjB,YAAU,oBAAUkB,IAHH;AAIjBjB,YAAU,oBAAUiB,IAJH;AAKjBf,UAAQ,oBAAUe,IALD;AAMjBd,SAAO,oBAAUe,MAAV,CAAiBC,UANP;AAOjBlB,aAAW,oBAAUe,MAAV,CAAiBG,UAPX;AAQjBf,kBAAgB,oBAAUc,MAAV,CAAiBC;AARhB,C;kBADAxB,a","file":"DiscreteValue.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nexport default class DiscreteValue extends PureComponent {\n  static propTypes = {\n    style: PropTypes.object,\n    className: PropTypes.string,\n    discrete: PropTypes.bool,\n    dragging: PropTypes.bool,\n    active: PropTypes.bool,\n    value: PropTypes.number.isRequired,\n    thumbLeft: PropTypes.string.isRequired,\n    valuePrecision: PropTypes.number.isRequired,\n  };\n\n  render() {\n    const {\n      style,\n      className,\n      discrete,\n      dragging,\n      thumbLeft,\n      active,\n      value,\n      valuePrecision,\n      ...props\n    } = this.props;\n\n    if (!discrete || !active) {\n      return null;\n    }\n\n    let valueStr = value.toFixed(valuePrecision);\n    if (valuePrecision > 0) {\n      const [w, d] = valueStr.split('.');\n      if (parseInt(d, 10) === 0) {\n        valueStr = w;\n      }\n    }\n    return (\n      <span\n        {...props}\n        style={Object.assign({}, style, { left: thumbLeft })}\n        className={cn('md-slider-discrete-value', className, {\n          'md-slider-discrete-value--dragging': dragging,\n        })}\n      >\n        {valueStr}\n      </span>\n    );\n  }\n}\n"]}