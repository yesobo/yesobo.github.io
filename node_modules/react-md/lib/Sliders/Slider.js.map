{"version":3,"sources":["../../src/js/Sliders/Slider.js"],"names":["Slider","props","min","max","step","scale","Math","abs","value","defaultValue","distance","_calcDistance","thumbLeft","_calcLeft","trackFillWidth","undefined","trackWidth","label","editable","leftIcon","rightIcon","state","active","dragging","maskInked","_dragAdded","nextProps","setState","_calcTrackWidth","prevProps","prevState","manualIncrement","fn","window","_blurOnOutsideClick","_focusThumb","addDrag","_handleDragMove","_handleDragEnd","rm","removeEventListener","_handleMouseMove","_handleMouseUp","_inkTimeout","clearTimeout","_focusTimeout","classList","invalid","some","contains","cl","e","className","target","match","id","disabled","trackStyle","trackClassName","thumbStyle","thumbClassName","discreteValueStyle","discreteValueClassName","inputWidth","discrete","discreteTicks","tickWidth","valuePrecision","propValue","onChange","onDragChange","discreteInkTransitionTime","stepPrecision","rightChildren","_setField","width","_handleTextFieldChange","_setNode","_handleDragStart","_setTrack","Object","assign","_handleKeyUp","_handleKeyDown","_handleFocus","propTypes","propName","component","others","string","oneOfType","number","style","object","trackFillStyle","trackFillClassName","err","isRequired","name","Error","bool","func","onMouseDown","onTouchStart","element","node","valueDefined","defaultDefined","range","precision","defaultProps","_isTextField","_field","_updatePosition","normalize","x","changedTouches","clientX","_track","offsetWidth","getBoundingClientRect","left","isNewValue","type","_isInTextField","isDiscreteValue","preventDefault","_isValidClassList","_node","track","field","_handleIncrement","incrementedValue","disableTransition","newValue","key","which","keyCode","nextValue","_animateDiscreteInk","cs","getComputedStyle","pl","parseInt","getPropertyValue","ml","wait","setTimeout","leaving","_thumb","querySelector","focus"],"mappings":"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","file":"Slider.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\n\nimport { LEFT, RIGHT, TAB } from '../constants/keyCodes';\nimport getField from '../utils/getField';\nimport isValidClick from '../utils/EventUtils/isValidClick';\nimport { setTouchEvent, removeTouchEvent } from '../utils/EventUtils/touches';\nimport calculateValueDistance from '../utils/NumberUtils/calculateValueDistance';\nimport isWithinStep from '../utils/NumberUtils/isWithinStep';\nimport controlled from '../utils/PropTypes/controlled';\nimport SliderLabel from './SliderLabel';\nimport Track from './Track';\nimport TextField from '../TextFields/TextField';\n\n/**\n * The `Slider` component is used to let users select a value from a continuous\n * or discrete range of values by moving the slider thumb.\n *\n * When the user has finished dragging the Slider or increments the value by using\n * the edit field/keyboard arrows, the value will be rounded to the nearest `step`.\n */\nexport default class Slider extends PureComponent {\n  static propTypes = {\n    /**\n     * An id to use for the `Slider`. This is required if the `label` prop\n     * is defined.\n     */\n    id: (props, propName, component, ...others) => {\n      if (typeof props.label === 'undefined') {\n        return PropTypes.string(props, propName, component, ...others);\n      }\n\n      return isRequiredForA11y(PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string,\n      ]))(props, propName, component, ...others);\n    },\n\n    /**\n     * An optional style to apply to the slider's container.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the slider's container.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional style to apply to the slider's thumb.\n     */\n    thumbStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the slider's thumb.\n     */\n    thumbClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the slider's track.\n     */\n    trackStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the slider's track.\n     */\n    trackClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the slider's track fill.\n     */\n    trackFillStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the slider's track fill.\n     */\n    trackFillClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to a discrete slider's value.\n     */\n    discreteValueStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to a discrete slider's value.\n     */\n    discreteValueClassName: PropTypes.string,\n\n    /**\n     * The default value for the slider. This number must be between the min and max values if\n     * defined. If this is undefined, it's value will be set to the min value.\n     */\n    defaultValue: PropTypes.number,\n\n    /**\n     * The min value for the slider. This value **must** be less than the `max` value.\n     */\n    min: (props, propName, component, ...others) => {\n      let err = PropTypes.number.isRequired(props, propName, component, ...others);\n      if (!err) {\n        const min = props[propName];\n        let name;\n        if (min > props.value) {\n          name = 'value';\n        } else if (typeof props.defaultValue !== 'undefined' && min > props.defaultValue) {\n          name = 'defaultValue';\n        }\n\n        if (name) {\n          err = new Error(\n            `The '${propName}' prop must be less than or equal to the '${name}' prop for the '${component}' but ` +\n            `received: 'min: ${min}' and '${name}: ${props[name]}'`\n          );\n        }\n      }\n\n      return err;\n    },\n\n    /**\n     * The max value for the slider. This value **must** be greater than the `min` value.\n     */\n    max: (props, propName, component, ...others) => {\n      let err = PropTypes.number.isRequired(props, propName, component, ...others);\n      if (!err) {\n        const max = props[propName];\n        let name;\n        if (max < props.value) {\n          name = 'value';\n        } else if (max < props.defaultValue) {\n          name = 'defaultValue';\n        }\n\n        if (name) {\n          err = new Error(\n            `The '${propName}' prop must be greater than or equal to the '${name}' prop for the '${component}' but ` +\n            `received: '${propName}: ${max}' and '${name}: ${props[name]}'`\n          );\n        }\n      }\n\n      return err;\n    },\n\n    /**\n     * Boolean if the slider is disabled.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * An optional value for the slider. This will make the component controlled\n     * and require the `onChange` function.\n     */\n    value: controlled(PropTypes.number, 'onChange'),\n\n    /**\n     * This is called when the slider's value gets updated. The value can be updated\n     * by one of the following:\n     *\n     * - Clicking a section of the slider\n     * - Dragging the slider with the mouse\n     * - Touching a section of the slider.\n     * - Dragging the slider with touch\n     * - Using the text field to update the value either by typing or incrementing\n     * - Using the left or right arrow keys to increment/decrement the value.\n     *\n     * The callback for this function is as follows:\n     *\n     * ```js\n     * onChange(value, event);\n     * ```\n     *\n     * where the event can either be:\n     * - a touch start event\n     * - a touch move event\n     * - a touch end event\n     * - a mouse down event\n     * - a mouse move event\n     * - a mouse up event\n     * - a key up event\n     * - a key down event\n     */\n    onChange: PropTypes.func,\n\n    /**\n     * This is only called when the user is dragging the slider with either\n     * the mouse or touch. Probably not really useful. It just includes the\n     * new drag percentage while the `onChange` does not.\n     *\n     * The callback for this function is defined as:\n     *\n     * ```js\n     * onDragChange(dragPercentage, value, (touchMove || mouseMove) event);\n     * ```\n     */\n    onDragChange: PropTypes.func,\n\n    /**\n     * An optional function to call when the slider's container has\n     * the mousedown event.\n     */\n    onMouseDown: PropTypes.func,\n\n    /**\n     * An optional function to call when the slider's container has\n     * the touchstart event.\n     */\n    onTouchStart: PropTypes.func,\n\n    /**\n     * An optional icon or letter to place to the left of the slider.\n     * if you want to use a non-font icon or a letter, use the `md-slider-ind`\n     * className on your element.\n     */\n    leftIcon: PropTypes.element,\n\n    /**\n     * An optional icon or letter to place to the right of the slider.\n     * if you want to use a non-font icon or a letter, use the `md-slider-ind`\n     * className on your element.\n     *\n     * > NOTE: This can not be used if the `editable` prop is true.\n     */\n    rightIcon: PropTypes.element,\n\n    /**\n     * An optional label to display above the slider. If this prop\n     * is set, then an `id` must also be given.\n     */\n    label: PropTypes.node,\n\n    /**\n     * The incremental amount when the user hits left or right with the\n     * keyboard arrows, or the user hits the up or down buttons in the\n     * editable number text field. This number must be a number between\n     * 0 and 1 or a whole number above 1.\n     */\n    step: (props, propName, component, ...others) => {\n      let err = PropTypes.number.isRequired(props, propName, component, ...others);\n      if (!err) {\n        const step = props[propName];\n        if (step <= 0) {\n          err = new Error(\n            `The '${propName}' for the '${component}' must be a number greater than 0. The ` +\n            `current value is '${step}'.`\n          );\n        } else {\n          const valueDefined = typeof props.value !== 'undefined';\n          const defaultDefined = typeof props.defaultValue !== 'undefined';\n          let value = props.value;\n          if (!valueDefined) {\n            value = defaultDefined ? props.defaultValue : props.min;\n          }\n\n          let name;\n          if (!isWithinStep(value, step)) {\n            if (valueDefined) {\n              name = 'value';\n            } else if (defaultDefined) {\n              name = 'defaultValue';\n            } else {\n              name = 'min';\n            }\n          }\n\n          if (name) {\n            err = new Error(\n              `The '${name}' prop on '${component}' should be a number divisible by the ` +\n              `'${propName}' prop. The current value is '${props[name]}' and the '${propName}' ` +\n              `is '${step}'.`\n            );\n          }\n        }\n      }\n\n      return err;\n    },\n\n    /**\n     * Boolean if the Slider should be editable. This will place a number text field\n     * to the right of the slider. If this prop is set to `true`, the `rightIcon`\n     * prop can not be set.\n     */\n    editable: (props, propName, component, ...others) => {\n      if (typeof props[propName] === 'undefined') {\n        return null;\n      }\n\n      let err = PropTypes.bool.isRequired(props, propName, component, ...others);\n      if (!err && typeof props.rightIcon !== 'undefined') {\n        err = new Error(\n          `The '${component}' is unable to be 'editable' and include a 'rightIcon'.`\n        );\n      }\n\n      return err;\n    },\n\n    /**\n     * The width for the number text field when the Slider is editable.\n     */\n    inputWidth: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]).isRequired,\n\n    /**\n     * Boolean if the slider should be discrete. This will update the slider to include a\n     * _balloon_ with the current value inside. It will also not allow the `Slider` to be\n     * editable.\n     */\n    discrete: (props, propName, component, ...others) => {\n      if (typeof props[propName] === 'undefined') {\n        return null;\n      }\n\n      let err = PropTypes.bool(props, propName, component, ...others);\n      if (!err && typeof props.editable !== 'undefined') {\n        err = new Error(\n          `The '${component}' cannot be 'discrete' and 'editable'. Please choose one.`\n        );\n      }\n\n      return err;\n    },\n\n    /**\n     * The width of each tick for a discrete slider with ticks. This can either be a number\n     * which gets converted to `px`, or a valid CSS unit.\n     */\n    tickWidth: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]).isRequired,\n\n    /**\n     * This is number divisible by the total number of values included in the Slider. Every\n     * value that is divisible by this number will include a tick mark. It is common recommended\n     * to have this equal to the `step` prop.\n     *\n     * This prop is completely optional.\n     */\n    discreteTicks: (props, propName, component, ...others) => {\n      if (typeof props[propName] === 'undefined') {\n        return null;\n      }\n\n      let err = PropTypes.number(props, propName, component, ...others);\n      if (!err) {\n        const { min, max, step } = props;\n        const range = Math.abs(max - min);\n\n        if ((range / props[propName]) % 1 !== 0) {\n          err = new Error(\n            `The '${propName}' must be a number divisible by the range set by the 'min' and ` +\n            `'max' props. The current range is '${range}' by including the min: '${min}' and ` +\n            `max: '${max}' values. The current value of '${propName}' is '${props[propName]}'.`\n          );\n        } else if (props[propName] % step !== 0) {\n          err = new Error(\n            `The 'step' prop must be a number divisible by the '${propName}'. It is common to have ` +\n            `them as the same value. The current 'step' is '${step}' and the '${propName}' is '${props[propName]}'.`\n          );\n        }\n      }\n\n      return err;\n    },\n\n    /**\n     * The transition time for a discrete Slider's keyboard focus ink. This should match the\n     * `md-slider-discrete-ink-transition-time` value in your SCSS. This is used because\n     * the ink is only visible temporarily for a discrete slider when keyboard focusing.\n     */\n    discreteInkTransitionTime: PropTypes.number.isRequired,\n\n    /**\n     * The precision that the value should be rounded to when the Slider is updated. This\n     * needs to be a whole number greater than or equal to 0.\n     */\n    valuePrecision: (props, propName, component, ...others) => {\n      let err = PropTypes.number.isRequired(props, propName, component, ...others);\n      if (!err) {\n        const precision = props[propName];\n\n        if (precision % 1 !== 0 || precision < 0) {\n          err = new Error(\n            `The '${propName}' must be a positive whole number or 0 on the '${component}'. ` +\n            `The current '${propName}' is '${precision}'`\n          );\n        }\n      }\n\n      return err;\n    },\n\n    stepPrecision: deprecated(PropTypes.number, 'Use `step` and `valuePrecision` instead'),\n  };\n\n  static defaultProps = {\n    min: 0,\n    max: 100,\n    step: 1,\n    inputWidth: 40,\n    tickWidth: 6,\n    discreteInkTransitionTime: 300,\n    valuePrecision: 0,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const { min, max, step } = props;\n    const scale = Math.abs(max - min) / step;\n\n    let value = typeof props.value !== 'undefined'\n      ? props.value\n      : props.defaultValue;\n\n    if (typeof value === 'undefined') {\n      value = min;\n    }\n\n    const distance = this._calcDistance(value, min, max);\n    const thumbLeft = this._calcLeft(distance);\n    const trackFillWidth = `${distance}%`;\n\n    if (typeof props.value !== 'undefined') {\n      value = undefined;\n    }\n\n    let trackWidth;\n    if (props.label && !props.editable && !props.leftIcon && !props.rightIcon) {\n      trackWidth = '100%';\n    }\n\n    this.state = {\n      value,\n      scale,\n      distance,\n      thumbLeft,\n      trackWidth,\n      trackFillWidth,\n      active: false,\n      dragging: false,\n      maskInked: false,\n    };\n    this._dragAdded = false;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { leftIcon, rightIcon, label, min, max, step, value } = this.props;\n    if (value !== nextProps.value) {\n      const distance = this._calcDistance(nextProps.value, nextProps.min, nextProps.max);\n      this.setState({ distance, trackFillWidth: `${distance}%`, thumbLeft: this._calcLeft(distance) });\n    }\n\n    if (leftIcon !== nextProps.leftIcon\n      || rightIcon !== nextProps.rightIcon\n      || label !== nextProps.label\n    ) {\n      this._calcTrackWidth(nextProps);\n    }\n\n    if (min !== nextProps.min || max !== nextProps.max || step !== nextProps.step) {\n      this.setState({ scale: Math.abs(nextProps.max - nextProps.min) / nextProps.step });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { active, manualIncrement } = this.state;\n    let fn = window[`${active ? 'add' : 'remove'}EventListener`];\n    if (active !== prevState.active) {\n      fn('click', this._blurOnOutsideClick);\n\n      if (active) {\n        this._focusThumb();\n      }\n    }\n\n    const addDrag = active && !manualIncrement;\n    fn = window[`${addDrag ? 'add' : 'remove'}EventListener`];\n    if (this._dragAdded !== addDrag) {\n      fn('mousemove', this._handleDragMove);\n      fn('mouseup', this._handleDragEnd);\n      setTouchEvent(addDrag, window, 'move', this._handleDragMove);\n      setTouchEvent(addDrag, window, 'end', this._handleDragEnd);\n\n      this._dragAdded = addDrag;\n    }\n  }\n\n  componentWillUnmount() {\n    const rm = window.removeEventListener;\n    rm('click', this._blurOnOutsideClick);\n    rm('mousemove', this._handleMouseMove);\n    rm('mouseup', this._handleMouseUp);\n    removeTouchEvent(window, 'move', this._handleDragMove);\n    removeTouchEvent(window, 'end', this._handleDragEnd);\n\n    if (this._inkTimeout) {\n      clearTimeout(this._inkTimeout);\n    }\n\n    if (this._focusTimeout) {\n      clearTimeout(this._focusTimeout);\n    }\n  }\n\n  /**\n   * Gets the `left` position for the thumb based on the value given.\n   *\n   * @param {number} value - The current value.\n   * @return {string} the `calc` string.\n   */\n  _calcLeft(value) {\n    return `calc(${value}% - 6px)`;\n  }\n\n  _calcDistance(value, min, max) {\n    return Math.max(0, Math.min(100, ((value - min) / (max - min)) * 100));\n  }\n\n  /**\n   * Checks if a classList does not contain all the *bad* class names.\n   *\n   * @param {function} classList - The classList to check.\n   * @return {Boolean} true if the classList does not contain any of the *bad* class names.\n   */\n  _isValidClassList(classList) {\n    let invalid = false;\n    ['md-slider-label', 'md-slider-ind', 'md-icon'].some(cl => {\n      invalid = classList.contains(cl);\n      return invalid;\n    });\n\n    return !invalid;\n  }\n\n  _isInTextField(e) {\n    const { className } = e.target;\n\n    // SVG's className is an object instead of a string\n    return typeof className.match === 'function' && className.match(/text-field/);\n  }\n\n  /**\n   * Checks if the target is within the text field container.\n   *\n   * @param {Object} target - The event target.\n   * @return {Boolean} true if the target is in the text field.\n   */\n  _isTextField = (target) => this._field && this._field.contains(target);\n\n  /**\n   * Updates the slider's thumb position and the slider's track fill width based\n   * on the thumb's current x position on the screen.\n   *\n   * The slider distance will be *normalized* when:\n   *  - The user does a quick jump\n   *  - The user stops dragging with the mouse\n   *  - The user drops dragging with touch\n   *\n   * If the position is not *normalized*, the `onDragChange` prop will be called\n   * with the new distance percentage, the value, and the move event.\n   *\n   * The `onChange` function will always be called.\n   *\n   * @param {Object} e - The current event to extract an x location from\n   * @param {bool} normalize - Boolean if the distance should be normalized\n   *    to the current scale of the slider.\n   */\n  _updatePosition = (e, normalize) => {\n    const x = (e.changedTouches ? e.changedTouches[0] : e).clientX;\n    const { scale } = this.state;\n    const { onChange, onDragChange, min, max, step } = this.props;\n\n    const { value, distance } = calculateValueDistance(\n      x,\n      this._track.offsetWidth,\n      this._track.getBoundingClientRect().left,\n      scale,\n      step,\n      min,\n      max,\n      normalize\n    );\n\n    const isNewValue = getField(this.props, this.state, 'value') !== value;\n    if (onChange && isNewValue) {\n      onChange(value, e);\n    }\n\n    if (!normalize && onDragChange && (isNewValue || this.state.distance !== distance)) {\n      onDragChange(distance, value, e);\n    }\n\n    const state = {\n      active: true,\n      distance,\n      manualIncrement: false,\n      dragging: !normalize,\n      thumbLeft: this._calcLeft(distance),\n      trackFillWidth: `${distance}%`,\n    };\n\n    if (e.type === 'touchend' || e.type === 'mousedown') {\n      state.maskInked = false;\n    }\n\n    if (typeof this.props.value === 'undefined') {\n      state.value = value;\n    }\n\n    this.setState(state);\n  };\n\n  /**\n   * This will either allow a user to start dragging the slider or quickly\n   * jump to a new value on the slider if the slider is not disabled.\n   *\n   * This will handle the `touchstart` and `mousedown` events.\n   *\n   * @param {Object} e - The touchstart or mousedown event.\n   */\n  _handleDragStart = (e) => {\n    if (e.type === 'mousedown' && this.props.onMouseDown) {\n      this.props.onMouseDown(e);\n    } else if (e.type === 'touchstart' && this.props.onTouchStart) {\n      this.props.onTouchStart(e);\n    }\n\n    if (this.props.disabled || (e.type === 'mousedown' && !isValidClick(e, 'mousedown')) || this._isInTextField(e)) {\n      return;\n    }\n\n    const { classList } = e.target;\n    const isDiscreteValue = classList.contains('md-slider-discrete-value');\n    if (classList.contains('md-slider-thumb') || isDiscreteValue) {\n      // Prevents text highlighting while dragging.\n      if (e.type.match(/mouse/)) {\n        e.preventDefault();\n      }\n      this.setState({ dragging: true, active: true, manualIncrement: false, maskInked: false });\n    } else if (!this._isTextField(e.target) && this._isValidClassList(classList)) {\n      this._updatePosition(e, true);\n    }\n  };\n\n  _setNode = (node) => {\n    this._node = findDOMNode(node);\n  };\n\n  _setTrack = (track) => {\n    this._track = findDOMNode(track);\n  };\n\n  _setField = (field) => {\n    this._field = findDOMNode(field);\n    this._calcTrackWidth(this.props);\n  };\n\n  _handleDragMove = (e) => {\n    if (this.props.disabled || !this.state.dragging) {\n      return;\n    }\n\n    // Stops the text highlighting while dragging\n    if (e.type.match(/mouse/)) {\n      e.preventDefault();\n    }\n\n    this._updatePosition(e, false);\n  };\n\n  _handleDragEnd = (e) => {\n    if (!this.state.dragging || this.props.disabled || (e.type === 'mouseup' && !isValidClick(e))) {\n      return;\n    }\n\n    this._updatePosition(e, true);\n  };\n\n  /**\n   * This will set the active state of the slider to false if the user\n   * clicks outside of the slider's container.\n   *\n   * @param {Object} e - The window's click event.\n   */\n  _blurOnOutsideClick = (e) => {\n    if ((this.state.dragging && !this.state.manualIncrement) || this.props.disabled) {\n      return;\n    }\n\n    if (!this._node.contains(e.target)) {\n      this.setState({ active: false, maskInked: false });\n    }\n  };\n\n  /**\n   * Updates the slider with the `step` prop and calls the `onChange`\n   * function with the new value.\n   *\n   * @param {number} incrementedValue - The newly incremented value of the slider.\n   * @param {Object} e - Either the text field's change event, mouse down event, or\n   *    touch start event.\n   * @param {bool} disableTransition - Boolean if the jump's transition should be disabled.\n   */\n  _handleIncrement = (incrementedValue, e, disableTransition) => {\n    const { onChange, min, max, discrete } = this.props;\n\n    const value = Math.max(min, Math.min(max, incrementedValue));\n    const distance = this._calcDistance(value, min, max);\n\n    if (onChange) {\n      onChange(value, e);\n    }\n\n    const state = {\n      distance,\n      manualIncrement: true,\n      thumbLeft: this._calcLeft(distance),\n      trackFillWidth: `${distance}%`,\n      dragging: Math.abs(this.state.distance - distance) < 2 && disableTransition,\n    };\n\n    if (typeof this.props.value === 'undefined') {\n      state.value = value;\n    }\n\n    if (e.type === 'keydown' && !discrete) {\n      state.maskInked = true;\n    }\n\n    this.setState(state);\n  };\n\n  _handleTextFieldChange = (newValue, e) => {\n    this._handleIncrement(newValue, e, false);\n  };\n\n  /**\n   * This will increment the Slider's value by the `step` prop. If the left or\n   * right key arrow is pressed.\n   *\n   * @param {Object} e - the keydown event.\n   */\n  _handleKeyDown = (e) => {\n    const key = e.which || e.keyCode;\n    const { min, max, step, disabled } = this.props;\n    if (disabled) {\n      return;\n    }\n\n    if (key === TAB) {\n      this.setState({ active: false, maskInked: false });\n      return;\n    } else if ((key !== LEFT && key !== RIGHT)) {\n      return;\n    }\n\n    let nextValue = getField(this.props, this.state, 'value');\n    nextValue = Math.max(\n      min,\n      Math.min((key === LEFT ? -step : step) + nextValue, max)\n    );\n\n    this._handleIncrement(nextValue, e, true);\n  };\n\n  /**\n   * This function will animate the discrete Slider's ink if it gains focus\n   * by a tab event.\n   *\n   * @param {Object} e - the key up event.\n   */\n  _handleKeyUp = (e) => {\n    if ((e.which || e.keyCode) !== TAB) {\n      return;\n    }\n\n    if (this.props.discrete) {\n      this._animateDiscreteInk();\n    }\n\n    this.setState({ maskInked: true });\n  };\n\n  _handleFocus = () => {\n    this.setState({ active: true });\n  };\n\n  /**\n   * For some reason the width of the track gets set to 0 if the `Slider` has a label and\n   * does not include the `leftIcon`, `rightIcon`, and is not `editable` OR it is\n   * `editable` and does not include the `leftIcon`. All other cases the width works\n   * correctly.\n   *\n   * This function just checks these things, and sets the width accordingly.\n   */\n  _calcTrackWidth = (props) => {\n    const { editable, leftIcon, rightIcon, inputWidth, label } = props;\n\n    if (!label) {\n      this.setState({ trackWidth: null });\n      return;\n    }\n\n    let trackWidth = null;\n    if (!leftIcon && !rightIcon && !editable) {\n      trackWidth = '100%';\n    } else if (editable && !leftIcon) {\n      const cs = window.getComputedStyle(this._field);\n      const pl = parseInt(cs.getPropertyValue('padding-left'), 10);\n      const ml = parseInt(cs.getPropertyValue('margin-left'), 10);\n\n      trackWidth = pl + ml + inputWidth;\n    }\n\n    if (trackWidth) {\n      this.setState({ trackWidth });\n    }\n  };\n\n  /**\n   * The ink for a Discrete slider is only visible for a short time on initial\n   * focus. This function will handle the in/out transitions.\n   */\n  _animateDiscreteInk = () => {\n    const wait = this.props.discreteInkTransitionTime;\n    if (this._inkTimeout) {\n      clearTimeout(this._inkTimeout);\n    }\n\n    this._inkTimeout = setTimeout(() => {\n      this.setState({ leaving: true, maskInked: false });\n\n      this._inkTimeout = setTimeout(() => {\n        this._inkTimeout = null;\n        this.setState({ leaving: false });\n      }, wait);\n    }, wait);\n  };\n\n  /**\n   * This is a helper function for focusing the Slider's thumb component. There\n   * is a short delay because the body sometimes gets focused immediately after\n   * if there is no timeout..\n   */\n  _focusThumb = () => {\n    if (this._focusTimeout) {\n      clearTimeout(this._focusTimeout);\n    }\n\n    this._focusTimeout = setTimeout(() => {\n      this._focusTimeout = null;\n      if (!this._thumb) {\n        this._thumb = this._node.querySelector('.md-slider-thumb');\n      }\n\n      this._thumb.focus();\n    }, 100);\n  };\n\n  render() {\n    const {\n      dragging,\n      active,\n      thumbLeft,\n      trackFillWidth,\n      maskInked,\n      trackWidth,\n      scale,\n      distance,\n    } = this.state;\n\n    const {\n      id,\n      min,\n      max,\n      disabled,\n      className,\n      trackStyle,\n      trackClassName,\n      thumbStyle,\n      thumbClassName,\n      discreteValueStyle,\n      discreteValueClassName,\n      label,\n      editable,\n      step,\n      inputWidth,\n      leftIcon,\n      rightIcon,\n      discrete,\n      discreteTicks,\n      tickWidth,\n      valuePrecision,\n      /* eslint-disable no-unused-vars */\n      value: propValue,\n      onChange,\n      onDragChange,\n      discreteInkTransitionTime,\n\n      // deprecated\n      stepPrecision,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    const value = getField(this.props, this.state);\n    let rightChildren = rightIcon;\n    if (editable) {\n      rightChildren = (\n        <TextField\n          id={`${id}-editor`}\n          ref={this._setField}\n          type=\"number\"\n          value={value}\n          inputClassName=\"md-slider-editor\"\n          style={{ width: inputWidth }}\n          onChange={this._handleTextFieldChange}\n          step={step}\n        />\n      );\n    }\n\n    return (\n      <div\n        {...props}\n        ref={this._setNode}\n        className={cn('md-slider-container', className, {\n          'md-pointer--hover': !disabled,\n        })}\n        onMouseDown={this._handleDragStart}\n        onTouchStart={this._handleDragStart}\n      >\n        <SliderLabel htmlFor={id}>{label}</SliderLabel>\n        <input\n          id={id}\n          type=\"range\"\n          className=\"md-slider-input\"\n          readOnly\n          min={min}\n          max={max}\n          value={value}\n          disabled={disabled}\n        />\n        {leftIcon}\n        <Track\n          ref={this._setTrack}\n          style={Object.assign({}, trackStyle, { width: trackWidth })}\n          className={cn(trackClassName, {\n            'md-slider-track--ind-left': leftIcon,\n            'md-slider-track--ind-right': rightIcon,\n          })}\n          thumbStyle={thumbStyle}\n          thumbClassName={thumbClassName}\n          discreteValueStyle={discreteValueStyle}\n          discreteValueClassName={discreteValueClassName}\n          active={active}\n          dragging={dragging}\n          disabled={disabled}\n          thumbLeft={thumbLeft}\n          trackFillWidth={trackFillWidth}\n          on={!disabled && distance > 0}\n          off={distance === 0}\n          maskInked={maskInked}\n          onThumbKeyUp={this._handleKeyUp}\n          onThumbKeyDown={this._handleKeyDown}\n          onThumbFocus={this._handleFocus}\n          discrete={discrete}\n          tickWidth={tickWidth}\n          discreteTicks={discreteTicks}\n          valuePrecision={valuePrecision}\n          step={step}\n          scale={scale}\n          value={value}\n        />\n        {rightChildren}\n      </div>\n    );\n  }\n}\n"]}