{"version":3,"sources":["../../src/js/SelectionControls/Checkbox.js"],"names":["Checkbox","props","checkedIcon","uncheckedIcon","checkedIconChildren","checkedIconClassName","uncheckedIconChildren","uncheckedIconClassName","checked","unchecked","propTypes","id","oneOfType","string","number","style","object","className","label","node","labelBefore","bool","name","disabled","onChange","func","value","defaultChecked","inline","defaultProps"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA;;;IAGqBA,Q;;;;;;;;;;;6BAuGV;AAAA,mBAUH,KAAKC,KAVF;AAAA,UAELC,WAFK,UAELA,WAFK;AAAA,UAGLC,aAHK,UAGLA,aAHK;AAAA,UAKLC,mBALK,UAKLA,mBALK;AAAA,UAMLC,oBANK,UAMLA,oBANK;AAAA,UAOLC,qBAPK,UAOLA,qBAPK;AAAA,UAQLC,sBARK,UAQLA,sBARK;AAAA,UASFN,KATE;;AAYP,UAAMO,UAAU,iCAAkBH,oBAAlB,EAAwCD,mBAAxC,EAA6DF,WAA7D,CAAhB;AACA,UAAMO,YAAY,iCAAkBF,sBAAlB,EAA0CD,qBAA1C,EAAiEH,aAAjE,CAAlB;;AAEA,aACE;AACE,cAAK,UADP;AAEE,6BAAqBK,OAFvB;AAGE,+BAAuBC,SAHzB;AAIE;AAJF,SAKMR,KALN,EADF;AASD;;;;;;AA/HkBD,Q,CACZU,S,GAAY;AACjB;;;;AAIAC,MAAI,iCAAkB,oBAAUC,SAAV,CAAoB,CACxC,oBAAUC,MAD8B,EAExC,oBAAUC,MAF8B,CAApB,CAAlB,CALa;;AAUjB;;;AAGAC,SAAO,oBAAUC,MAbA;;AAejB;;;AAGAC,aAAW,oBAAUJ,MAlBJ;;AAoBjB;;;;AAIAK,SAAO,oBAAUC,IAxBA;;AA0BjB;;;AAGAC,eAAa,oBAAUC,IA7BN;;AA+BjB;;;;;AAKAC,QAAM,iCAAkB,oBAAUV,SAAV,CAAoB,CAC1C,oBAAUE,MADgC,EAE1C,oBAAUD,MAFgC,CAApB,CAAlB,CApCW;;AAyCjB;;;AAGAU,YAAU,oBAAUF,IA5CH;;AA8CjB;;;;;;;;AAQAG,YAAU,oBAAUC,IAtDH;;AAwDjB;;;AAGAC,SAAO,oBAAUd,SAAV,CAAoB,CACzB,oBAAUS,IADe,EAEzB,oBAAUP,MAFe,EAGzB,oBAAUD,MAHe,CAApB,CA3DU;;AAiEjB;;;AAGAc,kBAAgB,oBAAUN,IApET;;AAsEjB;;;;AAIAb,WAAS,0BAAW,oBAAUa,IAArB,EAA2B,UAA3B,EAAuC,gBAAvC,CA1EQ;;AA4EjB;;;AAGAO,UAAQ,oBAAUP,IA/ED;;AAiFjB;;;AAGAnB,eAAa,oBAAUiB,IApFN;;AAsFjB;;;AAGAhB,iBAAe,oBAAUgB,IAzFR;;AA2FjBf,uBAAqB,0BAAW,oBAAUe,IAArB,EAA2B,2BAA3B,CA3FJ;AA4FjBd,wBAAsB,0BAAW,oBAAUQ,MAArB,EAA6B,2BAA7B,CA5FL;AA6FjBP,yBAAuB,0BAAW,oBAAUa,IAArB,EAA2B,6BAA3B,CA7FN;AA8FjBZ,0BAAwB,0BAAW,oBAAUM,MAArB,EAA6B,6BAA7B;AA9FP,C;AADAb,Q,CAkGZ6B,Y,GAAe;AACpB3B,eAAa;AAAA;AAAA;AAAA;AAAA,GADO;AAEpBC,iBAAe;AAAA;AAAA;AAAA;AAAA;AAFK,C;kBAlGHH,Q","file":"Checkbox.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport deprecated from 'react-prop-types/lib/deprecated';\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\n\nimport controlled from '../utils/PropTypes/controlled';\nimport getDeprecatedIcon from '../FontIcons/getDeprecatedIcon';\nimport FontIcon from '../FontIcons/FontIcon';\nimport SelectionControl from './SelectionControl';\n\n/**\n * The `Checkbox` component is used for the selection of multiple options from a set.\n */\nexport default class Checkbox extends PureComponent {\n  static propTypes = {\n    /**\n     * An id to use with the checkbox. This is used for accessibility and so that the label\n     * triggers the checkbox toggle.\n     */\n    id: isRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ])),\n\n    /**\n     * An optional style to apply to the checkbox's container.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the checkbox's container.\n     */\n    className: PropTypes.string,\n\n    /**\n     * A label to display with the checkbox. This is required for accessibility and triggering\n     * the toggle.\n     */\n    label: PropTypes.node,\n\n    /**\n     * Boolean if the label should appear before the checkbox icon.\n     */\n    labelBefore: PropTypes.bool,\n\n    /**\n     * A name to use for the `Checkbox`. This is required for accessibility. If the checkbox is\n     * part of a group, it is recommended to make this a string ending in `[]` so that the\n     * value can be found from `document.querySelector('input[name=\"someName[]\"]').value`.\n     */\n    name: isRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ])),\n\n    /**\n     * Boolean if the `Checkbox` is disabled.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * An optional function to call when the `checked` state of the `Checkbox` changes.\n     * The callback will include the new checked state and the changeEvent.\n     *\n     * ```js\n     * onChange(changeEvent.target.checked, changeEvent);\n     * ```\n     */\n    onChange: PropTypes.func,\n\n    /**\n     * An optional value for the `Checkbox`. It is recommended to use a value though.\n     */\n    value: PropTypes.oneOfType([\n      PropTypes.bool,\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * Boolean if the `Checkbox` is checked by default.\n     */\n    defaultChecked: PropTypes.bool,\n\n    /**\n     * A boolean if the `Checkbox` is currently checked. This will required the `onChange` prop\n     * to be defined.\n     */\n    checked: controlled(PropTypes.bool, 'onChange', 'defaultChecked'),\n\n    /**\n     * Boolean if the `Checkbox` should be displayed inline.\n     */\n    inline: PropTypes.bool,\n\n    /**\n     * The icon to display when the checkbox is checked.\n     */\n    checkedIcon: PropTypes.node,\n\n    /**\n     * The icon to display when the checkbox is unchecked.\n     */\n    uncheckedIcon: PropTypes.node,\n\n    checkedIconChildren: deprecated(PropTypes.node, 'Use `checkedIcon` instead'),\n    checkedIconClassName: deprecated(PropTypes.string, 'Use `checkedIcon` instead'),\n    uncheckedIconChildren: deprecated(PropTypes.node, 'Use `uncheckedIcon` instead'),\n    uncheckedIconClassName: deprecated(PropTypes.string, 'Use `uncheckedIcon` instead'),\n  };\n\n  static defaultProps = {\n    checkedIcon: <FontIcon>check_box</FontIcon>,\n    uncheckedIcon: <FontIcon>check_box_outline_blank</FontIcon>,\n  };\n\n  render() {\n    const {\n      checkedIcon,\n      uncheckedIcon,\n      // deprecated\n      checkedIconChildren,\n      checkedIconClassName,\n      uncheckedIconChildren,\n      uncheckedIconClassName,\n      ...props\n    } = this.props;\n\n    const checked = getDeprecatedIcon(checkedIconClassName, checkedIconChildren, checkedIcon);\n    const unchecked = getDeprecatedIcon(uncheckedIconClassName, uncheckedIconChildren, uncheckedIcon);\n\n    return (\n      <SelectionControl\n        type=\"checkbox\"\n        checkedCheckboxIcon={checked}\n        uncheckedCheckboxIcon={unchecked}\n        __superSecreteProp\n        {...props}\n      />\n    );\n  }\n}\n"]}