{"version":3,"sources":["../../src/js/SelectionControls/Radio.js"],"names":["Radio","props","checkedIcon","uncheckedIcon","checkedIconChildren","checkedIconClassName","uncheckedIconChildren","uncheckedIconClassName","checked","unchecked","propTypes","id","oneOfType","string","number","style","object","className","label","node","isRequired","labelBefore","bool","name","disabled","onChange","func","value","inline","defaultProps"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA;;;;;;IAMqBA,K;;;;;;;;;;;6BA8FV;AAAA,mBAUH,KAAKC,KAVF;AAAA,UAELC,WAFK,UAELA,WAFK;AAAA,UAGLC,aAHK,UAGLA,aAHK;AAAA,UAKLC,mBALK,UAKLA,mBALK;AAAA,UAMLC,oBANK,UAMLA,oBANK;AAAA,UAOLC,qBAPK,UAOLA,qBAPK;AAAA,UAQLC,sBARK,UAQLA,sBARK;AAAA,UASFN,KATE;;AAYP,UAAMO,UAAU,iCAAkBH,oBAAlB,EAAwCD,mBAAxC,EAA6DF,WAA7D,CAAhB;AACA,UAAMO,YAAY,iCAAkBF,sBAAlB,EAA0CD,qBAA1C,EAAiEH,aAAjE,CAAlB;;AAEA,aACE;AACE,cAAK,OADP;AAEE,6BAAqBK,OAFvB;AAGE,+BAAuBC,SAHzB;AAIE;AAJF,SAKMR,KALN,EADF;AASD;;;;;;AAtHkBD,K,CACZU,S,GAAY;AACjB;;;;AAIAC,MAAI,iCAAkB,oBAAUC,SAAV,CAAoB,CACxC,oBAAUC,MAD8B,EAExC,oBAAUC,MAF8B,CAApB,CAAlB,CALa;;AAUjB;;;AAGAC,SAAO,oBAAUC,MAbA;;AAejB;;;AAGAC,aAAW,oBAAUJ,MAlBJ;;AAoBjB;;;;AAIAK,SAAO,oBAAUC,IAAV,CAAeC,UAxBL;;AA0BjB;;;AAGAC,eAAa,oBAAUC,IA7BN;;AA+BjB;;;AAGAC,QAAM,iCAAkB,oBAAUX,SAAV,CAAoB,CAC1C,oBAAUE,MADgC,EAE1C,oBAAUD,MAFgC,CAApB,CAAlB,CAlCW;;AAuCjB;;;AAGAW,YAAU,oBAAUF,IA1CH;;AA4CjB;;;;;;;;AAQAG,YAAU,oBAAUC,IApDH;;AAsDjB;;;AAGAC,SAAO,oBAAUf,SAAV,CAAoB,CACzB,oBAAUU,IADe,EAEzB,oBAAUR,MAFe,EAGzB,oBAAUD,MAHe,CAApB,EAIJO,UA7Dc;;AA+DjB;;;AAGAZ,WAAS,oBAAUc,IAAV,CAAeF,UAlEP;;AAoEjB;;;AAGAQ,UAAQ,oBAAUN,IAvED;;AAyEjB;;;AAGApB,eAAa,oBAAUiB,IAAV,CAAeC,UA5EX;;AA8EjB;;;AAGAjB,iBAAe,oBAAUgB,IAAV,CAAeC,UAjFb;AAkFjBhB,uBAAqB,0BAAW,oBAAUe,IAArB,EAA2B,2BAA3B,CAlFJ;AAmFjBd,wBAAsB,0BAAW,oBAAUQ,MAArB,EAA6B,2BAA7B,CAnFL;AAoFjBP,yBAAuB,0BAAW,oBAAUa,IAArB,EAA2B,6BAA3B,CApFN;AAqFjBZ,0BAAwB,0BAAW,oBAAUM,MAArB,EAA6B,6BAA7B;AArFP,C;AADAb,K,CAyFZ6B,Y,GAAe;AACpB3B,eAAa;AAAA;AAAA;AAAA;AAAA,GADO;AAEpBC,iBAAe;AAAA;AAAA;AAAA;AAAA;AAFK,C;kBAzFHH,K","file":"Radio.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport deprecated from 'react-prop-types/lib/deprecated';\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\n\nimport getDeprecatedIcon from '../FontIcons/getDeprecatedIcon';\nimport FontIcon from '../FontIcons/FontIcon';\nimport SelectionControl from './SelectionControl';\n\n/**\n * The `Radio` component is used for the selection of a single option from a set. Unfortunately\n * the `Radio` component must always be controlled because of the `FontIcon` toggles and how\n * the `radio` input type works. It is recommended to use the `SelectionControlGroup` component\n * to manage the `radio`.\n */\nexport default class Radio extends PureComponent {\n  static propTypes = {\n    /**\n     * An id to use with the radio. This is used for accessibility and so that the label\n     * triggers the radio toggle.\n     */\n    id: isRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ])),\n\n    /**\n     * An optional style to apply to the radio's container.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the radio's container.\n     */\n    className: PropTypes.string,\n\n    /**\n     * A label to display with the radio. This is required for accessibility and triggering\n     * the toggle.\n     */\n    label: PropTypes.node.isRequired,\n\n    /**\n     * Boolean if the label should appear before the radio icon.\n     */\n    labelBefore: PropTypes.bool,\n\n    /**\n     * A name to use for the `Radio`. This is required for accessibility.\n     */\n    name: isRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ])),\n\n    /**\n     * Boolean if the `Radio` is disabled.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * A function to call when the `Radio` triggers the `change` event. The `onChange` callback\n     * will include the current value of the checked `radio` and the change event.\n     *\n     * ```js\n     * onChange(changeEvent.target.value, changeEvent);\n     * ```\n     */\n    onChange: PropTypes.func,\n\n    /**\n     * The value for the `Radio` component.\n     */\n    value: PropTypes.oneOfType([\n      PropTypes.bool,\n      PropTypes.number,\n      PropTypes.string,\n    ]).isRequired,\n\n    /**\n     * A boolean if the `Radio` is currently checked.\n     */\n    checked: PropTypes.bool.isRequired,\n\n    /**\n     * Boolean if the `Radio` should be displayed inline.\n     */\n    inline: PropTypes.bool,\n\n    /**\n     * The icon to display when the radio is checked/selected.\n     */\n    checkedIcon: PropTypes.node.isRequired,\n\n    /**\n     * The icon to display when the radio is not checked/selected.\n     */\n    uncheckedIcon: PropTypes.node.isRequired,\n    checkedIconChildren: deprecated(PropTypes.node, 'Use `checkedIcon` instead'),\n    checkedIconClassName: deprecated(PropTypes.string, 'Use `checkedIcon` instead'),\n    uncheckedIconChildren: deprecated(PropTypes.node, 'Use `uncheckedIcon` instead'),\n    uncheckedIconClassName: deprecated(PropTypes.string, 'Use `uncheckedIcon` instead'),\n  };\n\n  static defaultProps = {\n    checkedIcon: <FontIcon>radio_button_checked</FontIcon>,\n    uncheckedIcon: <FontIcon>radio_button_unchecked</FontIcon>,\n  };\n\n  render() {\n    const {\n      checkedIcon,\n      uncheckedIcon,\n      // deprecated\n      checkedIconChildren,\n      checkedIconClassName,\n      uncheckedIconChildren,\n      uncheckedIconClassName,\n      ...props\n    } = this.props;\n\n    const checked = getDeprecatedIcon(checkedIconClassName, checkedIconChildren, checkedIcon);\n    const unchecked = getDeprecatedIcon(uncheckedIconClassName, uncheckedIconChildren, uncheckedIcon);\n\n    return (\n      <SelectionControl\n        type=\"radio\"\n        checkedCheckboxIcon={checked}\n        uncheckedCheckboxIcon={unchecked}\n        __superSecreteProp\n        {...props}\n      />\n    );\n  }\n}\n"]}