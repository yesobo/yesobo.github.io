{"version":3,"sources":["../../src/js/SelectionControls/SelectionControl.js"],"names":["preventDouble","validator","validate","props","propName","others","err","__superSecreteProp","SelectionControl","_setInput","input","_input","_setControl","control","_control","_setContainer","container","_container","_getIcon","checkedIcon","uncheckedIcon","type","checked","state","prefix","iconClassName","children","icon","cloneElement","inherit","_handleKeyDown","e","onKeyDown","key","which","keyCode","click","_handleChange","onChange","target","value","setState","defaultChecked","id","style","className","inline","name","disabled","labelBefore","tabIndex","inkDisabled","disabledInteractions","ariaLabel","ariaLabelledBy","propLabel","label","propChildren","tooltip","checkedCheckboxIcon","uncheckedCheckboxIcon","checkedRadioIcon","uncheckedRadioIcon","checkedRadioIconChildren","checkedRadioIconClassName","uncheckedRadioIconChildren","uncheckedRadioIconClassName","checkedCheckboxIconChildren","checkedCheckboxIconClassName","uncheckedCheckboxIconChildren","uncheckedCheckboxIconClassName","isSwitch","hint","secondary","text","propTypes","oneOfType","string","number","object","oneOf","isRequired","node","bool","func","element","arrayOf","defaultProps"],"mappings":"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","file":"SelectionControl.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\n\nimport { SPACE } from '../constants/keyCodes';\nimport getField from '../utils/getField';\nimport themeColors from '../utils/themeColors';\nimport oneRequiredForA11y from '../utils/PropTypes/oneRequiredForA11y';\nimport capitalizeFirst from '../utils/StringUtils/capitalizeFirst';\nimport AccessibleFakeInkedButton from '../Helpers/AccessibleFakeInkedButton';\nimport FontIcon from '../FontIcons/FontIcon';\nimport SwitchTrack from './SwitchTrack';\n\n/**\n * Prevents a second warning from appearing when using the deprecated or a11y required\n * props by using the `__superSecretProp`.... So secret!\n */\nfunction preventDouble(validator) {\n  return function validate(props, propName, ...others) {\n    let err = validator(props, propName, ...others);\n    if (err && props.__superSecreteProp) {\n      err = null;\n    }\n\n    return err;\n  };\n}\n\n/**\n * The `SelectionControl` component is used to render any of the `Radio`, `Checkbox`, or `Switch`\n * selection control type. This component might eventually replace all three since they use this\n * anyways. I am not sure yet though.\n */\nexport default class SelectionControl extends PureComponent {\n  static propTypes = {\n    /**\n     * An id to use with the selection control. This is used for accessibility and so that the label\n     * triggers the selection control toggle.\n     */\n    id: preventDouble(isRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]))),\n\n    /**\n     * An optional label to apply to the checkbox when there is no visible label.\n     */\n    'aria-label': oneRequiredForA11y(PropTypes.string, 'label', 'aria-labelledby'),\n\n    /**\n     * An optional id that points to a label for the selection control when there is no visible label.\n     */\n    'aria-labelledby': PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional style to apply to the selection control's container.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the selection control's container.\n     */\n    className: PropTypes.string,\n\n    /**\n     * The type of selection control to render.\n     */\n    type: PropTypes.oneOf(['checkbox', 'radio', 'switch']).isRequired,\n\n    /**\n     * A label to display with the selection control. This is required for accessibility and triggering\n     * the toggle.\n     */\n    label: PropTypes.node,\n\n    /**\n     * Boolean if the label should appear before the checkbox/radio icon or switch.\n     */\n    labelBefore: PropTypes.bool,\n\n    /**\n     * A name to use for the `SelectionControl`. This is required for accessibility. If the `type`\n     * is a `checkbox` and it is part of a group, it is recommended to make this a string ending\n     * in `[]` so that the value can be found from `document.querySelector('input[name=\"someName[]\"]').value`.\n     */\n    name: preventDouble(isRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]))),\n\n    /**\n     * Boolean if the `Radio` is disabled.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * A function to call when the `SelectionControl` triggers the `change` event. The `onChange`\n     * callback will either include:\n     * - the currently changed radio's value\n     * - the next checked state for the `Switch` or `Checkbox`.\n     *\n     * as the first parameter followed by the change event.\n     *\n     * ```js\n     * // Radio\n     * onChange(changeEvent.target.value, changeEvent);\n     *\n     * // Checkbox or Switch\n     * onChange(changeEvent.target.checked, changeEvent);\n     * ```\n     */\n    onChange: PropTypes.func,\n\n    /**\n     * An optional function to call when the `keydown` event is triggered.\n     */\n    onKeyDown: PropTypes.func,\n\n    /**\n     * The value for the `SelectionControl`. It is not required for `Checkbox` and `Switch`,\n     * but it is recommended.\n     */\n    value: PropTypes.oneOfType([\n      PropTypes.bool,\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * A boolean if the `SelectionControl` is currently checked. This _really_ makes the `onChange`\n     * prop required, but since there are cases you might want to have the `onChange` listener on a\n     * `fieldset` or something above the component, it is never set to `required`. It will however\n     * prevent updates if there is no change listener.\n     */\n    checked: PropTypes.bool,\n\n    /**\n     * Boolean if the `Checkbox` or `Switch` are checked by default. This prop is invalid for a\n     * `Radio`.\n     */\n    defaultChecked: PropTypes.bool,\n\n    /**\n     * Boolean if the `SelectionControl` should be displayed inline instead of a block.\n     */\n    inline: PropTypes.bool,\n\n    /**\n     * The icon to use for a checked `checkbox` selection control.\n     */\n    checkedCheckboxIcon: PropTypes.element,\n\n    /**\n     * The icon to use for an unchecked `checkbox` selection control.\n     */\n    uncheckedCheckboxIcon: PropTypes.element,\n\n    /**\n     * The icon to use for a checked `radio` selection control.\n     */\n    checkedRadioIcon: PropTypes.element,\n\n    /**\n     * The icon to use for an unchecked `radio` selection control.\n     */\n    uncheckedRadioIcon: PropTypes.element,\n\n    /**\n     * An optional tooltip to render with the control. This is only used if you inject the\n     * tooltip manually yourself.\n     *\n     * `const TooltippedSelectionControl = injectTooltip(SelectionControl);`\n     */\n    tooltip: PropTypes.node,\n\n    /**\n     * Boolean if the ink should be disabled for radios or checkboxes.\n     *\n     * @see {@link Inks#inkDisabled}\n     */\n    inkDisabled: PropTypes.bool,\n\n    /**\n     * An optional list of ink interactions that should be disabled.\n     *\n     * @see {@link Inks#disabledInteractions}\n     */\n    disabledInteractions: PropTypes.arrayOf(PropTypes.oneOf(['keyboard', 'touch', 'mouse'])),\n\n    /**\n     * An optional tab index to apply to the selection control.\n     */\n    tabIndex: PropTypes.number,\n\n    checkedIcon: preventDouble(deprecated(\n      PropTypes.node,\n      'Use the `checkedCheckboxIconChildren` and `checkedCheckboxIconClassName`  or the ' +\n      '`checkedRadioIconChildren` and `checkedRadioIconClassName` props instead'\n    )),\n    uncheckedIcon: preventDouble(deprecated(\n      PropTypes.node,\n      'Use the `uncheckedCheckboxIconChildren` and `uncheckedCheckboxIconClassName`  or the ' +\n      '`uncheckedRadioIconChildren` and `uncheckedRadioIconClassName` props instead'\n    )),\n    checkedCheckboxIconChildren: deprecated(PropTypes.node, 'Use the `checkedCheckboxIcon` prop instead'),\n    checkedCheckboxIconClassName: deprecated(PropTypes.string, 'Use the `checkedCheckboxIcon` prop instead'),\n    uncheckedCheckboxIconChildren: deprecated(PropTypes.node, 'Use the `uncheckedCheckboxIcon` prop instead'),\n    uncheckedCheckboxIconClassName: deprecated(PropTypes.string, 'Use the `uncheckedCheckboxIcon` prop instead'),\n    checkedRadioIconChildren: deprecated(PropTypes.node, 'Use the `checkedRadioIcon` prop instead'),\n    checkedRadioIconClassName: deprecated(PropTypes.string, 'Use the `checkedRadioIcon` prop instead'),\n    uncheckedRadioIconChildren: deprecated(PropTypes.node, 'Use the `uncheckedRadioIcon` prop instead'),\n    uncheckedRadioIconClassName: deprecated(PropTypes.string, 'Use the `uncheckedRadioIcon` prop instead'),\n\n    /* maybe removed once upgrade again? */\n    __superSecreteProp: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    checkedCheckboxIcon: <FontIcon>check_box</FontIcon>,\n    uncheckedCheckboxIcon: <FontIcon>check_box_outline_blank</FontIcon>,\n    checkedRadioIcon: <FontIcon>radio_button_checked</FontIcon>,\n    uncheckedRadioIcon: <FontIcon>radio_button_unchecked</FontIcon>,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n    if (typeof props.checked === 'undefined') {\n      this.state.checked = !!props.defaultChecked;\n    }\n  }\n\n  /**\n   * Gets the current checked value from the selection control. This is used when you have\n   * an uncontrolled selection control and simply need the checked state from a ref callback.\n   *\n   * @return {boolean} the checked state for the selection control.\\\n   */\n  get checked() {\n    return getField(this.props, this.state, 'checked');\n  }\n\n  _setInput = (input) => {\n    this._input = input;\n  };\n\n  _setControl = (control) => {\n    this._control = control;\n  };\n\n  _setContainer = (container) => {\n    this._container = container;\n  };\n\n  _getIcon = () => {\n    const { checkedIcon, uncheckedIcon, type } = this.props;\n    const checked = getField(this.props, this.state, 'checked');\n    if (checkedIcon || uncheckedIcon) {\n      return checked ? checkedIcon : uncheckedIcon;\n    }\n\n    const prefix = `${checked ? '' : 'un'}checked${capitalizeFirst(type)}Icon`;\n    const iconClassName = this.props[`${prefix}ClassName`];\n    const children = this.props[`${prefix}Children`];\n\n    if (iconClassName || children) {\n      return <FontIcon iconClassName={iconClassName} inherit>{children}</FontIcon>;\n    }\n\n    const icon = this.props[prefix];\n    return icon ? React.cloneElement(icon, { inherit: true }) : null;\n  };\n\n  _handleKeyDown = (e) => {\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(e);\n    }\n\n    const key = e.which || e.keyCode;\n    if (key === SPACE) {\n      this._input.click();\n    }\n  }\n\n  _handleChange = (e) => {\n    const { type, onChange } = this.props;\n    const checked = !getField(this.props, this.state, 'checked');\n    if (onChange) {\n      onChange(type === 'radio' ? e.target.value : checked, e);\n    }\n\n    if (typeof this.props.checked === 'undefined') {\n      this.setState({ checked });\n    }\n  };\n\n  render() {\n    const {\n      id,\n      style,\n      className,\n      inline,\n      type,\n      name,\n      value,\n      disabled,\n      labelBefore,\n      tabIndex,\n      inkDisabled,\n      disabledInteractions,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      /* eslint-disable no-unused-vars */\n      label: propLabel,\n      checked: propChildren,\n      onChange,\n      tooltip,\n      checkedCheckboxIcon,\n      uncheckedCheckboxIcon,\n      checkedRadioIcon,\n      uncheckedRadioIcon,\n      __superSecreteProp,\n\n      // deprecated\n      checkedIcon,\n      uncheckedIcon,\n      checkedRadioIconChildren,\n      checkedRadioIconClassName,\n      uncheckedRadioIconChildren,\n      uncheckedRadioIconClassName,\n      checkedCheckboxIconChildren,\n      checkedCheckboxIconClassName,\n      uncheckedCheckboxIconChildren,\n      uncheckedCheckboxIconClassName,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    const checked = getField(this.props, this.state, 'checked');\n    const isSwitch = type === 'switch';\n    const label = this.props.label && <span>{this.props.label}</span>;\n\n    let control;\n    if (isSwitch) {\n      control = <SwitchTrack disabled={disabled} checked={checked} />;\n    } else {\n      control = (\n        <AccessibleFakeInkedButton\n          inkDisabled={inkDisabled}\n          disabledInteractions={disabledInteractions}\n          role={type}\n          className={cn('md-selection-control-toggle md-btn md-btn--icon', themeColors({\n            disabled,\n            hint: !checked,\n            secondary: checked,\n          }))}\n          aria-checked={checked}\n          tabIndex={tabIndex}\n          disabled={disabled}\n        >\n          {tooltip}\n          {this._getIcon()}\n        </AccessibleFakeInkedButton>\n      );\n    }\n\n\n    return (\n      <div\n        {...props}\n        style={style}\n        className={cn('md-selection-control-container', {\n          'md-selection-control-container--inline': inline,\n          'md-switch-container': isSwitch,\n        }, className)}\n        onKeyDown={this._handleKeyDown}\n      >\n        <input\n          ref={this._setInput}\n          id={id}\n          type={isSwitch ? 'checkbox' : type}\n          checked={checked}\n          onChange={this._handleChange}\n          disabled={disabled}\n          className=\"md-selection-control-input\"\n          name={name}\n          value={value}\n          aria-hidden\n          aria-label={ariaLabel}\n          aria-labelledby={ariaLabelledBy}\n        />\n        <label\n          htmlFor={id}\n          className={cn('md-selection-control-label', {\n            'md-pointer--hover': !disabled,\n          }, themeColors({ disabled, text: !disabled }))}\n        >\n          {labelBefore && label}\n          {control}\n          {!labelBefore && label}\n        </label>\n      </div>\n    );\n  }\n}\n"]}