{"version":3,"sources":["../../src/js/SelectionControls/Switch.js"],"names":["Switch","props","toggled","defaultToggled","checked","defaultChecked","propTypes","id","oneOfType","string","number","style","object","className","label","node","labelBefore","bool","name","disabled","onChange","func","value"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;;;;;;;IAEqBA,M;;;;;;;;;;;6BAgFV;AAAA,mBAKH,KAAKC,KALF;AAAA,UAELC,OAFK,UAELA,OAFK;AAAA,UAGLC,cAHK,UAGLA,cAHK;AAAA,UAIFF,KAJE;;AAOP,UAAI,OAAOC,OAAP,KAAmB,WAAnB,IAAkC,OAAOD,MAAMG,OAAb,KAAyB,WAA/D,EAA4E;AAC1EH,cAAMG,OAAN,GAAgBF,OAAhB;AACD;;AAED,UAAI,OAAOC,cAAP,KAA0B,WAA1B,IAAyC,OAAOF,MAAMI,cAAb,KAAgC,WAA7E,EAA0F;AACxFJ,cAAMI,cAAN,GAAuBF,cAAvB;AACD;;AAED,aAAO,qEAAkB,MAAK,QAAvB,IAAoCF,KAApC,IAA2C,wBAA3C,IAAP;AACD;;;;;;AAhGkBD,M,CACZM,S,GAAY;AACjB;;;;AAIAC,MAAI,iCAAkB,oBAAUC,SAAV,CAAoB,CACxC,oBAAUC,MAD8B,EAExC,oBAAUC,MAF8B,CAApB,CAAlB,CALa;;AAUjB;;;AAGAC,SAAO,oBAAUC,MAbA;;AAejB;;;AAGAC,aAAW,oBAAUJ,MAlBJ;;AAoBjB;;;;AAIAK,SAAO,oBAAUC,IAxBA;;AA0BjB;;;AAGAC,eAAa,oBAAUC,IA7BN;;AA+BjB;;;;AAIAC,QAAM,iCAAkB,oBAAUV,SAAV,CAAoB,CAC1C,oBAAUE,MADgC,EAE1C,oBAAUD,MAFgC,CAApB,CAAlB,CAnCW;;AAwCjB;;;AAGAU,YAAU,oBAAUF,IA3CH;;AA6CjB;;;;;;;;AAQAG,YAAU,oBAAUC,IArDH;;AAuDjB;;;AAGAC,SAAO,oBAAUd,SAAV,CAAoB,CACzB,oBAAUS,IADe,EAEzB,oBAAUP,MAFe,EAGzB,oBAAUD,MAHe,CAApB,CA1DU;;AAgEjB;;;AAGAJ,kBAAgB,oBAAUY,IAnET;;AAqEjB;;;;AAIAb,WAAS,0BAAW,oBAAUa,IAArB,EAA2B,UAA3B,EAAuC,gBAAvC,CAzEQ;;AA2EjBd,kBAAgB,0BAAW,oBAAUc,IAArB,EAA2B,uCAA3B,CA3EC;AA4EjBf,WAAS,0BAAW,oBAAUe,IAArB,EAA2B,gCAA3B;AA5EQ,C;kBADAjB,M","file":"Switch.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport deprecated from 'react-prop-types/lib/deprecated';\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\n\nimport controlled from '../utils/PropTypes/controlled';\nimport SelectionControl from './SelectionControl';\n\nexport default class Switch extends PureComponent {\n  static propTypes = {\n    /**\n     * An id to use with the switch. This is used for accessibility and so that the label\n     * triggers the switch toggle.\n     */\n    id: isRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ])),\n\n    /**\n     * An optional style to apply to the switch's container.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the switch's container.\n     */\n    className: PropTypes.string,\n\n    /**\n     * A label to display with the switch. This is required for accessibility and triggering\n     * the toggle.\n     */\n    label: PropTypes.node,\n\n    /**\n     * Boolean if the label should appear before the switch.\n     */\n    labelBefore: PropTypes.bool,\n\n    /**\n     * A name to use for the `Switch`. This is required for accessibility since behind the scenes\n     * the `Switch` is renders as an `<input type=\"checkbox\" />`.\n     */\n    name: isRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ])),\n\n    /**\n     * Boolean if the `Switch` is disabled.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * An optional function to call when the `checked` state of the `Switch` changes.\n     * The callback will include the new checked state and the changeEvent.\n     *\n     * ```js\n     * onChange(changeEvent.target.checked, changeEvent);\n     * ```\n     */\n    onChange: PropTypes.func,\n\n    /**\n     * An optional value for the `Switch`. It is recommended to use a value though.\n     */\n    value: PropTypes.oneOfType([\n      PropTypes.bool,\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * Boolean if the `Switch` is checked by default.\n     */\n    defaultChecked: PropTypes.bool,\n\n    /**\n     * A boolean if the `Switch` is currently checked. This will required the `onChange` prop\n     * to be defined.\n     */\n    checked: controlled(PropTypes.bool, 'onChange', 'defaultChecked'),\n\n    defaultToggled: deprecated(PropTypes.bool, 'Use the `defaultChecked` prop instead'),\n    toggled: deprecated(PropTypes.bool, 'Use the `checked` prop instead'),\n  };\n\n  render() {\n    const {\n      toggled,\n      defaultToggled,\n      ...props\n    } = this.props;\n\n    if (typeof toggled !== 'undefined' && typeof props.checked === 'undefined') {\n      props.checked = toggled;\n    }\n\n    if (typeof defaultToggled !== 'undefined' && typeof props.defaultChecked === 'undefined') {\n      props.defaultChecked = defaultToggled;\n    }\n\n    return <SelectionControl type=\"switch\" {...props} __superSecreteProp />;\n  }\n}\n"]}