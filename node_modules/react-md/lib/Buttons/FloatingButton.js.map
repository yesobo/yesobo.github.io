{"version":3,"sources":["../../src/js/Buttons/FloatingButton.js"],"names":["FloatingButton","props","className","fixed","mini","children","iconClassName","propTypes","string","node","type","disabled","bool","href","onClick","func","tooltipLabel","tooltipPosition","oneOf","tooltipDelay","number","primary","secondary","deprecated"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;;;;;;;AAEA;;;;;;;;;;IAUqBA,c;;;;;;;;;;;6BAkFV;AAAA,mBAQH,KAAKC,KARF;AAAA,UAELC,SAFK,UAELA,SAFK;AAAA,UAGLC,KAHK,UAGLA,KAHK;AAAA,UAILC,IAJK,UAILA,IAJK;AAAA,UAKLC,QALK,UAKLA,QALK;AAAA,UAMLC,aANK,UAMLA,aANK;AAAA,UAOFL,KAPE;;AASP,aACE;AAAA;AAAA,qBACMA,KADN;AAEE,qBAAW,0BAAG;AACZ,sCAA0BE,KADd;AAEZ,qCAAyBC;AAFb,WAAH,EAGRF,SAHQ,CAFb;AAME,yBAAeI,aANjB;AAOE;AAPF;AASGD;AATH,OADF;AAaD;;;;;;AAxGkBL,c,CACZO,S,GAAY;AACjB;;;AAGAD,iBAAe,oBAAUE,MAJR;;AAMjB;;;AAGAH,YAAU,oBAAUI,IATH;;AAWjB;;;AAGAP,aAAW,oBAAUM,MAdJ;;AAgBjB;;;AAGAE,QAAM,oBAAUF,MAnBC;;AAqBjB;;;AAGAG,YAAU,oBAAUC,IAxBH;;AA0BjB;;;AAGAC,QAAM,oBAAUL,MA7BC;;AA+BjB;;;AAGAM,WAAS,oBAAUC,IAlCF;;AAoCjB;;;;AAIAC,gBAAc,oBAAUP,IAxCP;;AA0CjB;;;;AAIAQ,mBAAiB,oBAAUC,KAAV,CAAgB,CAAC,KAAD,EAAQ,OAAR,EAAiB,QAAjB,EAA2B,MAA3B,CAAhB,CA9CA;;AAgDjB;;;AAGAC,gBAAc,oBAAUC,MAnDP;;AAqDjB;;;AAGAjB,SAAO,oBAAUS,IAxDA;;AA0DjB;;;;AAIAR,QAAM,oBAAUQ,IA9DC;;AAgEjB;;;AAGAS,WAAS,oBAAUT,IAnEF;;AAqEjB;;;AAGAU,aAAW,oBAAUV,IAxEJ;;AA0EjBW,cAAY,mCACV,sFACA,iFADA,GAEA,kBAHU;AA1EK,C;kBADAvB,c","file":"FloatingButton.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nimport deprecated from '../utils/PropTypes/componentDeprecated';\nimport IconButton from './IconButton';\n\n/**\n * A `FloatingButton` is an extension of the `IconButton`.\n * A tooltip can be displayed on hover or touch hold if the\n * `tooltipLabel` prop is given.\n *\n * Another name for this button is a `FloatingActionButton` (FAB).\n *\n * Any other props (such as style or event listeners) will also be\n * applied.\n */\nexport default class FloatingButton extends PureComponent {\n  static propTypes = {\n    /**\n     * The className to use for rendering the `FontIcon`.\n     */\n    iconClassName: PropTypes.string,\n\n    /**\n     * Any children to use to render the `FontIcon`.\n     */\n    children: PropTypes.node,\n\n    /**\n     * An optional className to apply to the button.\n     */\n    className: PropTypes.string,\n\n    /**\n     * The button type.\n     */\n    type: PropTypes.string,\n\n    /**\n     * Boolean if the button is disabled.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * An optional href to convert the button into a link button.\n     */\n    href: PropTypes.string,\n\n    /**\n     * An optional function to call when the button is clicked.\n     */\n    onClick: PropTypes.func,\n\n    /**\n     * An optional label to use if you would like a tooltip to display\n     * on hover or touch hold.\n     */\n    tooltipLabel: PropTypes.node,\n\n    /**\n     * The position that the tooltip should be displayed relative to\n     * the button.\n     */\n    tooltipPosition: PropTypes.oneOf(['top', 'right', 'bottom', 'left']),\n\n    /**\n     * An optional amount of delay before the tooltip appears.\n     */\n    tooltipDelay: PropTypes.number,\n\n    /**\n     * Boolean if the floating button is fixed.\n     */\n    fixed: PropTypes.bool,\n\n    /**\n     * Boolean if the floating button should be displayed as the mini\n     * version.\n     */\n    mini: PropTypes.bool,\n\n    /**\n     * Boolean if the floating button should be styled with the primary color.\n     */\n    primary: PropTypes.bool,\n\n    /**\n     * Boolean if the floating button should be styled with the secondary color.\n     */\n    secondary: PropTypes.bool,\n\n    deprecated: deprecated(\n      'The behavior of the `FloatingButton` can be achieved with the `Button` component ' +\n      'without the additional bundle size. Switch to the `Button` component and add a ' +\n      'prop `floating`.'\n    ),\n  };\n\n  render() {\n    const {\n      className,\n      fixed,\n      mini,\n      children,\n      iconClassName,\n      ...props\n    } = this.props;\n    return (\n      <IconButton\n        {...props}\n        className={cn({\n          'md-btn--floating-fixed': fixed,\n          'md-btn--floating-mini': mini,\n        }, className)}\n        iconClassName={iconClassName}\n        floating\n      >\n        {children}\n      </IconButton>\n    );\n  }\n}\n"]}