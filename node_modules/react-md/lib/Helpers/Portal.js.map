{"version":3,"sources":["../../src/js/Helpers/Portal.js"],"names":["isReact16","Portal","_container","_portal","_applyStyles","props","className","_renderPortal","document","createElement","component","node","renderNode","body","lastChild","appendChild","insertBefore","firstChild","children","_removePortal","onClose","removeChild","visible","forceUpdate","nextProps","onOpen","Component","window","propTypes","string","bool","isRequired","element","func","object","defaultProps"],"mappings":"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","file":"Portal.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  createPortal,\n  unmountComponentAtNode as unmount,\n  unstable_renderSubtreeIntoContainer as render,\n} from 'react-dom';\n\nconst isReact16 = typeof createPortal === 'function';\n\n/**\n * Creates a \"Portal\" for the children to be rendered in. Basically it will render the\n * children only when the `visible` prop is `true`. When it is visible, a new `component`\n * will be rendered as the first child in the body with the children inside.\n *\n * Unlike all the other components, `style` will not be applied for the `Portal`.\n */\nexport default class Portal extends PureComponent {\n  static propTypes = {\n    /**\n     * An optional className to apply to the newly created `component` when visible.\n     */\n    className: PropTypes.string,\n\n    /**\n     * Boolean if the children are visible.\n     */\n    visible: PropTypes.bool.isRequired,\n\n    /**\n     * The children to render when visible.\n     */\n    children: PropTypes.element,\n\n    /**\n     * The component to render as. This should be a valid DOM element.\n     */\n    component: PropTypes.string.isRequired,\n\n    /**\n     * An optional function to call when the portal is opened.\n     */\n    onOpen: PropTypes.func,\n\n    /**\n     * An optional function to call when the portal is closed\n     */\n    onClose: PropTypes.func,\n\n    /**\n     * An optional DOM Node to render the portal into. The default is to render as\n     * the first child in the `body`.\n     */\n    renderNode: PropTypes.object,\n\n    /**\n     * Boolean if the portal should render the children as the last child of the `renderNode`\n     * or `body` instead of the first.\n     */\n    lastChild: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    component: 'span',\n  };\n\n  componentDidMount() {\n    if (this.props.visible) {\n      this._renderPortal(this.props);\n\n      if (isReact16) {\n        // Need to update after the renderPortal created the DOM element.\n        this.forceUpdate();\n      }\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { visible, onOpen } = nextProps;\n    if (this.props.visible === visible) {\n      if (visible && !isReact16) {\n        // Need to just re-render the subtree\n        this._renderPortal(nextProps);\n      }\n\n      return;\n    }\n\n    if (visible) {\n      if (onOpen) {\n        onOpen();\n      }\n\n      this._renderPortal(nextProps);\n    } else {\n      this._removePortal();\n    }\n  }\n\n  componentWillUnmount() {\n    this._removePortal();\n  }\n\n  _container = null;\n  _portal = null;\n\n  _applyStyles = (props) => {\n    if (props.className) {\n      this._container.className = props.className;\n    }\n  };\n\n  _renderPortal = (props) => {\n    if (!this._container) {\n      this._container = document.createElement(props.component);\n\n      this._applyStyles(props);\n      const node = (props.renderNode || document.body);\n      if (props.lastChild) {\n        node.appendChild(this._container);\n      } else {\n        node.insertBefore(this._container, node.firstChild);\n      }\n    } else {\n      this._applyStyles(props);\n    }\n\n    if (!isReact16) {\n      this._portal = render(this, props.children, this._container);\n    }\n  };\n\n  _removePortal = () => {\n    if (this.props.onClose) {\n      this.props.onClose();\n    }\n\n    if (this._container) {\n      if (!isReact16) {\n        unmount(this._container);\n      }\n\n      (this.props.renderNode || document.body).removeChild(this._container);\n    }\n\n    this._portal = null;\n    this._container = null;\n  };\n\n  render() {\n    const { component: Component, className, children, visible } = this.props;\n\n    // When doing server side rendering, actually render the component as a direct child of its parent.\n    // Once it has been rendered and working client side, it will be removed correctly.\n    if (typeof window === 'undefined' && visible) {\n      return <Component className={className}>{children}</Component>;\n    } else if (isReact16 && visible && this._container && typeof window !== 'undefined') {\n      return createPortal(children, this._container);\n    }\n\n    return null;\n  }\n}\n"]}