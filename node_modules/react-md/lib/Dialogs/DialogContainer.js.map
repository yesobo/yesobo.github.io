{"version":3,"sources":["../../src/js/Dialogs/DialogContainer.js"],"names":["DialogContainer","props","visible","isOpen","dialogVisible","defaultVisibleTransitionable","state","active","fullPage","overlay","portalVisible","_mountDialog","nextProps","el","context","window","pageX","scrollX","pageY","scrollY","scrollTop","scrollLeft","_pageX","_pageY","_inTimeout","clearTimeout","_activeElement","document","activeElement","_mountPortal","setState","prevProps","closeOnEsc","modal","escapable","prevEscapable","add","remove","addEventListener","_handleEscClose","removeEventListener","style","className","dialogStyle","dialogClassName","component","transitionEnterTimeout","transitionLeaveTimeout","lastChild","portal","propVisible","propRenderNode","renderNode","onShow","onHide","disableScrollLocking","close","actionLeft","actionRight","transitionName","transitionEnter","transitionLeave","dialog","_handleDialogMounting","_unmountPortal","container","_setContainer","_handleClick","propTypes","id","oneOfType","number","string","object","titleStyle","titleClassName","footerStyle","footerClassName","contentStyle","contentClassName","func","isRequired","contentComponent","children","node","actions","element","arrayOf","bool","propName","args","validator","componentName","componentNameSafe","err","title","Error","location","additionalFocusKeys","initialFocus","focusOnMount","containFocus","autopadContent","autosizeContent","height","width","stackedActions","defaultProps","contextTypes","_container","e","which","keyCode","setTimeout","target","focus","scrollEl","querySelector","parentNode","classList","contains"],"mappings":"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","file":"DialogContainer.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\n\nimport { ESC } from '../constants/keyCodes';\nimport TICK from '../constants/CSSTransitionGroupTick';\nimport getField from '../utils/getField';\nimport toggleScroll from '../utils/toggleScroll';\nimport oneRequiredForA11y from '../utils/PropTypes/oneRequiredForA11y';\nimport Dialog from './Dialog';\nimport Portal from '../Helpers/Portal';\n\n/**\n * The `DialogContainer` component is used for dynamically creating the `Dialog` with\n * transitions.\n */\nexport default class DialogContainer extends PureComponent {\n  /* eslint-disable max-len */\n  static propTypes = {\n    /**\n     * An id to use for the `Dialog` once it has been opened. This is used for the\n     * [dialog role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_dialog_role).\n     * This is used to generate an `id` for the `title` prop when it has been defined.\n     */\n    id: isRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ])),\n    /* eslint-enable max-len */\n\n    /**\n     * An optional accessibility prop to use when the `Dialog` is opened. This should be an id\n     * pointing to some text that describes the content of the dialog. For accessibility\n     * reasons, one of the following props must be defined:\n     * - `title`\n     * - `aria-describedby`\n     * - `aria-labelledby`\n     * - `aria-label`\n     *\n     * An example usage:\n     *\n     * ```js\n     * <Dialog id=\"accessible-example\" visible aria-describedby=\"accessible-content\">\n     *   <p id=\"accessible-content\">This is some content that describes the dialog.</p>\n     * </Dialog>\n     * ```\n     */\n    'aria-describedby': oneRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]), 'title', 'aria-labelledby', 'aria-label'),\n\n    /**\n     * An optional accessibility prop to use when the `title` prop is not given. This should be\n     * an id pointing to a `h` tag that labels the dialog.\n     *\n     * An example usage:\n     *\n     * ```js\n     * <Dialog visible id=\"accessible-example\" aria-labelledby=\"accessible-dialog-label\">\n     *   <h2 id=\"accessible-dialog-label\">Some Accessible Dialog</h2>\n     * </Dialog>\n     * ```\n     */\n    'aria-labelledby': PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional accessibility prop to use when the `title` and `aria-labelledby` props are\n     * not defined. This should be a string that describes what is in the `Dialog`.\n     *\n     * An example usage:\n     *\n     * ```js\n     * <Dialog visible id=\"accessible-example\" aria-label=\"Some Accessible Dialog\">\n     *   <p>Lorem Ipsum</p>\n     * </Dialog>\n     * ```\n     */\n    'aria-label': PropTypes.string,\n\n    /**\n     * An optional style to apply to the dialog's container.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the dialog's container.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional style to apply to the dialog itself when the `visible` prop is `true`.\n     */\n    dialogStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the dialog itself when the `visible` prop is `true`.\n     */\n    dialogClassName: PropTypes.string,\n\n    /**\n     * An optional styke to apply to the title.\n     */\n    titleStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the title.\n     */\n    titleClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the footer. This is used when the `actions`\n     * prop is defined.\n     */\n    footerStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the footer. This is used when the `actions`\n     * prop is defined.\n     */\n    footerClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the dialog's content.\n     */\n    contentStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the dialog's content.\n     */\n    contentClassName: PropTypes.string,\n\n    /**\n     * The component to render the dialog's container in.\n     */\n    component: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.string,\n    ]).isRequired,\n\n    /**\n     * The component to render the dialog's content in.\n     */\n    contentComponent: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.string,\n    ]).isRequired,\n\n    /**\n     * The content to display in the dialog once open.\n     */\n    children: PropTypes.node,\n\n    /**\n     * A single action or a list of actions to display in the dialog. This can either be a list\n     * of `FlatButton` props or `<Button flat {...props} />` elements.\n     */\n    actions: PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.object,\n      PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.element,\n        PropTypes.object,\n      ])),\n    ]),\n\n    /**\n     * Boolean if the `Dialog` is current visible.\n     */\n    visible: PropTypes.bool.isRequired,\n\n    /**\n     * An optional function to call when the `visible` prop is changed from `false` to `true`.\n     */\n    onShow: PropTypes.func,\n\n    /**\n     * A function to call that will close the dialog. This is required when the `modal` and `fullPage`\n     * props are not `true`.\n     */\n    onHide: (props, propName, ...args) => {\n      let validator = PropTypes.func;\n      if (!props.modal && !props.fullPage) {\n        validator = validator.isRequired;\n      }\n\n      return validator(props, propName, ...args);\n    },\n\n    /**\n     * Boolean if the dialog should behave like a modal. This means that the dialog can only\n     * be closed by clicking on an action instead of also clicking on the overlay.\n     */\n    modal: PropTypes.bool,\n\n    /**\n     * Boolean if the dialog should be displayed as a full page dialog.\n     */\n    fullPage: (props, propName, componentName, ...args) => {\n      if (typeof props[propName] === 'undefined') {\n        return null;\n      }\n      const componentNameSafe = componentName || '<<anonymous>>';\n\n      let err = PropTypes.bool(props, propName, componentName, ...args);\n\n      if (!err && typeof props.title !== 'undefined') {\n        err = new Error(\n          `You provided a \\`title\\` ${location} to the \\`${componentNameSafe}\\` when \\`fullPage\\` ` +\n          'has been set to true. A title for a full page dialog should be rendered as a child instead.'\n        );\n      }\n\n      return err;\n    },\n\n    /**\n     * An optional pageX location to use when rendering a full page dialog. This is used to set the location\n     * the dialog should appear from.\n     */\n    pageX: PropTypes.number,\n\n    /**\n     * An optional pageY location to use when rendering a full page dialog. This is used to set the location\n     * the dialog should appear from.\n     */\n    pageY: PropTypes.number,\n\n    /**\n     * @see {@link Helpers/FocusContainer#additionalFocusKeys}\n     */\n    additionalFocusKeys: Dialog.propTypes.additionalFocusKeys,\n\n    /**\n     * @see {@link Helpers/FocusContainer#initialFocus}\n     */\n    initialFocus: Dialog.propTypes.initialFocus,\n\n    /**\n     * @see {@link Helpers/FocusContainer#focusOnMount}\n     */\n    focusOnMount: Dialog.propTypes.focusOnMount,\n\n    /**\n     * @see {@link Helpers/FocusContainer#containFocus}\n     */\n    containFocus: Dialog.propTypes.containFocus,\n\n    /**\n     * The transition enter timeout for the dialog.\n     */\n    transitionEnterTimeout: PropTypes.number.isRequired,\n\n    /**\n     * The transition leave timeout for the dialog.\n     */\n    transitionLeaveTimeout: PropTypes.number.isRequired,\n\n    /**\n     * Boolean if the dialog should be closable by pressing the escape key.\n     * This will always be considered `false` of the `modal` props is `true`.\n     */\n    closeOnEsc: PropTypes.bool,\n\n    /**\n     * Boolean if the Portal's functionality of rendering in a separate react tree should be applied\n     * to the dialog.\n     *\n     * @see {@link Helpers/Portal}\n     */\n    portal: PropTypes.bool,\n\n    /**\n     * Since the `Dialog` uses the `Portal` component, you can pass an optional HTML Node to render\n     * the dialog in instead of the `document.body`.\n     */\n    renderNode: PropTypes.object,\n\n    /**\n     * Boolean if the dialog should be rendered as the last child in the `renderNode` or `body` instead\n     * of as the first.\n     */\n    lastChild: PropTypes.bool,\n\n    /**\n     * An optional title for the dialog.\n     */\n    title: PropTypes.node,\n\n    /**\n     * Boolean if the dialog should animate into view if it is constructed with `visible` enabled.\n     *\n     * This basically means that if the `Dialog` has `visible` enabled on initial page load, does it animate?\n     * In some cases, it can also mean if the `Dialog` is added to the render tree with `visible` enabled,\n     * does it animate?\n     */\n    defaultVisibleTransitionable: PropTypes.bool,\n\n    /**\n     * Boolean if the Dialog should no longer try to prevent the parent container from scrolling while visible.\n     * In most cases, this will attempt to prevent the main window scrolling. If this dialog is nested in another\n     * dialog, it will attempt to prevent the parent dialog from scrolling.\n     */\n    disableScrollLocking: PropTypes.bool,\n\n    /**\n     * Boolean if the dialog should automatically try to determine if the content\n     * should be padded. It will be padded if the dialog does not contain a `List`.\n     */\n    autopadContent: PropTypes.bool,\n\n    /**\n     * Boolean if the dialog content's size should automatically be resized to overflow\n     * correctly when there is a lot of content. This will calculate and apply some `maxHeight`\n     * to the `contentStyle`.\n     */\n    autosizeContent: PropTypes.bool,\n\n    /**\n     * An optional height to apply to the dialog. This is used if it is easier to just apply height/width\n     * with for specific dialogs instead of in CSS.\n     *\n     * **This prop should not be used if the `fullPage` prop is enabled.**\n     *\n     * @see {@link #fullPage}\n     * @see {@link #width}\n     */\n    height: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional width to apply to the dialog. This is used if it is easier to just apply height/width\n     * with for specific dialogs instead of in CSS.\n     *\n     * **This prop should not be used if the `fullPage` prop is enabled.**\n     *\n     * @see {@link #fullPage}\n     * @see {@link #height}\n     */\n    width: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * Boolean if the actions should be stacked on top of each other. If this value is `undefined`, it will\n     * automatically attempt to guess if the items should be stacked.\n     */\n    stackedActions: PropTypes.bool,\n\n    isOpen: deprecated(PropTypes.bool, 'Use `visible` instead'),\n    transitionName: deprecated(PropTypes.string, 'The transition name will be managed by the component'),\n    transitionEnter: deprecated(PropTypes.bool, 'The transition will always be enforced'),\n    transitionLeave: deprecated(PropTypes.bool, 'The transition will always be enforced'),\n    actionLeft: deprecated(PropTypes.node, 'Use the `fullPage` prop instead'),\n    actionRight: deprecated(PropTypes.node, 'Use the `fullPage` prop instead'),\n    close: deprecated(PropTypes.func, 'Use `onHide` instead.'),\n  };\n\n  static defaultProps = {\n    autopadContent: true,\n    autosizeContent: true,\n    component: 'span',\n    closeOnEsc: true,\n    contentComponent: 'section',\n    focusOnMount: true,\n    transitionEnterTimeout: 300,\n    transitionLeaveTimeout: 300,\n    defaultVisibleTransitionable: false,\n  };\n\n  static contextTypes = {\n    renderNode: PropTypes.object,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const visible = typeof props.isOpen !== 'undefined' ? props.isOpen : props.visible;\n    const dialogVisible = visible && !props.defaultVisibleTransitionable;\n\n    this.state = {\n      active: visible && !props.fullPage,\n      overlay: visible && !props.fullPage,\n      portalVisible: visible,\n      dialogVisible,\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.isOpen && !this.props.visible) {\n      return;\n    }\n\n    this._mountDialog(this.props);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const visible = typeof nextProps.isOpen !== 'undefined' ? nextProps.isOpen : nextProps.visible;\n    if (this.props.isOpen === visible || this.props.visible === visible) {\n      return;\n    }\n\n    const el = getField(this.props, this.context, 'renderNode') || window;\n    let { scrollX: pageX, scrollY: pageY } = el;\n    if (typeof el.scrollTop !== 'undefined' && typeof el.scrollLeft !== 'undefined') {\n      pageX = el.scrollLeft;\n      pageY = el.scrollTop;\n    } else if (typeof el.scrollY !== 'undefined' && typeof el.scrollX !== 'undefined') {\n      pageX = el.scrollX;\n      pageY = el.scrollY;\n    }\n\n    this._pageX = pageX;\n    this._pageY = pageY;\n\n    if (this._inTimeout) {\n      clearTimeout(this._inTimeout);\n      this._inTimeout = null;\n    }\n\n    if (visible) {\n      this._activeElement = document.activeElement;\n      this._mountPortal(nextProps);\n    } else {\n      this.setState({ dialogVisible: false, active: false });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { visible, closeOnEsc, modal } = this.props;\n    const escapable = !modal && closeOnEsc;\n    const prevEscapable = !prevProps.modal && prevProps.closeOnEsc;\n\n    // Only going to support visible here since it was not implemented before.\n    if (visible === prevProps.visible && escapable === prevEscapable) {\n      return;\n    }\n\n    let add = false;\n    let remove = false;\n\n    if (escapable !== prevEscapable) {\n      add = visible && escapable;\n      remove = !visible || (prevEscapable && !escapable);\n    } else if (escapable) {\n      add = visible;\n      remove = !visible;\n    }\n\n    if (add) {\n      window.addEventListener('keydown', this._handleEscClose);\n    } else if (remove) {\n      window.removeEventListener('keydown', this._handleEscClose);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.props.isOpen || this.props.visible) {\n      toggleScroll(false);\n    }\n\n    if (this.props.visible && (this.props.closeOnEsc && !this.props.modal)) {\n      window.removeEventListener('keydown', this._handleEscClose);\n    }\n\n    if (this._inTimeout) {\n      clearTimeout(this._inTimeout);\n    }\n  }\n\n  _setContainer = (container) => {\n    if (container !== null) {\n      this._container = findDOMNode(container);\n    }\n  };\n\n  _handleEscClose = (e) => {\n    if ((e.which || e.keyCode) === ESC) {\n      (this.props.onHide || this.props.close)(e);\n      window.removeEventListener('keydown', this._handleEscClose);\n    }\n  };\n\n  _mountPortal = (props) => {\n    this._mountDialog(props);\n    this.setState({ portalVisible: true });\n  };\n\n  _mountDialog = (props) => {\n    const { fullPage, onShow } = props;\n    this._inTimeout = setTimeout(() => {\n      this._inTimeout = fullPage ? null : setTimeout(() => {\n        this._inTimeout = null;\n        this.setState({ active: true });\n      }, TICK);\n      this.setState({ dialogVisible: true, overlay: !fullPage }, onShow);\n    }, TICK);\n  };\n\n  _unmountPortal = () => {\n    this.setState({ portalVisible: false });\n  };\n\n  _handleClick = (e) => {\n    const visible = typeof this.props.isOpen !== 'undefined' ? this.props.isOpen : this.props.visible;\n    if (this.props.modal || !visible || e.target !== this._container) {\n      return;\n    }\n\n    (this.props.onHide || this.props.close)(e);\n  };\n\n  _handleDialogMounting = (dialog) => {\n    const { disableScrollLocking } = this.props;\n    if (dialog === null) {\n      if (this._activeElement) {\n        this._activeElement.focus();\n      }\n\n      if (!disableScrollLocking) {\n        toggleScroll(false, this.scrollEl);\n      }\n\n      this._activeElement = null;\n      this.setState({ overlay: false });\n    } else {\n      const container = document.querySelector(`#${this.props.id}`);\n      if (!container || disableScrollLocking) {\n        return;\n      }\n\n      let el = getField(this.props, this.context, 'renderNode');\n      let node = container.parentNode;\n      while (node && node.classList && !el) {\n        if (node.classList.contains('md-dialog')) {\n          el = node;\n        }\n\n        node = node.parentNode;\n      }\n\n      this.scrollEl = el;\n      toggleScroll(true, el);\n    }\n  };\n\n  render() {\n    const { overlay, active, dialogVisible, portalVisible } = this.state;\n    const {\n      style,\n      className,\n      dialogStyle,\n      dialogClassName,\n      modal,\n      fullPage,\n      component,\n      transitionEnterTimeout,\n      transitionLeaveTimeout,\n      lastChild,\n      portal,\n      /* eslint-disable no-unused-vars */\n      visible: propVisible,\n      renderNode: propRenderNode,\n      closeOnEsc,\n      onShow,\n      onHide,\n      disableScrollLocking,\n      defaultVisibleTransitionable,\n\n      // deprecated\n      close,\n      isOpen,\n      actionLeft,\n      actionRight,\n      transitionName,\n      transitionEnter,\n      transitionLeave,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    const renderNode = getField(this.props, this.context, 'renderNode');\n    const dialog = (\n      <Dialog\n        key=\"dialog\"\n        style={dialogStyle}\n        className={cn('md-background--card', dialogClassName)}\n        ref={this._handleDialogMounting}\n        centered={!fullPage}\n        fullPage={fullPage}\n        {...props}\n        containerX={this._pageX}\n        containerY={this._pageY}\n        onLeave={this._unmountPortal}\n      />\n    );\n\n    const container = (\n      <CSSTransitionGroup\n        component={component}\n        ref={this._setContainer}\n        style={style}\n        className={cn('md-dialog-container', {\n          'md-overlay': !fullPage && overlay,\n          'md-pointer--hover': !fullPage && overlay && !modal,\n          'md-overlay--active': !fullPage && active && overlay,\n        }, className)}\n        transitionName={`md-dialog--${fullPage ? 'full-page' : 'centered'}`}\n        transitionEnterTimeout={transitionEnterTimeout}\n        transitionLeaveTimeout={transitionLeaveTimeout}\n        tabIndex={-1}\n        onClick={this._handleClick}\n      >\n        {dialogVisible ? dialog : null}\n      </CSSTransitionGroup>\n    );\n\n    if (!portal) {\n      return portalVisible ? container : null;\n    }\n\n    return (\n      <Portal visible={portalVisible} renderNode={renderNode} lastChild={lastChild}>\n        {container}\n      </Portal>\n    );\n  }\n}\n"]}