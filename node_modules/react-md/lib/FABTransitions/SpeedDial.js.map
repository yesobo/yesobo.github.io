{"version":3,"sources":["../../src/js/FABTransitions/SpeedDial.js"],"names":["SpeedDial","props","state","isOpen","initiallyOpen","_handleClick","bind","e","onClick","onPassiveClick","onActiveClick","_isOpen","setState","fabs","passiveIconChildren","passiveIconClassName","activeIconChildren","activeIconClassName","transitionName","transitionEnterTimeout","speedDialTransitionName","speedDialTransitionEnterTimeout","speedDialTransitionLeaveTimeout","containerProps","speedDialFabs","map","fab","i","fn","el","fabProps","isValidElement","Children","only","cloneElement","createElement","created","floating","mini","iconClassName","children","className","propTypes","bool","string","isRequired","number","node","propName","component","others","size","length","arrayOf","oneOfType","shape","func","middle","Error","object","defaultProps"],"mappings":"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","file":"SpeedDial.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';\nimport cn from 'classnames';\n\nimport Button from '../Buttons/Button';\n\n/**\n * Any props such as style or event listeners will be applied to the\n * main floating action button. If you want props applied to the `SpeedDial`\n * itself, you will need to set them in the `containerProps` prop.\n */\nexport default class SpeedDial extends PureComponent {\n  static propTypes = {\n    /**\n     * A boolean if the speed dial is currently open. This will make\n     * the speed dial into a controlled component.\n     */\n    isOpen: PropTypes.bool,\n\n    /**\n     * Boolean if the uncontrolled speed dial is initially open.\n     */\n    initiallyOpen: PropTypes.bool,\n\n    /**\n     * An optional className to apply to the speed dial.\n     */\n    className: PropTypes.string,\n\n    /**\n     * The speed dial's floating action button transition name when the button's\n     * open state changes. If the button is open, `-right` is appened, otherwise\n     * `-left`.\n     */\n    transitionName: PropTypes.string.isRequired,\n\n    /**\n     * The timeout for the speed dial's floating action button transition.\n     */\n    transitionEnterTimeout: PropTypes.number.isRequired,\n\n    /**\n     * The name for the flinging animation of the speed dial.\n     */\n    speedDialTransitionName: PropTypes.string.isRequired,\n\n    /**\n     * The timeout for the flinging animation of the speed dial when opening.\n     */\n    speedDialTransitionEnterTimeout: PropTypes.number.isRequired,\n\n    /**\n     * The timeout for the flinging animation when the speed dial is closing.\n     */\n    speedDialTransitionLeaveTimeout: PropTypes.number.isRequired,\n\n    /**\n     * The optional children to display for unopened speed dial floating action button.\n     */\n    passiveIconChildren: PropTypes.node,\n\n    /**\n     * The optional icon className to display for unopened speed dial floating action button.\n     */\n    passiveIconClassName: PropTypes.node,\n\n    /**\n     * The optional children to display for opened speed dial floating action button.\n     */\n    activeIconChildren: PropTypes.node,\n\n    /**\n     * The optional icon className to display for opened speed dial floating action button.\n     */\n    activeIconClassName: PropTypes.string,\n\n    /**\n     * A list of `FloatingButton` or props to generate the `FloatinButton` when the\n     * `SpeedDial` is open. The buttons will automatically be converted to the `mini`\n     * version.\n     */\n    fabs: (props, propName, component, ...others) => {\n      const size = props.fabs.length;\n      if (size >= 3 && size <= 5) {\n        return PropTypes.arrayOf(PropTypes.oneOfType([\n          PropTypes.node,\n          PropTypes.shape({\n            onClick: PropTypes.func,\n            iconClassName: PropTypes.string,\n            children: PropTypes.node,\n          }),\n        ])).isRequired(props, propName, component, ...others);\n      }\n\n      const middle = size < 3 ? 'at least 3' : 'no more than 5';\n      return new Error(\n        `A speed dial requires ${middle} floating action buttons to fling. ` +\n        `However, only ${size} were given.`\n      );\n    },\n\n    /**\n     * An optional function to call when the main floating action button is clicked.\n     */\n    onClick: PropTypes.func,\n\n    /**\n     * An optional function to call when the main floating action button is clicked.\n     */\n    onPassiveClick: PropTypes.func,\n\n    /**\n     * An optional function to call when the main floating action button is clicked.\n     */\n    onActiveClick: PropTypes.func,\n\n    /**\n     * Any additional props to apply to the speed dial itself.\n     */\n    containerProps: PropTypes.object,\n  };\n\n  static defaultProps = {\n    initiallyOpen: false,\n    transitionName: 'md-fab-rotate',\n    transitionEnterTimeout: 150,\n    speedDialTransitionName: 'md-speed-dial',\n    speedDialTransitionEnterTimeout: 450,\n    speedDialTransitionLeaveTimeout: 150,\n    passiveIconClassName: 'material-icons',\n    activeIconClassName: 'material-icons',\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = { isOpen: props.initiallyOpen };\n    this._handleClick = this._handleClick.bind(this);\n  }\n\n  _isOpen(props, state) {\n    return typeof props.isOpen === 'undefined' ? state.isOpen : props.isOpen;\n  }\n\n  _handleClick(e) {\n    const { onClick, onPassiveClick, onActiveClick } = this.props;\n    if (onClick) {\n      onClick(e);\n    }\n\n    const isOpen = this._isOpen(this.props, this.state);\n    if (isOpen && onActiveClick) {\n      onActiveClick(e);\n    } else if (!isOpen && onPassiveClick) {\n      onPassiveClick(e);\n    }\n\n    if (typeof this.props.isOpen === 'undefined') {\n      this.setState({ isOpen: !isOpen });\n    }\n  }\n\n  render() {\n    const {\n      fabs,\n      passiveIconChildren,\n      passiveIconClassName,\n      activeIconChildren,\n      activeIconClassName,\n      transitionName,\n      transitionEnterTimeout,\n      speedDialTransitionName,\n      speedDialTransitionEnterTimeout,\n      speedDialTransitionLeaveTimeout,\n      containerProps,\n      ...props\n    } = this.props;\n    delete props.isOpen;\n    delete props.initiallyOpen;\n\n    const isOpen = this._isOpen(this.props, this.state);\n\n    let speedDialFabs;\n    if (isOpen) {\n      speedDialFabs = fabs.map((fab, i) => {\n        let fn;\n        let el;\n        let fabProps;\n        if (React.isValidElement(fab)) {\n          el = React.Children.only(fab);\n          fn = React.cloneElement;\n          fabProps = fab.props;\n        } else {\n          el = Button;\n          fn = React.createElement;\n          fabProps = fab;\n        }\n\n        const created = fn(el, {\n          floating: true,\n          mini: true,\n          ...fabProps,\n        });\n        return <div key={i} className=\"md-speed-dial-fab\">{created}</div>;\n      });\n    }\n\n    props.iconClassName = isOpen ? activeIconClassName : passiveIconClassName;\n    props.children = isOpen ? activeIconChildren : passiveIconChildren;\n    return (\n      <CSSTransitionGroup\n        {...containerProps}\n        component=\"div\"\n        className={cn('md-speed-dial', !!containerProps && containerProps.className)}\n        transitionName={`${transitionName}-${isOpen ? 'right' : 'left'}`}\n        transitionEnterTimeout={transitionEnterTimeout}\n        transitionLeave={false}\n        ref=\"container\"\n      >\n        <CSSTransitionGroup\n          component=\"div\"\n          key=\"speed-dial-fabs\"\n          transitionName={speedDialTransitionName}\n          transitionEnterTimeout={speedDialTransitionEnterTimeout}\n          transitionLeaveTimeout={speedDialTransitionLeaveTimeout}\n        >\n          {speedDialFabs}\n        </CSSTransitionGroup>\n        <Button\n          {...props}\n          floating\n          key={`${isOpen ? 'open' : 'closed'}-fab`}\n          onClick={this._handleClick}\n        />\n      </CSSTransitionGroup>\n    );\n  }\n}\n"]}