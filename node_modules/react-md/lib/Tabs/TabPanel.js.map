{"version":3,"sources":["../../src/js/Tabs/TabPanel.js"],"names":["TabPanel","props","Component","component","id","active","className","controlledById","children","propTypes","oneOfType","number","string","style","object","func","isRequired","bool","node","defaultProps"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA;;;;;IAKqBA,Q;;;;;;;;;;;6BAsDV;AAAA,mBASH,KAAKC,KATF;AAAA,UAEMC,SAFN,UAELC,SAFK;AAAA,UAGLC,EAHK,UAGLA,EAHK;AAAA,UAILC,MAJK,UAILA,MAJK;AAAA,UAKLC,SALK,UAKLA,SALK;AAAA,UAMLC,cANK,UAMLA,cANK;AAAA,UAOLC,QAPK,UAOLA,QAPK;AAAA,UAQFP,KARE;;AAWP,aACE;AAAC,iBAAD;AAAA,qBACMA,KADN;AAEE,cAAIG,EAFN;AAGE,qBAAW,0BAAG,cAAH,EAAmBE,SAAnB,CAHb;AAIE,gBAAK,UAJP;AAKE,yBAAa,CAACD,MALhB;AAME,6BAAiBE;AANnB;AAQGC;AARH,OADF;AAYD;;;;;;AA7EkBR,Q,CACZS,S,GAAY;AACjB;;;;AAIAL,MAAI,iCAAkB,oBAAUM,SAAV,CAAoB,CACxC,oBAAUC,MAD8B,EAExC,oBAAUC,MAF8B,CAApB,CAAlB,CALa;;AAUjB;;;;AAIAL,kBAAgB,iCAAkB,oBAAUG,SAAV,CAAoB,CACpD,oBAAUC,MAD0C,EAEpD,oBAAUC,MAF0C,CAApB,CAAlB,CAdC;;AAmBjB;;;AAGAC,SAAO,oBAAUC,MAtBA;;AAwBjB;;;AAGAR,aAAW,oBAAUM,MA3BJ;;AA6BjB;;;AAGAT,aAAW,oBAAUO,SAAV,CAAoB,CAC7B,oBAAUK,IADmB,EAE7B,oBAAUH,MAFmB,CAApB,EAGRI,UAnCc;;AAqCjB;;;;AAIAX,UAAQ,oBAAUY,IAzCD;;AA2CjB;;;AAGAT,YAAU,oBAAUU;AA9CH,C;AADAlB,Q,CAkDZmB,Y,GAAe;AACpBhB,aAAW;AADS,C;kBAlDHH,Q","file":"TabPanel.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\n\n/**\n * This component is just a simple accessibility wrapper when using tabs. If you use the\n * `TabsContainer` component, you *should* not manually use this as the `TabsContainer`\n * generates this for you.\n */\nexport default class TabPanel extends PureComponent {\n  static propTypes = {\n    /**\n     * An id for the panel. This is used for a11y. This should equal the `controlsId`\n     * of whichever tab's children will be placed in here.\n     */\n    id: isRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ])),\n\n    /**\n     * An id for the tab that owns this panel. This should equal the `id` of whichever\n     * tab's children will be placed in here.\n     */\n    controlledById: isRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ])),\n\n    /**\n     * An optional style to apply.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply.\n     */\n    className: PropTypes.string,\n\n    /**\n     * The component to render the panel as.\n     */\n    component: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.string,\n    ]).isRequired,\n\n    /**\n     * Boolean if the panel is currently active. This is used to generated the `aria-hidden`\n     * attribute.\n     */\n    active: PropTypes.bool,\n\n    /**\n     * Any children to display.\n     */\n    children: PropTypes.node,\n  };\n\n  static defaultProps = {\n    component: 'div',\n  };\n\n  render() {\n    const {\n      component: Component,\n      id,\n      active,\n      className,\n      controlledById,\n      children,\n      ...props\n    } = this.props;\n\n    return (\n      <Component\n        {...props}\n        id={id}\n        className={cn('md-tab-panel', className)}\n        role=\"tabpanel\"\n        aria-hidden={!active}\n        aria-labelledby={controlledById}\n      >\n        {children}\n      </Component>\n    );\n  }\n}\n"]}