{"version":3,"sources":["../../src/js/Tabs/Tab.js"],"names":["Tab","_handleClick","e","props","onClick","index","id","controlsId","children","className","active","propIcon","icon","propLabel","label","iconEl","only","labelEl","propTypes","oneOfType","number","string","style","object","component","func","isRequired","node","element","bool","defaultProps"],"mappings":"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","file":"Tab.js","sourcesContent":["import React, { PureComponent, Children, cloneElement, isValidElement } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nimport oneRequired from '../utils/PropTypes/oneRequired';\nimport AccessibleFakeInkedButton from '../Helpers/AccessibleFakeInkedButton';\n\n/**\n * The `Tab` component is used for rendering a single tab in the `Tabs` component.\n * It can optionally have either a `label`, an `icon` or both.\n */\nexport default class Tab extends PureComponent {\n  static propTypes = {\n    /**\n     * An id for the tab. This is required for a11y. If you use the `Tabs` component, this\n     * will automatically be generated for you and injected into this component.\n     */\n    id: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An id for a `TabPanel` that holds the children from this tab. This is required for a11y.\n     * If you use the `Tabs` component, this will automatically be generated for you and injected\n     * into this component.\n     */\n    controlsId: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional style to apply.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply.\n     */\n    className: PropTypes.string,\n\n    /**\n     * The component to render as.\n     */\n    component: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.string,\n    ]).isRequired,\n\n    /**\n     * Any children to display once the tab has been selected.\n     */\n    children: PropTypes.node,\n\n    /**\n     * An optional icon to display in the tab. This can either be used alone, or it\n     * will be placed above the `label` if both are given.\n     */\n    icon: PropTypes.element,\n\n    /**\n     * An optional label to display in the tab. This can either be used alone, or it\n     * will be placed below the `icon` if both are given.\n     */\n    label: oneRequired(PropTypes.node, 'icon'),\n\n    /**\n     * An optional function to call when the tab is clicked. The callback includes this tab's index,\n     * id, controlsId, children, and finally click event. All the additional parameters are included\n     * if you are not using the `TabsContainer` component. The `id` and `controlsId` are mainly passed\n     * for accessibility.\n     *\n     * ```js\n     * onClick(index, id, controlsId, children, event);\n     * ```\n     */\n    onClick: PropTypes.func,\n\n    /**\n     * Boolean if the tab is currently active. If you use the `Tabs` component, this is automatically\n     * injected.\n     */\n    active: PropTypes.bool,\n\n    /**\n     * Tab's index. If you use the `Tabs` component, this is automatically injected.\n     */\n    index: PropTypes.number,\n  };\n\n  static defaultProps = {\n    component: 'li',\n  };\n\n  _handleClick = (e) => {\n    if (this.props.onClick) {\n      this.props.onClick(this.props.index, this.props.id, this.props.controlsId, this.props.children, e);\n    }\n  };\n\n  render() {\n    const {\n      id,\n      controlsId,\n      className,\n      active,\n      /* eslint-disable no-unused-vars */\n      icon: propIcon,\n      label: propLabel,\n      index,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    let { icon, label } = this.props;\n    if (icon) {\n      const iconEl = Children.only(icon);\n      icon = cloneElement(icon, {\n        className: cn('md-icon--tab', iconEl.props.className),\n      });\n    }\n\n    if (isValidElement(label)) {\n      const labelEl = Children.only(label);\n      label = cloneElement(label, {\n        className: cn('md-tab-label', labelEl.props.className),\n      });\n    } else {\n      label = <div className=\"md-tab-label\">{label}</div>;\n    }\n    return (\n      <AccessibleFakeInkedButton\n        {...props}\n        id={id}\n        role=\"tab\"\n        onClick={this._handleClick}\n        className={cn('md-tab', {\n          'md-tab--active': active,\n          'md-tab--inactive': !active,\n          'md-tab--icon': label && icon,\n        }, className)}\n        aria-controls={controlsId}\n        aria-selected={active}\n      >\n        {icon}\n        {label}\n      </AccessibleFakeInkedButton>\n    );\n  }\n}\n"]}