{"version":3,"sources":["../../src/js/Tabs/TabsContainer.js"],"names":["TabsContainer","props","_handleTabChange","index","tabId","tabControlsId","tabChildren","event","onTabChange","activeTabIndex","setState","_handleSwipeChange","_setContainer","container","_container","_resizePanel","activePanel","querySelector","state","panelHeight","offsetHeight","defaultTabIndex","prevProps","prevState","prevIndex","currIndex","Component","component","style","className","panelStyle","panelClassName","panelComponent","headerStyle","headerClassName","slideStyle","slideHeightProp","swipeableViewsStyle","swipeableViewsClassName","headerComponent","headerZDepth","children","colored","fixed","labelAndIcon","swipeableViewsProps","themed","propToolbar","toolbar","propActiveTabeIndex","tabsEl","only","content","map","tab","controlsId","id","childrenProps","tabs","prominentToolbar","toolbarProps","prominent","prominentTitle","header","baseSlideStyle","propTypes","object","string","oneOfType","func","oneOf","element","isRequired","number","bool","defaultProps"],"mappings":"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","file":"TabsContainer.js","sourcesContent":["import React, { PureComponent, Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport cn from 'classnames';\nimport SwipeableViews from 'react-swipeable-views';\n\nimport getField from '../utils/getField';\nimport controlled from '../utils/PropTypes/controlled';\nimport between from '../utils/PropTypes/between';\nimport ResizeObserver from '../Helpers/ResizeObserver';\nimport Paper from '../Papers/Paper';\nimport TabPanel from './TabPanel';\n\n/**\n * The `TabsContainer` component is used when you want to have your `Tabs` connected with\n * the `SwipeableViews`. This component will traverse the children subtree and extract out\n * the `children` from each tab, and render them in a swipeable container. However,\n * since this is using the `React.Children` traversal, You will have to keep the `Tabs`\n * and `Tab` component as a direct descendent. You are unable to make a separate component\n * that encompasses the `Tab` component.\n *\n * ```js\n * // valid\n * <TabsContainer>\n *   <Tabs>\n *     <Tab />\n *   </Tabs>\n * </TabsContainer>\n *\n * // invalid\n * <TabsContainer>\n *   <Tabs>\n *     <MyCustomTab />\n *   </Tabs>\n * </TabsContainer>\n * ```\n *\n * This is because it seems you are unable to access the `MyCustomTab`'s child Tab props correctly.\n * You can however have the tab's children as a separate component if you wish.\n */\nexport default class TabsContainer extends PureComponent {\n  static propTypes = {\n    /**\n     * An optional style to apply to the container.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the container.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional style to apply to each `TabPanel` that gets generated. Each tab's children\n     * will get wrapped in a `TabPanel` component.\n     */\n    panelStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to each each `TabPanel` that gets generated. Each tab's\n     * children will get wrapped in a `TabPanel` component.\n     */\n    panelClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the header component when the tabs are fixed to the top of the page.\n     * The optional toolbar and tabs get wrapped in a `Paper` component.\n     */\n    headerStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the header component when the tabs are fixed to the top of the page.\n     * The optional toolbar and tabs get wrapped in a `Paper` component.\n     */\n    headerClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to the `SwipeableViews`.\n     *\n     * @see https://github.com/oliviertassinari/react-swipeable-views#user-content-swipeableviews-\n     */\n    swipeableViewsStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the `SwipeableViews` container.\n     */\n    swipeableViewsClassName: PropTypes.string,\n\n    /**\n     * An optional style to apply to each slide component or a function that returns such style.\n     *\n     * Default style and height of slide component will be passed in the function.\n     * The function should return a style that will be merged with default style, or `null`.\n     *\n     * @see https://github.com/oliviertassinari/react-swipeable-views#user-content-swipeableviews-\n     */\n    slideStyle: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n    ]),\n\n    /**\n     * The property that should be used to set height of a slide component.\n     */\n    slideHeightProp: PropTypes.oneOf(['height', 'minHeight', 'maxHeight']),\n\n    /**\n     * This should be a `Tabs` component with children of `Tab`. This is used to figure out which\n     * tab's content is currently visible.\n     */\n    children: PropTypes.element.isRequired,\n\n    /**\n     * The component to render the container as.\n     */\n    component: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.string,\n    ]).isRequired,\n\n    /**\n     * The component to render each `TabPanel` as.\n     */\n    panelComponent: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.string,\n    ]),\n\n    /**\n     * An optional toolbar to render above the tabs.\n     */\n    toolbar: PropTypes.element,\n\n    /**\n     * An optional active tab index to use. If this is defined, the component will be controlled\n     * and require the `onTabChange` prop to be defined.\n     */\n    activeTabIndex: controlled(PropTypes.number, 'onTabChange', 'defaultTabIndex'),\n\n    /**\n     * An optional function to call when a new tab is selected by swiping or clicking a tab. When\n     * a new tab has been clicked, the callback will include the active tab index, the tab's `id`,\n     * the tab's `controlsId`, the tab's `children`, and the click event.\n     *\n     * If the tab was changed by swiping, it will only contain the new active tab index.\n     *\n     * ```js\n     * onTabChange(newActiveTabIndex, tabId, tabControlsId, tabChildren, event);\n     * ```\n     */\n    onTabChange: PropTypes.func,\n\n    /**\n     * The default tab index to use when the component is uncontrolled.\n     */\n    defaultTabIndex: PropTypes.number.isRequired,\n\n    /**\n     * Boolean if the `toolbar` and `Tabs` should be cloned with `colored: true`.\n     */\n    colored: PropTypes.bool,\n\n    /**\n     * Boolean if the `toolbar` should be applied with the theme color. This _really_ only\n     * applies when you create a `fixed` tabs container.\n     */\n    themed: PropTypes.bool,\n\n    /**\n     * Boolean if the tabs and the optional toolbar should be fixed to the top of the page.\n     */\n    fixed: PropTypes.bool,\n\n    /**\n     * A boolean if a `fixed` `TabsContainer` has tabs with a label and an icon.\n     */\n    labelAndIcon: PropTypes.bool,\n\n    /**\n     * An optional component to render the fixed tabs header as.\n     */\n    headerComponent: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.string,\n    ]),\n\n    /**\n     * The zDepth for the fixed tabs header.\n     */\n    headerZDepth: between(PropTypes.number, 0, 5),\n\n    /**\n     * Any additional props to apply to the SwipeableViews component. View the\n     * [SwipeableViews API](https://github.com/oliviertassinari/react-swipeable-views#api)\n     * for valid attributes.\n     *\n     * You will not be able to set the `style`, `className`, `slideStyle`, `index`,\n     * or `onChangeIndex` props for the SwipeableViews.\n     *\n     * The styling and classnames can be updated with the other TabsContainer props.\n     */\n    swipeableViewsProps: PropTypes.object,\n  };\n\n  static defaultProps = {\n    component: 'section',\n    defaultTabIndex: 0,\n    headerZDepth: 1,\n    slideHeightProp: 'height',\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n    if (typeof props.activeTabIndex === 'undefined') {\n      this.state.activeTabIndex = props.defaultTabIndex;\n    }\n  }\n\n  componentDidMount() {\n    this._resizePanel();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevIndex = getField(prevProps, prevState, 'activeTabIndex');\n    const currIndex = getField(this.props, this.state, 'activeTabIndex');\n\n    if (prevIndex !== currIndex) {\n      this._resizePanel();\n    }\n  }\n\n  _handleTabChange = (index, tabId, tabControlsId, tabChildren, event) => {\n    if (this.props.onTabChange) {\n      this.props.onTabChange(index, tabId, tabControlsId, tabChildren, event);\n    }\n\n    if (typeof this.props.activeTabIndex === 'undefined') {\n      this.setState({ activeTabIndex: index });\n    }\n  };\n\n  _handleSwipeChange = (activeTabIndex) => {\n    this._handleTabChange(activeTabIndex);\n  };\n\n  _setContainer = (container) => {\n    this._container = findDOMNode(container);\n  };\n\n  _resizePanel = () => {\n    if (!this._container) {\n      return;\n    }\n\n    const activePanel = this._container.querySelector('.md-tab-panel[aria-hidden=false]');\n    if (activePanel && this.state.panelHeight !== activePanel.offsetHeight) {\n      this.setState({ panelHeight: activePanel.offsetHeight });\n    }\n  };\n\n  render() {\n    const { panelHeight } = this.state;\n    const {\n      component: Component,\n      style,\n      className,\n      panelStyle,\n      panelClassName,\n      panelComponent,\n      headerStyle,\n      headerClassName,\n      slideStyle,\n      slideHeightProp,\n      swipeableViewsStyle,\n      swipeableViewsClassName,\n      headerComponent,\n      headerZDepth,\n      children,\n      colored,\n      fixed,\n      labelAndIcon,\n      swipeableViewsProps,\n      themed,\n      /* eslint-disable no-unused-vars */\n      toolbar: propToolbar,\n      activeTabIndex: propActiveTabeIndex,\n      onTabChange,\n      defaultTabIndex,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n    let { toolbar } = this.props;\n\n    const activeTabIndex = getField(this.props, this.state, 'activeTabIndex');\n\n    const tabsEl = Children.only(children);\n    const tabId = tabsEl.props.tabId;\n    const content = Children.map(tabsEl.props.children, (tab, index) => {\n      if (!tab) {\n        return tab;\n      }\n\n      return (\n        <TabPanel\n          id={tab.props.controlsId || `${tabId}-panel-${index}`}\n          active={activeTabIndex === index}\n          style={panelStyle}\n          className={panelClassName}\n          component={panelComponent}\n          controlledById={tab.props.id || `${tabId}-${index}`}\n        >\n          <ResizeObserver watchHeight onResize={this._resizePanel} />\n          {tab.props.children}\n        </TabPanel>\n      );\n    });\n\n    const childrenProps = Children.only(children).props;\n    const tabs = cloneElement(children, {\n      colored: typeof childrenProps.colored !== 'undefined' ? childrenProps.colored : colored,\n      onTabChange: this._handleTabChange,\n      activeTabIndex,\n    });\n\n    let prominentToolbar = false;\n    if (toolbar) {\n      const toolbarProps = Children.only(toolbar).props;\n      toolbar = cloneElement(toolbar, {\n        component: toolbarProps.component || 'div',\n        colored: typeof toolbarProps.colored !== 'undefined' ? childrenProps.colored : colored,\n      });\n\n      prominentToolbar = toolbarProps.prominent || toolbarProps.prominentTitle;\n    }\n\n    let header;\n    if (fixed) {\n      header = (\n        <Paper\n          style={headerStyle}\n          className={cn('md-tabs-fixed-container', {\n            'md-toolbar--themed': themed,\n          }, headerClassName)}\n          zDepth={headerZDepth}\n          component={headerComponent}\n        >\n          {toolbar}\n          {tabs}\n        </Paper>\n      );\n    }\n\n    const baseSlideStyle = { [slideHeightProp]: panelHeight };\n\n    return (\n      <Component\n        style={style}\n        className={cn('md-tabs-container', className)}\n        {...props}\n        ref={this._setContainer}\n      >\n        {header}\n        {header ? null : toolbar}\n        {header ? null : tabs}\n        <SwipeableViews\n          {...swipeableViewsProps}\n          style={swipeableViewsStyle}\n          className={cn('md-tabs-content', {\n            'md-tabs-content--offset': !toolbar && !labelAndIcon && fixed,\n            'md-tabs-content--offset-icon': !toolbar && fixed && labelAndIcon,\n            'md-tabs-content--offset-toolbar': toolbar && fixed && !prominentToolbar && !labelAndIcon,\n            'md-tabs-content--offset-toolbar-prominent': toolbar && fixed && prominentToolbar && !labelAndIcon,\n            'md-tabs-content--offset-toolbar-icon': fixed && toolbar && labelAndIcon && !prominentToolbar,\n            'md-tabs-content--offset-toolbar-prominent-icon': fixed && toolbar && labelAndIcon && prominentToolbar,\n          }, swipeableViewsClassName)}\n          slideStyle={{\n            ...baseSlideStyle,\n            ...(typeof slideStyle === 'function' ? slideStyle(baseSlideStyle, panelHeight) : slideStyle),\n          }}\n          index={activeTabIndex}\n          onChangeIndex={this._handleSwipeChange}\n        >\n          {content}\n        </SwipeableViews>\n      </Component>\n    );\n  }\n}\n"]}