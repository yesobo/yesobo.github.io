{"version":3,"sources":["../../src/js/TextFields/TextField.js"],"names":["DEFAULT_TEXT_FIELD_SIZE","WILL_RECEIVE_KEYS","DID_UPDATE_KEYS","TextField","props","currentLength","_getLength","value","defaultValue","_canvas","width","resize","min","state","active","error","maxLength","floating","passwordVisible","passwordInitiallyVisible","styles","style","v","setState","_calcWidth","nextProps","nextState","_isErrored","some","key","prevProps","_field","blur","icon","disabled","stateful","block","dir","iconEl","only","undefined","primary","className","e","id","type","inputStyle","inputClassName","fullWidth","required","customSize","errorText","helpText","helpOnFocus","leftIconStateful","rightIconStateful","passwordIcon","lineDirection","paddedBlock","onDoubleClick","onTouchStart","onTouchMove","onTouchCancel","onTouchEnd","onMouseDown","onMouseUp","onMouseOver","onMouseLeave","ink","inlineIndicator","toolbar","passwordIconChildren","passwordIconClassName","propLabel","label","propPlaceholder","placeholder","propError","propActive","propFloating","propLeftIcon","leftIcon","propRightIcon","rightIcon","onClick","onChange","onBlur","onFocus","adjustMinWidth","propFloatingLabel","floatingLabel","_cloneIcon","_togglePasswordField","el","rightIconed","message","field","_setField","_handleFocus","_handleBlur","_handleChange","divider","children","multiline","rows","_handleContainerClick","_setContainer","getField","propTypes","oneOfType","number","string","object","bool","node","oneOf","isRequired","func","element","maxRows","shape","max","disableShrink","defaultProps","focus","String","length","div","_container","_calcIconWidth","window","getComputedStyle","getBoundingClientRect","parseInt","marginLeft","text","Array","reduce","s","indicator","querySelector","iconContainer","first","second","third","classList","contains","Math","ceil","target"],"mappings":"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","file":"TextField.js","sourcesContent":["import React, { PureComponent, Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\n\nimport isValued from '../utils/isValued';\nimport getField from '../utils/getField';\nimport getTextWidth from '../utils/Positioning/getTextWidth';\nimport controlled from '../utils/PropTypes/controlled';\nimport invalidIf from '../utils/PropTypes/invalidIf';\nimport minNumber from '../utils/PropTypes/minNumber';\nimport addSuffix from '../utils/StringUtils/addSuffix';\nimport FontIcon from '../FontIcons/FontIcon';\nimport getDeprecatedIcon from '../FontIcons/getDeprecatedIcon';\nimport FloatingLabel from './FloatingLabel';\nimport TextFieldMessage from './TextFieldMessage';\nimport PasswordButton from './PasswordButton';\nimport InputField from './InputField';\nimport TextFieldDivider from './TextFieldDivider';\n\nconst DEFAULT_TEXT_FIELD_SIZE = 180;\n\nconst WILL_RECEIVE_KEYS = ['style', 'value', 'resize'];\nconst DID_UPDATE_KEYS = ['leftIcon', 'rightIcon', 'passwordIcon', 'inlineIndicator'];\n\n/**\n * The `TextField` component can either be a single line `input` field or a multiline\n * `textarea` field. `FontIcon`s, messages, and password indicators can also be added\n * to this field.\n *\n * The optional mouse and touch events will be added to the entire container while the\n * text specific events will be added to the `input` or `textarea` tags.\n */\nexport default class TextField extends PureComponent {\n  static propTypes = {\n    /**\n     * The id for a text field. This is required when using the `label` prop for accessibility,\n     * but normally a good idea to include one anyways.\n     */\n    id: isRequiredForA11y(PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n    ])),\n\n    /**\n     * An optional style to apply to the text field's container.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply to the text field's container.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional style to apply to the `input` or `textarea` tag.\n     */\n    inputStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the `input` or `textarea` tag.\n     */\n    inputClassName: PropTypes.string,\n\n    /**\n     * An optional value to apply to the text field. This will make the component\n     * controlled and require the `onChange` prop.\n     */\n    value: controlled(PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]), 'onChange'),\n\n    /**\n     * An optional default value for the text field.\n     */\n    defaultValue: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n\n    /**\n     * Boolean if the text field should be displayed as a `block`. This is equivalent to\n     * the `full width` text field in the Material Design specs. This view will disable\n     * floating labels and remove the text divider from the component.\n     */\n    block: PropTypes.bool,\n\n    /**\n     * Boolean if the `block` text field should include padding to the left and right of\n     * the text field.\n     */\n    paddedBlock: PropTypes.bool,\n\n    /**\n     * Boolean if the text field is currently disabled.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * An optional label to display with the text field. This will convert the text field\n     * into a floating label text field. You can make it single line by only using the\n     * `placeholder` prop.\n     */\n    label: invalidIf(PropTypes.node, 'block'),\n\n    /**\n     * An optional placeholder text to display in the text field. If there is no `label` prop,\n     * the text field will be displayed as a single line text field. If there is a `label` prop,\n     * this will only be visible when there is no value and the user focused the text field.\n     */\n    placeholder: PropTypes.string,\n\n    /**\n     * The type for the text field. This is one of the most import props for mobile accessibility\n     * as it will update the keyboard for the text type. This does not get applied on multiline\n     * text fields.\n     */\n    type: PropTypes.oneOf([\n      'text',\n      'number',\n      'email',\n      'search',\n      'tel',\n      'url',\n      'password',\n    ]).isRequired,\n\n    /**\n     * An optional function to call when the text field's container triggers the `click` event.\n     */\n    onClick: PropTypes.func,\n\n    /**\n     * An optional function to call when the text field's container triggers the `doubleclick`\n     * event.\n     */\n    onDoubleClick: PropTypes.func,\n\n    /**\n     * An optional function to call when the text field's container triggers the `touchstart`\n     * event.\n     */\n    onTouchStart: PropTypes.func,\n\n    /**\n     * An optional function to call when the text field's container triggers the `touchmove`\n     * event.\n     */\n    onTouchMove: PropTypes.func,\n\n    /**\n     * An optional function to call when the text field's container triggers the `touchcancel`\n     * event.\n     */\n    onTouchCancel: PropTypes.func,\n\n    /**\n     * An optional function to call when the text field's container triggers the `touchend`\n     * event.\n     */\n    onTouchEnd: PropTypes.func,\n\n    /**\n     * An optional function to call when the text field's container triggers the `mousedown`\n     * event.\n     */\n    onMouseDown: PropTypes.func,\n\n    /**\n     * An optional function to call when the text field's container triggers the `mouseup`\n     * event.\n     */\n    onMouseUp: PropTypes.func,\n\n    /**\n     * An optional function to call when the text field's container triggers the `mouseover`\n     * event.\n     */\n    onMouseOver: PropTypes.func,\n\n    /**\n     * An optional function to call when the text field's container triggers the `mouseleave`\n     * event.\n     */\n    onMouseLeave: PropTypes.func,\n\n    /**\n     * An optional onChange function to call. If the `value` prop is defined, this is\n     * required.\n     *\n     * When the value changes in the text field, this will be called with the new text\n     * field's value and the change event.\n     *\n     * ```js\n     * onChange(e.target.value, e);\n     * ```\n     */\n    onChange: PropTypes.func,\n\n    /**\n     * An optional function to call when the text field is blurred.\n     */\n    onBlur: PropTypes.func,\n\n    /**\n     * An optional function to call when the text field is focused.\n     */\n    onFocus: PropTypes.func,\n\n    /**\n     * An optional boolean if the `active` state of the text field can be externally\n     * modified as well. The text field is usually considered active when it gains focus.\n     *\n     * If this prop is set, it will check both the active prop and the active state to\n     * determine if one is true.\n     */\n    active: PropTypes.bool,\n\n    /**\n     * An optional boolean if the `error` state of the text field can be externally\n     * modified as well. The text field is usually considered errored when it is required\n     * and there is no value or the current length of the text field's value is greater\n     * than the `maxLength` prop.\n     *\n     * If this prop is set, it will check both the error prop and the error state to\n     * determine if one is true.\n     */\n    error: PropTypes.bool,\n\n    /**\n     * An optional boolean if the `floating` state of the text field's floating label can be\n     * externally modified as well. The floating state is true when the text field gains focus\n     * or there is a value in the text field.\n     *\n     * If this prop is set, it will check both the floating prop and the floating state to\n     * determine if one is true.\n     */\n    floating: PropTypes.bool,\n\n    /**\n     * Boolean if the text field is required. If the user blurs the text field while there is\n     * no value and it is required, the `error` state will be set to true.\n     */\n    required: PropTypes.bool,\n\n    /**\n     * The direction that the underline should appear from.\n     */\n    lineDirection: PropTypes.oneOf(['left', 'center', 'right']).isRequired,\n\n    /**\n     * An optional icon to place to the left of the text field.\n     */\n    leftIcon: PropTypes.element,\n\n    /**\n     * Boolean if the left icon should be stateful. This means that the icon will\n     * gain the active or error colors with the text field.\n     */\n    leftIconStateful: PropTypes.bool,\n\n    /**\n     * An optional icon to place to the right of the text field.\n     */\n    rightIcon: PropTypes.element,\n\n    /**\n     * Boolean if the right icon should be stateful. This means that the icon will\n     * gain the active or error colors with the text field.\n     */\n    rightIconStateful: PropTypes.bool,\n\n    /**\n     * The icon to use for a password text field.\n     */\n    passwordIcon: PropTypes.element,\n\n    /**\n     * Boolean if the password is initially visible.\n     */\n    passwordInitiallyVisible: PropTypes.bool,\n\n    /**\n     * Boolean if the text field should be displayed as full width.\n     */\n    fullWidth: PropTypes.bool,\n\n    /**\n     * The number of rows for the `multiline` text field. This value must be greater than\n     * or equal to 1. When this value is set, the text field will be converted to a multiline\n     * field.\n     */\n    rows: minNumber(1, false),\n\n    /**\n     * The maximum number of rows for a `multiline` text field. If this value is\n     * `undefined`, `0`, or a number less than `0`, the multiline text field will\n     * infinitely expand.\n     */\n    maxRows: PropTypes.number,\n\n    /**\n     * An optional custom size to apply to the text field. This is used along with\n     * the `$md-text-field-custom-sizes` variable. It basically applies a className of\n     * `md-text-field--NAME`.\n     */\n    customSize: PropTypes.string,\n\n    /**\n     * An optional error text to display below the text field. This will only appear when\n     * the text field has the `error` state through the `error` prop, the current length\n     * of the text field's value is greater than the `maxLength` prop, or the field is\n     * required and the user blurs the text field with no value.\n     */\n    errorText: PropTypes.node,\n\n    /**\n     * An optional help text to display below the text field. This will always be visible\n     * unless the `helpOnFocus` prop is set to true. Otherwise it will appear on focus.\n     */\n    helpText: PropTypes.node,\n\n    /**\n     * Boolean if the help text should display on focus only.\n     */\n    helpOnFocus: PropTypes.bool,\n\n    /**\n     * An optional max length for the text field. This will insert a counter underneath the\n     * text field that appears on focus.\n     */\n    maxLength: PropTypes.number,\n\n    /**\n     * The ink when there is an injectInk above the text field. Used from the SelectField.\n     *\n     * @access private\n     */\n    ink: PropTypes.node,\n\n    /**\n     * An optional element to display inside of the `TextField` to the farthest right. This will\n     * position the indicator absolutely and add some additional padding to the `TextField`.\n     */\n    inlineIndicator: PropTypes.element,\n\n    /**\n     * This prop allows the text field to resize its width to stay between the min and max sizes provided. By\n     * default, the field will expand and collapse based on the amount of text provided. The collapsing can\n     * be disabled by providing `disableShrink` to the configuration object.\n     *\n     * If the `min` prop is not provided, it will default to `180` which is about the same size as a default\n     * text field.\n     */\n    resize: PropTypes.shape({\n      min: PropTypes.number,\n      max: PropTypes.number.isRequired,\n      disableShrink: PropTypes.bool,\n    }),\n\n    /**\n     * Boolean if the TextField is in a toolbar and acting as a title. This will apply additional styles to the\n     * text field to make it look like the toolbar's title.\n     */\n    toolbar: PropTypes.bool,\n\n    passwordIconChildren: deprecated(PropTypes.node, 'Use the `passwordIcon` prop instead'),\n    passwordIconClassName: deprecated(PropTypes.string, 'Use the `passwordIcon` prop instead'),\n    icon: deprecated(PropTypes.node, 'Use the `leftIcon` or `rightIcon` prop instead'),\n    floatingLabel: deprecated(\n      PropTypes.bool,\n      'The `label` prop is now always floating. To create a non-floating text field, only use the `placeholder` prop'\n    ),\n    adjustMinWidth: deprecated(PropTypes.bool, 'Manually add a min width style instead'),\n  };\n\n  static defaultProps = {\n    type: 'text',\n    lineDirection: 'left',\n    passwordIcon: <FontIcon>remove_red_eye</FontIcon>,\n    leftIconStateful: true,\n    rightIconStateful: true,\n    fullWidth: true,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const currentLength = this._getLength(typeof props.value !== 'undefined' ? props.value : props.defaultValue);\n\n    this._canvas = null;\n    let width = null;\n    if (typeof props.resize !== 'undefined') {\n      width = typeof props.resize.min === 'number' ? props.resize.min : DEFAULT_TEXT_FIELD_SIZE;\n    }\n\n    this.state = {\n      active: false,\n      error: props.maxLength ? props.maxLength < currentLength : false,\n      floating: isValued(props.defaultValue) || isValued(props.value),\n      passwordVisible: props.passwordInitiallyVisible,\n      currentLength,\n      styles: width ? { width, ...props.style } : props.style,\n    };\n  }\n\n  componentDidMount() {\n    const { value, defaultValue, resize } = this.props;\n    const v = typeof value !== 'undefined' ? value : defaultValue;\n    if (resize) { // always want to set width on mount\n      this.setState({ width: this._calcWidth(v) }); // eslint-disable-line react/no-did-mount-set-state\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { value, resize, style } = nextProps;\n    const nextState = {};\n    if (value !== this.props.value) {\n      nextState.error = this._isErrored(nextProps);\n      nextState.floating = isValued(value);\n      nextState.currentLength = this._getLength(value);\n    }\n\n    if (WILL_RECEIVE_KEYS.some(key => this.props[key] !== nextProps[key])) {\n      if (!resize) {\n        nextState.styles = style;\n      } else {\n        const width = this._calcWidth(value, nextProps);\n        nextState.styles = { width, ...style };\n      }\n    }\n\n    this.setState(nextState);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { resize, value, style } = this.props;\n    if (resize && DID_UPDATE_KEYS.some(key => this.props[key] !== prevProps[key])) {\n      const width = this._calcWidth(value, this.props);\n      this.setState({ styles: { width, ...style } }); // eslint-disable-line react/no-did-update-set-state\n    }\n  }\n\n  /**\n   * A helper function for getting the specific `input` field or the `textarea` in the `TextField`.\n   * This is accessible if you use `refs`.\n   *\n   * Example:\n   *\n   * ```js\n   * <TextField ref={field => this._field = field;} label=\"Hello\" />;\n   *\n   * this._field.getField(); // `input` node\n   * ```\n   */\n  getField = () => this._field.getField();\n\n  /**\n   * A helper function for focusing the `input` field or the `textarea` in the `TextField`.\n   * This is accessibile if you use `refs`.\n   * Example:\n   *\n   * ```js\n   * <TextField ref={field => this._field = field;} label=\"Hello\" />;\n   *\n   * this._field.focus();\n   * ```\n   */\n  focus = () => {\n    this._field.focus();\n  };\n\n  /**\n   * Gets the current value from the text field. This is used when you have an uncontrolled\n   * text field and simply need the value from a ref callback.\n   *\n   * @return {String} the text field's value\n   */\n  get value() {\n    return this.getField().value;\n  }\n\n\n  /**\n   * A helper function for blurring the `input` field or the `textarea` in the `TextField`.\n   * This is accessible if you use `refs`.\n   * Example:\n   *\n   * ```js\n   * <TextField ref={field => this._field = field;} label=\"Hello\" />;\n   *\n   * this._field.blur();\n   * ```\n   */\n  blur() {\n    this._field.blur();\n  }\n\n  _cloneIcon(icon, active, error, disabled, stateful, block, dir) {\n    if (!icon) {\n      return icon;\n    }\n\n    try {\n      const iconEl = Children.only(icon);\n      return cloneElement(iconEl, {\n        key: iconEl.key || `icon-${dir}`,\n        disabled: stateful ? disabled : undefined,\n        primary: stateful ? !error && active : undefined,\n        error: stateful ? error : undefined,\n        className: cn('md-text-field-icon', {\n          'md-text-field-icon--positioned': !block,\n        }, iconEl.props.className),\n      });\n    } catch (e) {\n      return icon;\n    }\n  }\n\n  _getLength = (v) => {\n    if (isValued(v)) {\n      return String(v).length;\n    }\n\n    return 0;\n  };\n\n  _setContainer = (div) => {\n    this._container = div;\n  };\n\n  _setField = (field) => {\n    if (field !== null) {\n      this._field = field;\n    }\n  };\n\n  /**\n   * A small utility function for calculating an inline-icon's width keeping the SVG Icons\n   * in mind and any margin that gets applied for spacing.\n   */\n  _calcIconWidth = (icon) => {\n    const style = window.getComputedStyle(icon);\n\n    return icon.getBoundingClientRect().width\n      + parseInt(style.marginLeft, 10);\n  };\n\n  _calcWidth = (value, props = this.props) => {\n    let text = value;\n    // if it is a password, use the bullet unicode instead\n    if (props.type === 'password') {\n      text = [...new Array(value.length)].reduce(s => `${s}\\u2022`, '');\n    }\n\n    const field = this._field && this._field.getField();\n    if (!isValued(text) && field) {\n      text = field.value;\n    }\n\n    let width = getTextWidth(text, field);\n    if (width === null || !field) {\n      // some error happened, don't do other logic\n      return width;\n    }\n\n    const { max } = props.resize;\n    const min = getField(props.resize, { min: DEFAULT_TEXT_FIELD_SIZE }, 'min');\n\n    if (this._container) {\n      const indicator = this._container.querySelector('.md-text-field-inline-indicator');\n      if (indicator) {\n        width += indicator.getBoundingClientRect().width;\n      }\n\n      const iconContainer = this._container.querySelector('.md-text-field-icon-container');\n      if (iconContainer) {\n        // There is conditionally an icon before and after the text field, or only an icon before/after\n        // There is never a third icon if the indicator is defined\n        const [first, second, third] = iconContainer.children;\n        if (first.classList.contains('md-icon')) {\n          width += first.getBoundingClientRect().width;\n          width += parseInt(window.getComputedStyle(second).marginLeft, 10);\n\n          if (third) {\n            width += this._calcIconWidth(third);\n          }\n        } else if (second) {\n          width += this._calcIconWidth(second);\n        }\n      }\n    }\n\n    return Math.ceil(Math.min(max, Math.max(min, width)));\n  };\n\n  _isErrored = ({ value, maxLength, required } = this.props) => {\n    let { error } = this.state;\n    const currentLength = this._getLength(value);\n    if (required && error) {\n      error = !isValued(value);\n    }\n\n    if (maxLength) {\n      error = error || currentLength > maxLength;\n    }\n\n    return error;\n  };\n\n  _handleContainerClick = (e) => {\n    if (this.props.onClick) {\n      this.props.onClick(e);\n    }\n\n    if (!this.props.disabled) {\n      this.focus();\n    }\n  };\n\n  _handleBlur = (e) => {\n    const { required, maxLength, onBlur } = this.props;\n    if (onBlur) {\n      onBlur(e);\n    }\n\n    const { value } = e.target;\n    const state = {\n      active: false,\n      error: (required && !isValued(value)) || (maxLength && String(value).length > maxLength),\n    };\n\n    if (!this.props.block) {\n      state.floating = isValued(value);\n    }\n\n    this.setState(state);\n  };\n\n  _handleFocus = (e) => {\n    const { onFocus, block } = this.props;\n    if (onFocus) {\n      onFocus(e);\n    }\n\n    const state = { active: true };\n    if (!block) {\n      state.floating = true;\n    }\n\n    this.setState(state);\n  };\n\n  _handleChange = (e) => {\n    const { onChange, maxLength, required, resize } = this.props;\n    const { value } = e.target;\n    if (onChange) {\n      onChange(e.target.value, e);\n    }\n\n    const currentLength = value.length;\n    let state;\n    if (typeof maxLength !== 'undefined') {\n      state = { currentLength, error: currentLength > maxLength };\n    } else if (required && this.state.error) {\n      state = { error: !currentLength };\n    }\n\n    if (typeof this.props.value === 'undefined' && resize) {\n      const width = this._calcWidth(value);\n      if (!resize.disableShrink || !this.state.styles || width > this.state.styles.width) {\n        state = state || {};\n        state.styles = { ...this.state.styles, width };\n      }\n    }\n\n    if (state) {\n      this.setState(state);\n    }\n  };\n\n  _togglePasswordField = () => {\n    this.setState({ passwordVisible: !this.state.passwordVisible }, this.focus);\n  };\n\n  render() {\n    const { currentLength, passwordVisible, styles } = this.state;\n    const {\n      id,\n      type,\n      className,\n      inputStyle,\n      inputClassName,\n      block,\n      fullWidth,\n      required,\n      customSize,\n      maxLength,\n      errorText,\n      helpText,\n      helpOnFocus,\n      disabled,\n      leftIconStateful,\n      rightIconStateful,\n      passwordIcon,\n      lineDirection,\n      paddedBlock,\n      onDoubleClick,\n      onTouchStart,\n      onTouchMove,\n      onTouchCancel,\n      onTouchEnd,\n      onMouseDown,\n      onMouseUp,\n      onMouseOver,\n      onMouseLeave,\n      ink,\n      inlineIndicator,\n      toolbar,\n\n      // deprecated\n      icon,\n      passwordIconChildren,\n      passwordIconClassName,\n      /* eslint-disable no-unused-vars */\n      style,\n      label: propLabel,\n      placeholder: propPlaceholder,\n      error: propError,\n      active: propActive,\n      floating: propFloating,\n      leftIcon: propLeftIcon,\n      rightIcon: propRightIcon,\n      onClick,\n      onChange,\n      onBlur,\n      onFocus,\n      resize,\n\n      // deprecated\n      adjustMinWidth,\n      floatingLabel: propFloatingLabel,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    let {\n      label,\n      placeholder,\n      error,\n      active,\n      floating,\n      leftIcon,\n      rightIcon,\n    } = this.props;\n    active = active || this.state.active;\n    error = error || this.state.error;\n    floating = floating || this.state.floating;\n\n    if (required) {\n      if (label) {\n        label = addSuffix(label, '*');\n      }\n\n      if (placeholder && !label) {\n        placeholder = addSuffix(placeholder, '*');\n      }\n    }\n\n    if (label && !floating) {\n      placeholder = null;\n    }\n\n    leftIcon = this._cloneIcon(icon || leftIcon, active, error, disabled, leftIconStateful, block, 'left');\n    if (type === 'password' && !disabled) {\n      rightIcon = (\n        <PasswordButton\n          key=\"password-btn\"\n          onClick={this._togglePasswordField}\n          active={active}\n          passwordVisible={passwordVisible}\n          icon={getDeprecatedIcon(passwordIconClassName, passwordIconChildren, passwordIcon)}\n          block={block}\n          floating={!!label}\n        />\n      );\n    } else if (inlineIndicator) {\n      const el = Children.only(inlineIndicator);\n      rightIcon = cloneElement(inlineIndicator, {\n        key: 'icon-right',\n        className: cn('md-text-field-inline-indicator', {\n          'md-text-field-inline-indicator--floating': label,\n          'md-text-field-inline-indicator--block': block,\n        }, el.props.className),\n      });\n    } else {\n      rightIcon = this._cloneIcon(rightIcon, active, error, disabled, rightIconStateful, block, 'right');\n    }\n    const rightIconed = !!rightIcon && type !== 'password' && !inlineIndicator;\n\n    const floatingLabel = (\n      <FloatingLabel\n        key=\"label\"\n        label={label}\n        htmlFor={id}\n        active={active}\n        error={error}\n        floating={floating}\n        customSize={customSize}\n        disabled={disabled}\n        iconOffset={!!leftIcon}\n      />\n    );\n\n    const message = (\n      <TextFieldMessage\n        key=\"message\"\n        active={active}\n        error={error}\n        errorText={errorText}\n        helpText={helpText}\n        helpOnFocus={helpOnFocus}\n        block={block}\n        maxLength={maxLength}\n        leftIcon={!!leftIcon}\n        rightIcon={!!rightIcon}\n        currentLength={currentLength}\n      />\n    );\n\n    const field = (\n      <InputField\n        {...props}\n        key=\"field\"\n        ref={this._setField}\n        id={id}\n        type={type}\n        label={label}\n        style={inputStyle}\n        className={cn({ 'md-text-field--toolbar': toolbar }, inputClassName)}\n        disabled={disabled}\n        customSize={customSize}\n        fullWidth={fullWidth}\n        passwordVisible={passwordVisible}\n        placeholder={placeholder}\n        block={block}\n        onFocus={this._handleFocus}\n        onBlur={this._handleBlur}\n        onChange={this._handleChange}\n        inlineIndicator={!!inlineIndicator}\n      />\n    );\n\n    let divider;\n    if (!block) {\n      divider = (\n        <TextFieldDivider\n          key=\"text-divider\"\n          active={active}\n          error={error}\n          lineDirection={lineDirection}\n        />\n      );\n    }\n\n    let children;\n    if (leftIcon || rightIconed) {\n      children = (\n        <div key=\"icon-divider\" className=\"md-text-field-icon-container\">\n          {leftIcon}\n          <div\n            key=\"divider-container\"\n            className={cn('md-text-field-divider-container', {\n              'md-text-field-divider-container--grow': fullWidth,\n            })}\n          >\n            {field}\n            {divider}\n          </div>\n          {rightIcon}\n        </div>\n      );\n    } else {\n      children = [leftIcon, field, divider, rightIcon];\n    }\n\n    children = [floatingLabel, children, message];\n\n    const multiline = typeof props.rows !== 'undefined';\n    return (\n      <div\n        style={styles}\n        className={cn('md-text-field-container', {\n          'md-inline-block': !fullWidth && !block,\n          'md-full-width': block || fullWidth,\n          'md-text-field-container--disabled': disabled,\n          'md-text-field-container--input': !multiline,\n          'md-text-field-container--input-block': block && !multiline,\n          'md-text-field-container--multiline': multiline,\n          'md-text-field-container--multiline-block': multiline && block,\n          'md-text-field-container--padded-block': block && paddedBlock,\n        }, className)}\n        onClick={this._handleContainerClick}\n        onDoubleClick={onDoubleClick}\n        onMouseOver={onMouseOver}\n        onMouseLeave={onMouseLeave}\n        onMouseDown={onMouseDown}\n        onMouseUp={onMouseUp}\n        onTouchStart={onTouchStart}\n        onTouchEnd={onTouchEnd}\n        onTouchCancel={onTouchCancel}\n        onTouchMove={onTouchMove}\n        ref={this._setContainer}\n      >\n        {ink}\n        {children}\n      </div>\n    );\n  }\n}\n"]}