{"version":3,"sources":["../../src/js/Chips/Chip.js"],"names":["Chip","state","hover","_handleMouseEnter","e","props","onMouseEnter","setState","_handleMouseLeave","onMouseLeave","label","className","labelStyle","labelClassName","avatar","children","removable","remove","onClick","rotateIcon","iconClassName","removeIconChildren","removeIconClassName","icon","chipIconCN","isValidElement","Children","only","cloneElement","propTypes","style","object","string","bool","node","isRequired","element","func","defaultProps"],"mappings":"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","file":"Chip.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\n\nimport FontIcon from '../FontIcons/FontIcon';\n\nexport default class Chip extends PureComponent {\n  static propTypes = {\n    /**\n     * An optional style to apply.\n     */\n    style: PropTypes.object,\n\n    /**\n     * An optional className to apply.\n     */\n    className: PropTypes.string,\n\n    /**\n     * An optional style to apply to the chip's label.\n     */\n    labelStyle: PropTypes.object,\n\n    /**\n     * An optional className to apply to the chip's label.\n     */\n    labelClassName: PropTypes.string,\n\n    /**\n     * Boolean if the `.md-chip-icon--rotate` style should be applied to the remove icon.\n     * The `.md-chip-icon--rotate` just rotates the icon 45 degrees.\n     */\n    rotateIcon: PropTypes.bool,\n\n    /**\n     * Any children used to display the remove icon when `removable`.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The label to display on the chip.\n     */\n    label: PropTypes.node.isRequired,\n\n    /**\n     * Boolean if the chip is removable.\n     */\n    removable: PropTypes.bool,\n\n    /**\n     * An optional avatar to display on the chip.\n     */\n    avatar: PropTypes.element,\n\n    /**\n     * An optional function to call when the `click` event is triggered.\n     */\n    onClick: PropTypes.func,\n\n    /**\n     * An optional function to call when the `mouseenter` event is triggered.\n     */\n    onMouseEnter: PropTypes.func,\n\n    /**\n     * An optional function to call when the `mouseleave` event is triggered.\n     */\n    onMouseLeave: PropTypes.func,\n\n    iconClassName: deprecated(PropTypes.string, 'Use the `children` prop as a single FontIcon or SVGIcon instead'),\n    remove: deprecated(PropTypes.func, 'Use `removable` and `onClick` instead'),\n    removeIconChildren: deprecated(PropTypes.node, 'Use `children` instead'),\n    removeIconClassName: deprecated(PropTypes.string, 'Use `children` prop as a single FontIcon or SVGIcon instead'),\n  };\n\n  static defaultProps = {\n    rotateIcon: true,\n    children: <FontIcon>add_circle</FontIcon>,\n  };\n\n  state = { hover: false };\n\n  _handleMouseEnter = (e) => {\n    if (this.props.onMouseEnter) {\n      this.props.onMouseEnter(e);\n    }\n\n    this.setState({ hover: true });\n  };\n\n  _handleMouseLeave = (e) => {\n    if (this.props.onMouseLeave) {\n      this.props.onMouseLeave(e);\n    }\n\n    this.setState({ hover: false });\n  };\n\n  render() {\n    const { hover } = this.state;\n    const {\n      label,\n      className,\n      labelStyle,\n      labelClassName,\n      avatar,\n      children,\n      removable,\n      remove,\n      onClick,\n      rotateIcon,\n\n      /* eslint-disable no-unused-vars */\n      // deprecated\n      iconClassName,\n      removeIconChildren,\n      removeIconClassName,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    let icon;\n    if (removable || remove) {\n      const chipIconCN = cn('md-chip-icon', {\n        'md-chip-icon--rotate': rotateIcon,\n        'md-chip-text--hover': hover,\n      });\n\n      if (React.isValidElement(children)) {\n        icon = React.Children.only(children);\n        icon = React.cloneElement(icon, { className: cn(chipIconCN, icon.props.className) });\n      } else {\n        icon = (\n          <FontIcon className={chipIconCN} iconClassName={iconClassName}>\n            {children}\n          </FontIcon>\n        );\n      }\n    }\n\n    return (\n      <button\n        type=\"button\"\n        {...props}\n        className={cn('md-chip', {\n          'md-chip--avatar': avatar,\n          'md-chip--remove': removable,\n          'md-chip--hover': hover,\n        }, className)}\n        onClick={remove || onClick}\n        onMouseEnter={this._handleMouseEnter}\n        onMouseLeave={this._handleMouseLeave}\n      >\n        {avatar}\n        <span\n          style={labelStyle}\n          className={cn('md-chip-text', {\n            'md-chip-text--hover': hover,\n          }, labelClassName)}\n        >\n          {label}\n        </span>\n        {icon}\n      </button>\n    );\n  }\n}\n"]}