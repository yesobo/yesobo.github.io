{"version":3,"sources":["../../../src/js/utils/Positioning/calcPageOffset.js"],"names":["calcPageOffset","el","left","right","rect","getBoundingClientRect","top"],"mappings":";;;;;kBAawBA,c;;AAZxB;;;;;;AAEA;;;;;;;;;;AAUe,SAASA,cAAT,CAAwBC,EAAxB,EAA4B;AACzC,MAAI,CAACA,EAAL,EAAS;AACP,WAAO,EAAEC,MAAM,IAAR,EAAcC,OAAO,IAArB,EAAP;AACD;;AAED,MAAMC,OAAOH,GAAGI,qBAAH,EAAb;AACA,SAAO;AACLH,UAAME,KAAKF,IAAL,GAAY,+BAAgB,GAAhB,CADb;AAELI,SAAKF,KAAKE,GAAL,GAAW,+BAAgB,GAAhB;AAFX,GAAP;AAID,C,CAvBD","file":"calcPageOffset.js","sourcesContent":["/** @module utils/Positioning/calcPageOffset */\nimport getPagePosition from './getPagePosition';\n\n/**\n * Calculates the page offset of an element. If the element\n * is false-ish, an empty object will be returned.\n *\n * This is really only used for calculating an ink position.\n *\n * @param {Node} el - An html node to find a page offset for.\n * @return {Object} an object with a left and top attribute for the page\n *    offset.\n */\nexport default function calcPageOffset(el) {\n  if (!el) {\n    return { left: null, right: null };\n  }\n\n  const rect = el.getBoundingClientRect();\n  return {\n    left: rect.left + getPagePosition('x'),\n    top: rect.top + getPagePosition('y'),\n  };\n}\n"]}