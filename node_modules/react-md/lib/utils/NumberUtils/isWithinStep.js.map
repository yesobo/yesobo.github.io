{"version":3,"sources":["../../../src/js/utils/NumberUtils/isWithinStep.js"],"names":["isWithinStep","value","step","decimals","String","split","corrector","length","Math","pow"],"mappings":";;;;;kBAUwBA,Y;AAVxB;;AAEA;;;;;;;;AAQe,SAASA,YAAT,CAAsBC,KAAtB,EAA6BC,IAA7B,EAAmC;AAChD,MAAMC,WAAWC,OAAOF,IAAP,EAAaG,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAjB;AACA,MAAMC,YAAY,OAAOH,QAAP,KAAoB,WAApB,IAAmCA,SAASI,MAAT,GAAkB,CAArD,GACdC,KAAKC,GAAL,CAAS,EAAT,EAAaN,SAASI,MAAtB,CADc,GAEd,CAFJ;;AAIA,SAAQN,QAAQK,SAAT,IAAuBJ,OAAOI,SAA9B,MAA6C,CAApD;AACD","file":"isWithinStep.js","sourcesContent":["/** @module utils/NumberUtils/isWithinStep */\n\n/**\n * Checks if a provided value is within the current step. I don't remember the main\n * usage for this, but it is for the Slider component.\n *\n * @param {number} value - the current value\n * @param {number} step - the step value\n * @return {Boolean} true if the vlaue is within the step\n */\nexport default function isWithinStep(value, step) {\n  const decimals = String(step).split('.')[1];\n  const corrector = typeof decimals !== 'undefined' && decimals.length > 0\n    ? Math.pow(10, decimals.length)\n    : 1;\n\n  return (value * corrector) % (step * corrector) === 0;\n}\n"]}