{"version":3,"sources":["../../src/js/utils/findIgnoreCase.js"],"names":["findIgnoreCase","haystack","value","dataLabel","needle","toLowerCase","suggestion","some","hay","isValidElement","hayStr","toString","indexOf"],"mappings":";;;;;;8QAAA;;;kBAewBA,c;;AAdxB;;;;;;AAEA;;;;;;;;;;;;AAYe,SAASA,cAAT,CAAwBC,QAAxB,EAAkCC,KAAlC,EAAyCC,SAAzC,EAAoD;AACjE,MAAMC,SAASF,QAAQA,MAAMG,WAAN,EAAR,GAA8B,EAA7C;;AAEA,MAAI,CAACD,MAAL,EAAa;AAAE,WAAOA,MAAP;AAAgB;;AAE/B,MAAIE,aAAa,EAAjB;AACAL,WAASM,IAAT,CAAc,eAAO;AACnB,QAAIC,QAAQ,IAAR,IAAgB,OAAOA,GAAP,KAAe,WAA/B,IAA8C,gBAAMC,cAAN,CAAqBD,GAArB,CAAlD,EAA6E;AAC3E,aAAO,KAAP;AACD;;AAED,QAAME,SAAS,QAAOF,GAAP,yCAAOA,GAAP,OAAe,QAAf,GAA0BA,IAAIL,SAAJ,CAA1B,GAA2CK,IAAIG,QAAJ,EAA1D;;AAEA,QAAID,OAAOL,WAAP,GAAqBO,OAArB,CAA6BR,MAA7B,MAAyC,CAA7C,EAAgD;AAC9CE,mBAAaI,MAAb;AACD;;AAED,WAAOJ,UAAP;AACD,GAZD;;AAcA,SAAOA,UAAP;AACD","file":"findIgnoreCase.js","sourcesContent":["/** @module utils/findIgnoreCase */\nimport React from 'react';\n\n/**\n * This function finds the first item in a `haystack` that starts with every\n * letter of the `value` in order. It will ignore:\n *  - null or undefined\n *  - valid React components\n *\n * @param {Array.<string|number|Object|function>} haystack - the haystack to search.\n * @param {string} value - the current value to use.\n * @param {string=} dataLabel - the object key to use to extract the comparing value.\n *\n * @return {string} the found element or the empty string.\n */\nexport default function findIgnoreCase(haystack, value, dataLabel) {\n  const needle = value ? value.toLowerCase() : '';\n\n  if (!needle) { return needle; }\n\n  let suggestion = '';\n  haystack.some(hay => {\n    if (hay === null || typeof hay === 'undefined' || React.isValidElement(hay)) {\n      return false;\n    }\n\n    const hayStr = typeof hay === 'object' ? hay[dataLabel] : hay.toString();\n\n    if (hayStr.toLowerCase().indexOf(needle) === 0) {\n      suggestion = hayStr;\n    }\n\n    return suggestion;\n  });\n\n  return suggestion;\n}\n"]}