{"version":3,"sources":["../../../src/js/utils/PropTypes/oneRequiredForA11yIf.js"],"names":["oneRequiredForA11yIf","validator","otherPropNames","validate","props","propName","componentName","location","propFullName","filterUndefined","pn","componentNameSafe","propFullNameSafe","defined","allPropNames","concat","args","err","filter","length","Error","join"],"mappings":";;;;;kBAWwBA,oB;AAXxB;;AAEA;;;;;;;;;AASe,SAASA,oBAAT,CAA8BC,SAA9B,EAA4D;AAAA,oCAAhBC,cAAgB;AAAhBA,kBAAgB;AAAA;;AACzE,SAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyBC,QAAzB,EAAmCC,aAAnC,EAAkDC,QAAlD,EAA4DC,YAA5D,EAAmF;AACxF,QAAMC,kBAAkB,SAAlBA,eAAkB;AAAA,aAAM,OAAOL,MAAMM,EAAN,CAAP,KAAqB,WAA3B;AAAA,KAAxB;AACA,QAAMC,oBAAoBL,iBAAiB,eAA3C;AACA,QAAMM,mBAAmBJ,gBAAgBH,QAAzC;AACA,QAAMQ,UAAU,OAAOT,MAAMC,QAAN,CAAP,KAA2B,WAA3C;AACA,QAAMS,eAAe,CAACF,gBAAD,EAAmBG,MAAnB,CAA0Bb,cAA1B,CAArB;;AALwF,uCAANc,IAAM;AAANA,UAAM;AAAA;;AAOxF,QAAIC,MAAMhB,4BAAUG,KAAV,EAAiBC,QAAjB,EAA2BC,aAA3B,EAA0CC,QAA1C,EAAoDC,YAApD,SAAqEQ,IAArE,EAAV;AACA,QAAI,CAACC,GAAD,IAAQJ,OAAR,IAAmB,CAACC,aAAaI,MAAb,CAAoBT,eAApB,EAAqCU,MAA7D,EAAqE;AACnEF,YAAM,IAAIG,KAAJ,CACJ,sDAAqDT,iBAArD,sGAC+EC,gBAD/E,wBAEWE,aAAaO,IAAb,CAAkB,MAAlB,CAFX,QADI,CAAN;AAKD;;AAED,WAAOJ,GAAP;AACD,GAjBD;AAkBD","file":"oneRequiredForA11yIf.js","sourcesContent":["/** @module utils/PropTypes/oneRequiredForA11yIf */\n\n/**\n * A PropType validator to make sure that any of the other prop names have been defined\n * if the current prop is also defined.\n *\n * This is mostly useful for when adding a prop requires additional accessibility props defined\n * as well.\n *\n * @param {function} validator - The current prop's validator.\n */\nexport default function oneRequiredForA11yIf(validator, ...otherPropNames) {\n  return function validate(props, propName, componentName, location, propFullName, ...args) {\n    const filterUndefined = pn => typeof props[pn] !== 'undefined';\n    const componentNameSafe = componentName || '<<anonymous>>';\n    const propFullNameSafe = propFullName || propName;\n    const defined = typeof props[propName] !== 'undefined';\n    const allPropNames = [propFullNameSafe].concat(otherPropNames);\n\n    let err = validator(props, propName, componentName, location, propFullName, ...args);\n    if (!err && defined && !allPropNames.filter(filterUndefined).length) {\n      err = new Error(\n        `One of the following props are required to make \\`${componentNameSafe}\\` accessible ` +\n        `for users of assistive technologies such as screen readers when using the \\`${propFullNameSafe}\\` ` +\n        `prop. \\`${allPropNames.join('`, `')}\\`.`\n      );\n    }\n\n    return err;\n  };\n}\n"]}