{"version":3,"sources":["../../src/js/utils/caseInsensitiveFilter.js"],"names":["caseInsensitiveFilter","haystack","filterText","dataLabel","needle","toLowerCase","filter","hay","isValidElement","value","toString","indexOf"],"mappings":";;;;;;8QAAA;;;kBAyBwBA,qB;;AAxBxB;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBe,SAASA,qBAAT,CAA+BC,QAA/B,EAAyCC,UAAzC,EAAqDC,SAArD,EAAgE;AAC7E,MAAMC,SAASF,WAAWG,WAAX,EAAf;;AAEA,SAAOJ,SAASK,MAAT,CAAgB,eAAO;AAC5B,QAAIC,QAAQ,IAAR,IAAgB,OAAOA,GAAP,KAAe,WAAnC,EAAgD;AAC9C,aAAO,KAAP;AACD,KAFD,MAEO,IAAI,gBAAMC,cAAN,CAAqBD,GAArB,CAAJ,EAA+B;AACpC,aAAO,IAAP;AACD;;AAED,QAAIE,cAAJ;AACA,mBAAeF,GAAf,yCAAeA,GAAf;AACE,WAAK,QAAL;AACA,WAAK,QAAL;AACEE,gBAAQF,IAAIG,QAAJ,EAAR;AACA;AACF;AACED,gBAAQF,IAAIJ,SAAJ,CAAR;AANJ;;AASA,WAAOM,SAASA,MAAMJ,WAAN,GAAoBM,OAApB,CAA4BP,MAA5B,MAAwC,CAAC,CAAzD;AACD,GAlBM,CAAP;AAmBD","file":"caseInsensitiveFilter.js","sourcesContent":["/** @module utils/caseInsensitiveFilter */\nimport React from 'react';\n\n/**\n * This function does a simple ignore case search of some `filterText` for every\n * item in a `haystack`. It will only include items that are:\n *  - not null or undefined\n *  - valid React Components\n *  - a number or string that contains each letter/number in exact order ignoring case\n *  - an object's `dataLabel` value that contains each letter/number in exact order ignoring case.\n *\n * Example:\n *\n * ```js\n * const haystack = ['Apple', 'Banana', 'Orange'];\n * caseInsensitiveFilter(haystack, 'An') // ['Banana', 'Orange'];\n * caseInsensitiveFilter(haystack, 'ae') // []\n * ```\n *\n * @param {Array.<string|number|Object|function>} haystack - the haystack to search\n * @param {string} filterText - the filter text to use.\n * @param {string=} dataLabel - the data label to use if the element is an object.\n *\n * @return {Array.<string|number|Object|function>} a filtered list.\n */\nexport default function caseInsensitiveFilter(haystack, filterText, dataLabel) {\n  const needle = filterText.toLowerCase();\n\n  return haystack.filter(hay => {\n    if (hay === null || typeof hay === 'undefined') {\n      return false;\n    } else if (React.isValidElement(hay)) {\n      return true;\n    }\n\n    let value;\n    switch (typeof hay) {\n      case 'string':\n      case 'number':\n        value = hay.toString();\n        break;\n      default:\n        value = hay[dataLabel];\n    }\n\n    return value && value.toLowerCase().indexOf(needle) !== -1;\n  });\n}\n"]}