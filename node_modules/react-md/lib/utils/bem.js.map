{"version":3,"sources":["../../src/js/utils/bem.js"],"names":["bem","base","modifiers","remaining","args","some","arg","i","type","push","element","join","Object","keys","reduce","obj","key","classes","slice","trim"],"mappings":";;;;;;8QAAA;;;kBA2BwBA,G;;AA1BxB;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBe,SAASA,GAAT,GAAsB;AACnC,MAAMC,OAAO,EAAb;AACA,MAAIC,YAAY,IAAhB;AACA,MAAIC,YAAY,CAAC,CAAjB;;AAHmC,oCAANC,IAAM;AAANA,QAAM;AAAA;;AAInCA,OAAKC,IAAL,CAAU,UAACC,GAAD,EAAMC,CAAN,EAAY;AACpB,QAAID,GAAJ,EAAS;AACP,UAAME,cAAcF,GAAd,yCAAcA,GAAd,CAAN;AACA,UAAIE,SAAS,QAAT,IAAqBA,SAAS,QAAlC,EAA4C;AAC1CP,aAAKQ,IAAL,CAAUH,GAAV;AACD,OAFD,MAEO,IAAIE,SAAS,QAAb,EAAuB;AAC5BN,oBAAYI,GAAZ;AACAH,oBAAYI,IAAI,CAAhB;AACD;AACF;AACD,WAAOL,SAAP;AACD,GAXD;;AAaA,MAAMQ,UAAUT,KAAKU,IAAL,CAAU,IAAV,CAAhB;AACA,MAAIT,SAAJ,EAAe;AACbA,gBAAYU,OAAOC,IAAP,CAAYX,SAAZ,EAAuBY,MAAvB,CAA8B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACtDD,UAAOL,OAAP,UAAmBM,GAAnB,IAA4Bd,UAAUc,GAAV,CAA5B;AACA,aAAOD,GAAP;AACD,KAHW,EAGT,EAHS,CAAZ;AAID;AACD,MAAME,UAAUd,YAAY,CAAC,CAAb,GAAiBC,KAAKc,KAAL,CAAWf,SAAX,CAAjB,GAAyC,IAAzD;AACA,SAAO,0BAAGO,OAAH,EAAYR,SAAZ,EAAuBe,OAAvB,EAAgCE,IAAhC,EAAP;AACD","file":"bem.js","sourcesContent":["/** @module utils/bem */\nimport cn from 'classnames';\n\n/**\n * A utility function to apply BEM class names to an element.\n *\n * ### Examples:\n * ```js\n * bem('class') === 'class'\n * bem('block', 'element') === 'block__element'\n * bem('block', 'element', 'sub-element') === 'block__element__sub-element'\n * bem('block', { 'mod-1': true, 'mod-2': false }) === 'block block--mod-1'\n * bem('block', 'element', { 'mod-1': false, 'mod-2': true }) === 'block__element block__element--mod-2'\n * bem('block', 'element', {\n *   'mod-1': false,\n *   'mod-2': true,\n * }, 'other', 'class-names') === 'block__element block__element--mod-2 other class-names'\n * ```\n *\n * @param {...String} blocks - 1 to many blocks to use. These names will be joined\n *    with underscores.\n * @param {Object=} modifiers - Any conditional modifiers to apply to the blocks. Each\n *    key in this object will be applied as a `--suffix` to the blocks ONLY when\n *    their value is true-ish.\n * @param {...String} others - Any additional class names to apply.\n * @return {String} the bem-formatted className string.\n */\nexport default function bem(...args) {\n  const base = [];\n  let modifiers = null;\n  let remaining = -1;\n  args.some((arg, i) => {\n    if (arg) {\n      const type = typeof arg;\n      if (type === 'number' || type === 'string') {\n        base.push(arg);\n      } else if (type === 'object') {\n        modifiers = arg;\n        remaining = i + 1;\n      }\n    }\n    return modifiers;\n  });\n\n  const element = base.join('__');\n  if (modifiers) {\n    modifiers = Object.keys(modifiers).reduce((obj, key) => {\n      obj[`${element}--${key}`] = modifiers[key];\n      return obj;\n    }, {});\n  }\n  const classes = remaining > -1 ? args.slice(remaining) : null;\n  return cn(element, modifiers, classes).trim();\n}\n"]}