{"version":3,"sources":["../../src/js/utils/toggleScroll.js"],"names":["toggleScroll","scrollable","selector","className","queryable","el","document","querySelector","classList","contains","style","top","scrollTop","add","Math","abs","parseInt","remove","window","scrollTo"],"mappings":";;;;;kBAkBwBA,Y;;AAjBxB;;;;;;AAEA;;;;;;;;;;;;;;;AAee,SAASA,YAAT,CAAsBC,UAAtB,EAAkCC,QAAlC,EAAwE;AAAA,MAA5BC,SAA4B,uEAAhB,cAAgB;;AACrF,MAAMC,YAAY,CAACF,QAAD,IAAa,OAAOA,QAAP,KAAoB,QAAnD;AACA,MAAIG,WAAJ;AACA,MAAID,SAAJ,EAAe;AACbC,SAAKH,WAAWI,SAASC,aAAT,CAAuBL,QAAvB,CAAX,GAA8CI,SAASC,aAAT,CAAuB,MAAvB,CAAnD;AACD,GAFD,MAEO;AACLF,SAAKH,QAAL;AACD;;AAED,MAAI,CAACG,EAAL,EAAS;AACP;AACD;;AAED,MAAI,OAAOJ,UAAP,KAAsB,WAA1B,EAAuC;AACrCA,iBAAa,CAACI,GAAGG,SAAH,CAAaC,QAAb,CAAsBN,SAAtB,CAAd;AACD;;AAED,MAAIF,cAAc,CAACI,GAAGG,SAAH,CAAaC,QAAb,CAAsBN,SAAtB,CAAnB,EAAqD;AACnDE,OAAGK,KAAH,CAASC,GAAT,UAAmBP,YAAY,+BAAgB,GAAhB,CAAZ,GAAmCC,GAAGO,SAAzD;AACAP,OAAGG,SAAH,CAAaK,GAAb,CAAiBV,SAAjB;AACD,GAHD,MAGO,IAAI,CAACF,UAAD,IAAeI,GAAGG,SAAH,CAAaC,QAAb,CAAsBN,SAAtB,CAAnB,EAAqD;AAC1D,QAAMS,YAAYE,KAAKC,GAAL,CAASC,SAASX,GAAGK,KAAH,CAASC,GAAlB,EAAuB,EAAvB,CAAT,CAAlB;AACAN,OAAGG,SAAH,CAAaS,MAAb,CAAoBd,SAApB;AACAE,OAAGK,KAAH,CAASC,GAAT,GAAe,IAAf;;AAEA,QAAI,CAACT,QAAL,EAAe;AACbgB,aAAOC,QAAP,CAAgB,CAAhB,EAAmBP,SAAnB;AACD,KAFD,MAEO;AACLP,SAAGO,SAAH,GAAeA,SAAf;AACD;AACF;AACF,C,CAjDD","file":"toggleScroll.js","sourcesContent":["/** @module utils/toggleScroll */\nimport getPagePosition from './Positioning/getPagePosition';\n\n/**\n * A utility function for toggling the overflow visibility on an element. This will either target\n * the given `selector`, or the `body` tag to set a `className`.\n *\n * If the `visible` param is `undefined`, the className will be toggled.\n * If the `visible` param is `true`, the className will be added.\n * If the `visible` param is `false`, the className will be removed.\n *\n *\n * > This depends on the `classList` attribute on elements.\n *\n * @param {bool=} visible - An optional boolean to determine how the `className` will be applied.\n * @param {string|Object=} selector - An optional query selector string to use to select an element.\n * @param {string=} className - The className to apply. Defaults to 'md-overflow-hidden'\n */\nexport default function toggleScroll(scrollable, selector, className = 'md-no-scroll') {\n  const queryable = !selector || typeof selector === 'string';\n  let el;\n  if (queryable) {\n    el = selector ? document.querySelector(selector) : document.querySelector('html');\n  } else {\n    el = selector;\n  }\n\n  if (!el) {\n    return;\n  }\n\n  if (typeof scrollable === 'undefined') {\n    scrollable = !el.classList.contains(className);\n  }\n\n  if (scrollable && !el.classList.contains(className)) {\n    el.style.top = `-${queryable ? getPagePosition('y') : el.scrollTop}px`;\n    el.classList.add(className);\n  } else if (!scrollable && el.classList.contains(className)) {\n    const scrollTop = Math.abs(parseInt(el.style.top, 10));\n    el.classList.remove(className);\n    el.style.top = null;\n\n    if (!selector) {\n      window.scrollTo(0, scrollTop);\n    } else {\n      el.scrollTop = scrollTop;\n    }\n  }\n}\n"]}